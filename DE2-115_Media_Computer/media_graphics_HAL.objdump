
C:/goku/DE2-115_Media_Computer/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/goku/DE2-115_Media_Computer/media_graphics_HAL.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000168

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011ec8 memsz 0x00011ec8 flags r-x
    LOAD off    0x00012ee8 vaddr 0x00011ee8 paddr 0x00013a3c align 2**12
         filesz 0x00001b54 memsz 0x00001b54 flags rw-
    LOAD off    0x00015590 vaddr 0x00015590 paddr 0x00015590 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011678  00000168  00000168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000708  000117e0  000117e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00011ee8  00013a3c  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  00015590  00015590  00015590  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00014a3c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001018  00000000  00000000  00014a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000019f8  00000000  00000000  00015a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002cbe9  00000000  00000000  00017470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aa62  00000000  00000000  00044059  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001a362  00000000  00000000  0004eabb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001da8  00000000  00000000  00068e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003913  00000000  00000000  0006abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001388f  00000000  00000000  0006e4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00081d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c20  00000000  00000000  00081d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008622b  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0008622e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00086231  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00086232  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00086233  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00086237  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008623b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0008623f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00086248  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00086251  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0008625a  2**0
                  CONTENTS, READONLY
 28 .jdi          00004aa8  00000000  00000000  00086265  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00083630  00000000  00000000  0008ad0d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000168 l    d  .text	00000000 .text
000117e0 l    d  .rodata	00000000 .rodata
00011ee8 l    d  .rwdata	00000000 .rwdata
00015590 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000005e0 l     F .text	00000058 __sprint_r
000118ec l     O .rodata	00000010 blanks.3452
000118dc l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00011904 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00011a2c l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00003dc4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000057c0 l     F .text	00000058 std
000058cc l     F .text	00000008 __fp_lock
000058d4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011ee8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00013a08 l     O .rwdata	00000004 charset
00011bd0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011d18 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00008c84 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
00009198 l     F .text	00000048 match
00012710 l     O .rwdata	00000014 fpi.1950
00011d34 l     O .rodata	00000028 tinytens
000126fc l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000b890 l     F .text	00000024 htinit
0000b91c l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000c184 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000d3a8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000e5d0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000efc0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013a2c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000128cc l     O .rwdata	00001060 JTAG_UART
0001392c l     O .rwdata	00000030 AV_Config
0001395c l     O .rwdata	00000048 VGA_Char_Buffer
000139a4 l     O .rwdata	00000054 VGA_Pixel_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f98c l     F .text	00000054 altera_avalon_jtag_uart_timeout
0000fa60 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010d6c l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00011614 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000078e4 g     F .text	00000094 _mprec_log10
000079d0 g     F .text	00000088 __any_on
0000c418 g     F .text	00000070 _isatty_r
00011cf0 g     O .rodata	00000028 __mprec_tinytens
0000f228 g     F .text	00000050 alt_main
000102ac g     F .text	00000194 alt_up_pixel_buffer_dma_draw_vline
000156ec g     O .bss	00000100 alt_irq
0000c488 g     F .text	00000078 _lseek_r
00013a3c g       *ABS*	00000000 __flash_rwdata_start
0000dec8 g     F .text	00000088 __eqdf2
000157ec g       *ABS*	00000000 __alt_heap_start
000004ec g     F .text	00000044 printf
00008f24 g     F .text	00000068 __sseek
00005828 g     F .text	000000a4 __sinit
000114c8 g     F .text	00000130 __swbuf_r
0000feec g     F .text	00000088 alt_up_char_buffer_string
00006768 g     F .text	00000084 _setlocale_r
00005928 g     F .text	00000068 __sfmoreglue
0000b540 g     F .text	0000001c ungetc
0000f27c g     F .text	00000004 __malloc_unlock
000091e0 g     F .text	000014e4 _strtod_r
0000ff74 g     F .text	00000058 alt_up_char_buffer_draw
00007360 g     F .text	000000e0 memmove
00005918 g     F .text	00000010 _cleanup
00007a58 g     F .text	000000bc _Balloc
00000390 g     F .text	00000094 __fixsfsi
000109a0 g     F .text	000000bc alt_up_pixel_buffer_dma_draw
0000dfd8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00010a94 g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b81c g     F .text	00000074 _fstat_r
000155a8 g     O .bss	00000004 errno
00003b88 g     F .text	00000024 __svfscanf
0000e844 g     F .text	0000002c __make_fp
000155b0 g     O .bss	00000004 alt_argv
0001b9f8 g       *ABS*	00000000 _gp
00010a6c g     F .text	00000028 alt_up_pixel_buffer_dma_change_back_buffer_address
0001274c g     O .rwdata	00000180 alt_fd_list
00010bbc g     F .text	00000070 alt_find_dev
000072c0 g     F .text	000000a0 memcpy
0000c1d0 g     F .text	00000248 __hexnan
0000ffcc g     F .text	00000028 alt_up_char_buffer_clear
0000590c g     F .text	0000000c _cleanup_r
0000e1f8 g     F .text	000000f8 __floatsidf
00010dd0 g     F .text	00000098 alt_io_redirect
0000e0e8 g     F .text	00000088 __ltdf2
0000715c g     F .text	00000040 mbrtowc
00003bac g     F .text	00000068 _vfscanf_r
00007834 g     F .text	000000b0 __ratio
00010a5c g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
0000fc08 g     F .text	00000168 altera_avalon_jtag_uart_read
00000530 g     F .text	00000034 _printf_r
0000e70c g     F .text	00000008 __udivsi3
0000f048 g     F .text	00000084 isatty
00006718 g     F .text	0000002c iswspace
00011c00 g     O .rodata	000000c8 __mprec_tens
00010440 g     F .text	00000174 alt_up_pixel_buffer_dma_draw_hline
00006744 g     F .text	00000008 __locale_charset
0000c610 g     F .text	000000a4 __fixunsdfsi
000111f4 g     F .text	0000003c alt_icache_flush
0001559c g     O .bss	00000004 __malloc_top_pad
0000afb4 g     F .text	00000024 strtoul
00013a04 g     O .rwdata	00000004 __mb_cur_max
0000674c g     F .text	0000000c _localeconv_r
0000afd8 g     F .text	000002f0 _strtoull_r
00008150 g     F .text	0000003c __i2b
000060fc g     F .text	0000049c __sfvwrite_r
00008d10 g     F .text	00000070 _sbrk_r
00010064 g     F .text	0000005c helper_plot_pixel
0000c500 g     F .text	00000078 _read_r
000122e8 g     O .rwdata	0000000c __lc_ctype
00013a24 g     O .rwdata	00000004 alt_max_fd
0000eb84 g     F .text	00000138 __unpack_d
0000b6f8 g     F .text	00000110 _fclose_r
0000578c g     F .text	00000034 fflush
000155a0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000d838 g     F .text	00000074 __adddf3
0000d240 g     F .text	00000078 __nesf2
00007714 g     F .text	00000120 __b2d
000108c8 g     F .text	000000b4 alt_up_pixel_buffer_dma_clear_screen
0000cc90 g     F .text	000005b0 __umoddi3
0000f190 g     F .text	00000098 lseek
00013a00 g     O .rwdata	00000004 _global_impure_ptr
000084cc g     F .text	000005f4 _realloc_r
000157ec g       *ABS*	00000000 __bss_end
00010d04 g     F .text	00000068 alt_iic_isr_register
00010684 g     F .text	00000244 alt_up_pixel_buffer_dma_draw_box
00011018 g     F .text	000000ac alt_tick
000155ec g     O .bss	00000100 __hexdig
0000c6b4 g     F .text	000005dc __udivdi3
00011cc8 g     O .rodata	00000028 __mprec_bigtens
000083ac g     F .text	00000120 __s2b
0000e43c g     F .text	00000194 __floatunsidf
00007634 g     F .text	00000060 __mcmp
000139f8 g     O .rwdata	00000004 __ctype_ptr
000058f4 g     F .text	00000018 __fp_lock_all
00010c4c g     F .text	00000018 alt_ic_irq_enabled
00010fe4 g     F .text	00000034 alt_alarm_stop
0000aa48 g     F .text	00000024 strtol
000155b8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	0000007c alt_irq_handler
00012724 g     O .rwdata	00000028 alt_dev_null
00000424 g     F .text	000000c8 __unpack_f
00010b48 g     F .text	00000004 alt_dcache_flush_all
00007500 g     F .text	00000070 __hi0bits
000105b4 g     F .text	000000d0 alt_up_pixel_buffer_dma_draw_rectangle
0000e2f0 g     F .text	000000d8 __fixdfsi
0000a7e8 g     F .text	0000001c strtod
00013a3c g       *ABS*	00000000 __ram_rwdata_end
00013a1c g     O .rwdata	00000008 alt_dev_list
0000f5f0 g     F .text	000000f4 write
000113e0 g     F .text	000000e8 _putc_r
000100c0 g     F .text	000001ec alt_up_pixel_buffer_dma_draw_line
0000d2b8 g     F .text	00000078 __gtsf2
00011ee8 g       *ABS*	00000000 __ram_rodata_end
0000efc8 g     F .text	00000080 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000e170 g     F .text	00000088 __ledf2
0000828c g     F .text	00000120 __pow5mult
00015590 g     O .bss	00000004 __nlocale_changed
0000e714 g     F .text	00000008 __umodsi3
00000564 g     F .text	00000034 _scanf_r
000157ec g       *ABS*	00000000 end
0000ed84 g     F .text	00000160 __pack_f
00010014 g     F .text	00000050 alt_up_char_buffer_init
0000f9e0 g     F .text	00000080 altera_avalon_jtag_uart_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000e71c g     F .text	00000080 __clzsi2
0000fd70 g     F .text	0000017c altera_avalon_jtag_uart_write
00005818 g     F .text	00000004 __sfp_lock_acquire
000071dc g     F .text	000000e4 memchr
00000638 g     F .text	00001eac ___vfprintf_internal_r
00008ebc g     F .text	00000060 _sprintf_r
00005de8 g     F .text	00000314 _free_r
0000f280 g     F .text	000001dc alt_printf
00011618 g     F .text	000001b0 __call_exitprocs
00015594 g     O .bss	00000004 __mlocale_changed
00013a10 g     O .rwdata	00000004 __malloc_sbrk_base
00000168 g     F .text	0000003c _start
000155bc g     O .bss	00000004 _alt_tick_rate
0000aa6c g     F .text	00000318 _strtoll_r
00007e1c g     F .text	0000014c __lshift
000155c0 g     O .bss	00000004 _alt_nticks
0000f484 g     F .text	000000f8 read
0000f704 g     F .text	000001b8 alt_sys_init
00007f68 g     F .text	000001e8 __multiply
0000f954 g     F .text	00000038 altera_avalon_jtag_uart_close
00011ee8 g       *ABS*	00000000 __ram_rwdata_start
000117e0 g       *ABS*	00000000 __ram_rodata_start
000155c4 g     O .bss	00000028 __malloc_current_mallinfo
00007b14 g     F .text	0000017c __d2b
0000f92c g     F .text	00000028 altera_avalon_jtag_uart_read_fd
0000ad84 g     F .text	00000230 _strtoul_r
00011188 g     F .text	0000006c alt_get_fd
0000ecbc g     F .text	000000c8 __fpcmp_parts_d
0000b688 g     F .text	00000070 _close_r
00011268 g     F .text	00000074 memcmp
0000f8dc g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000157ec g       *ABS*	00000000 __alt_stack_base
0000f8bc g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00003c88 g     F .text	0000013c __swsetup_r
0000dc70 g     F .text	00000258 __divdf3
00005990 g     F .text	000000f0 __sfp
00007978 g     F .text	00000058 __copybits
000122f4 g     O .rwdata	00000408 __malloc_av_
00005824 g     F .text	00000004 __sinit_lock_release
0000d8ac g     F .text	000003c4 __muldf3
00009008 g     F .text	00000060 __sread
00005c7c g     F .text	00000040 fread
000110cc g     F .text	000000bc alt_find_file
00010b4c g     F .text	00000070 alt_dev_llist_insert
0000f278 g     F .text	00000004 __malloc_lock
0000f5a0 g     F .text	00000050 sbrk
00005590 g     F .text	000001fc _fflush_r
0000b5d4 g     F .text	000000b4 _calloc_r
00015590 g       *ABS*	00000000 __bss_start
00007440 g     F .text	00000098 memset
000001a4 g     F .text	000001ec main
000155b4 g     O .bss	00000004 alt_envp
000155a4 g     O .bss	00000004 __malloc_max_total_mem
0001097c g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
0000fff4 g     F .text	00000020 alt_up_char_buffer_open_dev
0000f904 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000115f8 g     F .text	0000001c __swbuf
0000d330 g     F .text	00000078 __ltsf2
00005a80 g     F .text	000001fc _fread_r
00008f1c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000b808 g     F .text	00000014 fclose
0000a804 g     F .text	00000244 _strtol_r
0000e3c8 g     F .text	00000074 __truncdfsf2
00003fdc g     F .text	000015b4 _dtoa_r
0000699c g     F .text	00000740 _malloc_r
00013a28 g     O .rwdata	00000004 alt_errno
0000b2c8 g     F .text	000000dc __submore
00006660 g     F .text	000000b8 _fwalk
0000719c g     F .text	00000040 _mbtowc_r
000112dc g     F .text	00000104 putc
0000e64c g     F .text	00000060 __divsi3
00011d78 g     O .rodata	00000014 __thenan_df
00005cbc g     F .text	0000012c _malloc_trim_r
00009068 g     F .text	000000bc strcmp
000117e0 g       *ABS*	00000000 __flash_rodata_start
0000df50 g     F .text	00000088 __nedf2
0000f6e4 g     F .text	00000020 alt_irq_init
0000f57c g     F .text	00000024 alt_release_fd
00008e48 g     F .text	00000074 sprintf
00011d8c g     O .rodata	00000100 __clz_tab
00015598 g     O .bss	00000004 _PathLocale
0000a6c4 g     F .text	00000124 strtof
0000b55c g     F .text	00000078 _write_r
000067ec g     F .text	0000001c setlocale
00000598 g     F .text	00000048 scanf
00008e40 g     F .text	00000008 nanf
000139fc g     O .rwdata	00000004 _impure_ptr
000155ac g     O .bss	00000004 alt_argc
000070dc g     F .text	00000080 _mbrtowc_r
00008ac0 g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00007694 g     F .text	00000080 __ulp
00008ca0 g     F .text	00000040 __isinfd
000058dc g     F .text	00000018 __fp_unlock_all
00013a14 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006758 g     F .text	00000010 localeconv
00010ce4 g     F .text	00000020 alt_ic_isr_register
0000b8b4 g     F .text	00000068 __hexdig_init
00013a3c g       *ABS*	00000000 _edata
000157ec g       *ABS*	00000000 _end
00000168 g       *ABS*	00000000 __ram_exceptions_end
00003c14 g     F .text	00000074 vfscanf
0000fb94 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00010ca4 g     F .text	00000040 alt_ic_irq_disable
00008f8c g     F .text	0000007c __swrite
00013a0c g     O .rwdata	00000004 __malloc_trim_threshold
000110c4 g     F .text	00000008 altera_nios2_qsys_irq_init
00011230 g     F .text	00000038 exit
00006598 g     F .text	000000c8 _fwalk_reent
00007c90 g     F .text	0000018c __mdiff
0000e6ac g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000581c g     F .text	00000004 __sfp_lock_release
00008d80 g     F .text	000000c0 __sccl
00011928 g     O .rodata	00000101 _ctype_
0000e79c g     F .text	000000a8 __fpcmp_parts_f
000117c8 g     F .text	00000014 _exit
00008ce0 g     F .text	00000030 __isnand
00010ab4 g     F .text	00000094 alt_alarm_start
0000c578 g     F .text	00000098 __muldi3
00006808 g     F .text	00000194 __smakebuf_r
00009124 g     F .text	00000074 strlen
00010e68 g     F .text	0000017c open
0000e060 g     F .text	00000088 __gedf2
0000f45c g     F .text	00000028 alt_putchar
0000b9cc g     F .text	000007b8 __gethex
00010c2c g     F .text	00000020 alt_icache_flush_all
00013a30 g     O .rwdata	00000004 alt_priority_mask
00010c64 g     F .text	00000040 alt_ic_irq_enable
000024e4 g     F .text	00000024 __vfprintf_internal
0000d7b8 g     F .text	00000080 __subdf3
00007570 g     F .text	000000c4 __lo0bits
00002508 g     F .text	00001680 __svfscanf_r
00013a34 g     O .rwdata	00000008 alt_alarm_list
0000b3a4 g     F .text	0000019c _ungetc_r
0000eee4 g     F .text	000000dc close
0000f0cc g     F .text	000000c4 alt_load
0000e870 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00005820 g     F .text	00000004 __sinit_lock_acquire
0000818c g     F .text	00000100 __multadd
000074d8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405a14 	ori	at,at,360
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffe04 	addi	sp,sp,-8
  f0:	dfc00115 	stw	ra,4(sp)
  f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  f8:	000d313a 	rdctl	r6,ipending
  fc:	04000074 	movhi	r16,1
 100:	8415bb04 	addi	r16,r16,22252
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	3080004c 	andi	r2,r6,1
 108:	1005003a 	cmpeq	r2,r2,zero
 10c:	10000a1e 	bne	r2,zero,138 <alt_irq_handler+0x4c>
 110:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 114:	200490fa 	slli	r2,r4,3
 118:	1405883a 	add	r2,r2,r16
 11c:	10c00017 	ldw	r3,0(r2)
 120:	11000117 	ldw	r4,4(r2)
 124:	183ee83a 	callr	r3
 128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 12c:	10000a26 	beq	r2,zero,158 <alt_irq_handler+0x6c>
 130:	100d883a 	mov	r6,r2
 134:	003ff306 	br	104 <alt_irq_handler+0x18>
 138:	00c00044 	movi	r3,1
 13c:	0009883a 	mov	r4,zero
 140:	180b883a 	mov	r5,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 144:	18c7883a 	add	r3,r3,r3
      i++;
 148:	2149883a 	add	r4,r4,r5
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 14c:	30c4703a 	and	r2,r6,r3
 150:	103ff01e 	bne	r2,zero,114 <alt_irq_handler+0x28>
 154:	003ffb06 	br	144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

Disassembly of section .text:

00000168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     168:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     16c:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     170:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     174:	d6ae7e14 	ori	gp,gp,47608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     178:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     17c:	10956414 	ori	r2,r2,21904

    movhi r3, %hi(__bss_end)
     180:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     184:	18d5fb14 	ori	r3,r3,22508

    beq r2, r3, 1f
     188:	10c00326 	beq	r2,r3,198 <_start+0x30>

0:
    stw zero, (r2)
     18c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     194:	10fffd36 	bltu	r2,r3,18c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     198:	000f0cc0 	call	f0cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     19c:	000f2280 	call	f228 <alt_main>

000001a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1a0:	003fff06 	br	1a0 <alt_after_alt_main>

000001a4 <main>:
#define fix2int16(a)   ((int)((a)>>8))
#define int2fix16(a)   ((fix16)((a)<<8))
#define float2fix16(a) ((fix16)((a)*65536.0)) // 2^16

int main(void)
{
     1a4:	defff404 	addi	sp,sp,-48
     1a8:	dfc00b15 	stw	ra,44(sp)
     1ac:	dd400a15 	stw	r21,40(sp)
     1b0:	dd000915 	stw	r20,36(sp)
     1b4:	dcc00815 	stw	r19,32(sp)
     1b8:	dc800715 	stw	r18,28(sp)
     1bc:	dc400615 	stw	r17,24(sp)
     1c0:	dc000515 	stw	r16,20(sp)
	
	while(1){
		
		volatile int button_read;
		volatile int dummy_delay=32768;
     1c4:	00a00014 	movui	r2,32768
     1c8:	d8800415 	stw	r2,16(sp)
		//Prepare to load floating point input from serial console
		   	 float input_float;
		   	 
		   	 
		   	 //For each initial condition, ask the user to input a decimal value.
		   	 printf("Enter kp ");
     1cc:	01000074 	movhi	r4,1
     1d0:	2105f804 	addi	r4,r4,6112
     1d4:	00004ec0 	call	4ec <printf>
		   	 scanf("%f", &input_float);
     1d8:	04000074 	movhi	r16,1
     1dc:	8405fb04 	addi	r16,r16,6124
     1e0:	8009883a 	mov	r4,r16
     1e4:	d9400304 	addi	r5,sp,12
     1e8:	00005980 	call	598 <scanf>
		   	 
		   	 //NIOS must convert that floating point value to fixed-point compatible with
		   	 //the top-level hardware spring system.
		   	 *(volatile int *)KP_BASE = input_float;
     1ec:	d9000317 	ldw	r4,12(sp)
     1f0:	00003900 	call	390 <__fixsfsi>
     1f4:	00c20834 	movhi	r3,2080
     1f8:	18c10804 	addi	r3,r3,1056
     1fc:	18800015 	stw	r2,0(r3)
		   	 
		   	 //Do the same for the rest of the inputs.
		   	 printf("Enter ki: ");
     200:	01000074 	movhi	r4,1
     204:	2105fc04 	addi	r4,r4,6128
     208:	00004ec0 	call	4ec <printf>
		   	 scanf("%f", &input_float);
     20c:	8009883a 	mov	r4,r16
     210:	d9400304 	addi	r5,sp,12
     214:	00005980 	call	598 <scanf>
		   	 *(volatile int *)KI_BASE = input_float;
     218:	d9000317 	ldw	r4,12(sp)
     21c:	00003900 	call	390 <__fixsfsi>
     220:	00c20834 	movhi	r3,2080
     224:	18c10404 	addi	r3,r3,1040
     228:	18800015 	stw	r2,0(r3)
		   	 
		   	 printf("Enter kd ");
     22c:	01000074 	movhi	r4,1
     230:	2105ff04 	addi	r4,r4,6140
     234:	00004ec0 	call	4ec <printf>
		   	 scanf("%f", &input_float);
     238:	8009883a 	mov	r4,r16
     23c:	d9400304 	addi	r5,sp,12
     240:	00005980 	call	598 <scanf>
		   	 *(volatile int *)KD_BASE = input_float;
     244:	d9000317 	ldw	r4,12(sp)
     248:	00003900 	call	390 <__fixsfsi>
     24c:	00c20834 	movhi	r3,2080
     250:	18c10004 	addi	r3,r3,1024
     254:	18800015 	stw	r2,0(r3)
		
		/* used for drawing coordinates */
		int x1, y1, x2, y2, deltax_1, deltax_2, deltay_1, deltay_2, delay = 0;

		/* initialize the pixel buffer HAL */
		pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     258:	01000074 	movhi	r4,1
     25c:	21060204 	addi	r4,r4,6152
     260:	0010a940 	call	10a94 <alt_up_pixel_buffer_dma_open_dev>
     264:	1023883a 	mov	r17,r2
		if ( pixel_buffer_dev == NULL)
     268:	1000041e 	bne	r2,zero,27c <main+0xd8>
			alt_printf ("Error: could not open VGA pixel buffer device\n");
     26c:	01000074 	movhi	r4,1
     270:	21060804 	addi	r4,r4,6176
     274:	000f2800 	call	f280 <alt_printf>
     278:	00000306 	br	288 <main+0xe4>
		else
			alt_printf ("Opened character VGA pixel buffer device\n");
     27c:	01000074 	movhi	r4,1
     280:	21061404 	addi	r4,r4,6224
     284:	000f2800 	call	f280 <alt_printf>
		/* clear the graphics screen */
		alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     288:	8809883a 	mov	r4,r17
     28c:	000b883a 	mov	r5,zero
     290:	00108c80 	call	108c8 <alt_up_pixel_buffer_dma_clear_screen>
     294:	04000044 	movi	r16,1
     298:	04bfffc4 	movi	r18,-1
     29c:	05007584 	movi	r20,470
     2a0:	054035c4 	movi	r21,215
	
		vga_x=1;
		
		while(1){

			x1_read_value = *(volatile int*)PIO_X1_OUTPUT_INIT_7_BASE;
     2a4:	00820834 	movhi	r2,2080
     2a8:	10811004 	addi	r2,r2,1088
     2ac:	10c00017 	ldw	r3,0(r2)
			x2_read_value = *(volatile int*)PIO_X2_OUTPUT_INIT_8_BASE;
     2b0:	10bffc04 	addi	r2,r2,-16
     2b4:	14c00017 	ldw	r19,0(r2)

			dummy_delay=1<<11;
     2b8:	00820004 	movi	r2,2048
     2bc:	d8800415 	stw	r2,16(sp)
			while(dummy_delay--){}
     2c0:	d8800417 	ldw	r2,16(sp)
     2c4:	1485883a 	add	r2,r2,r18
     2c8:	d8800415 	stw	r2,16(sp)
     2cc:	d8800417 	ldw	r2,16(sp)
     2d0:	14bffb1e 	bne	r2,r18,2c0 <main+0x11c>

			vga_x++;
     2d4:	84000044 	addi	r16,r16,1
			///// For debug only
			//printf ("raw_prox = %d \t median = %d \n",x1_read_value,x2_read_value);

			// Implementing filtering in Verilog itself
			
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, vga_x, 480-x1_read_value_print - 13, vga_x, 480-x1_read_value_print - 13, 0xFFFF, 0);
     2d8:	1805d1fa 	srai	r2,r3,7
     2dc:	018074c4 	movi	r6,467
     2e0:	308dc83a 	sub	r6,r6,r2
     2e4:	d9800015 	stw	r6,0(sp)
     2e8:	00bfffd4 	movui	r2,65535
     2ec:	d8800115 	stw	r2,4(sp)
     2f0:	d8000215 	stw	zero,8(sp)
     2f4:	8809883a 	mov	r4,r17
     2f8:	800b883a 	mov	r5,r16
     2fc:	800f883a 	mov	r7,r16
     300:	00106840 	call	10684 <alt_up_pixel_buffer_dma_draw_box>
			
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, vga_x, 480-x2_read_value_print - 10, vga_x, 480-x2_read_value_print - 10, 0x8888, 0);
     304:	980dd1fa 	srai	r6,r19,7
     308:	a18dc83a 	sub	r6,r20,r6
     30c:	d9800015 	stw	r6,0(sp)
     310:	00a22214 	movui	r2,34952
     314:	d8800115 	stw	r2,4(sp)
     318:	d8000215 	stw	zero,8(sp)
     31c:	8809883a 	mov	r4,r17
     320:	800b883a 	mov	r5,r16
     324:	800f883a 	mov	r7,r16
     328:	00106840 	call	10684 <alt_up_pixel_buffer_dma_draw_box>
			
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, vga_x, 480-(32767>>7) - 10, vga_x, 480-(32767>>7) - 10, 0x187F, 0);
     32c:	dd400015 	stw	r21,0(sp)
     330:	00861fc4 	movi	r2,6271
     334:	d8800115 	stw	r2,4(sp)
     338:	d8000215 	stw	zero,8(sp)
     33c:	8809883a 	mov	r4,r17
     340:	800b883a 	mov	r5,r16
     344:	a80d883a 	mov	r6,r21
     348:	800f883a 	mov	r7,r16
     34c:	00106840 	call	10684 <alt_up_pixel_buffer_dma_draw_box>
			
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, vga_x, 480-0 - 10, vga_x, 480-0 - 10, 0x49AF, 0);
     350:	dd000015 	stw	r20,0(sp)
     354:	00926bc4 	movi	r2,18863
     358:	d8800115 	stw	r2,4(sp)
     35c:	d8000215 	stw	zero,8(sp)
     360:	8809883a 	mov	r4,r17
     364:	800b883a 	mov	r5,r16
     368:	a00d883a 	mov	r6,r20
     36c:	800f883a 	mov	r7,r16
     370:	00106840 	call	10684 <alt_up_pixel_buffer_dma_draw_box>

			if (vga_x == 639){
     374:	00809fc4 	movi	r2,639
     378:	80bfca1e 	bne	r16,r2,2a4 <main+0x100>
				alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     37c:	8809883a 	mov	r4,r17
     380:	000b883a 	mov	r5,zero
     384:	00108c80 	call	108c8 <alt_up_pixel_buffer_dma_clear_screen>
     388:	0021883a 	mov	r16,zero
     38c:	003fc506 	br	2a4 <main+0x100>

00000390 <__fixsfsi>:
     390:	defffa04 	addi	sp,sp,-24
     394:	d9000015 	stw	r4,0(sp)
     398:	d9400104 	addi	r5,sp,4
     39c:	d809883a 	mov	r4,sp
     3a0:	dfc00515 	stw	ra,20(sp)
     3a4:	00004240 	call	424 <__unpack_f>
     3a8:	d8c00117 	ldw	r3,4(sp)
     3ac:	00800084 	movi	r2,2
     3b0:	1880041e 	bne	r3,r2,3c4 <__fixsfsi+0x34>
     3b4:	0005883a 	mov	r2,zero
     3b8:	dfc00517 	ldw	ra,20(sp)
     3bc:	dec00604 	addi	sp,sp,24
     3c0:	f800283a 	ret
     3c4:	00800044 	movi	r2,1
     3c8:	10fffa2e 	bgeu	r2,r3,3b4 <__fixsfsi+0x24>
     3cc:	00800104 	movi	r2,4
     3d0:	18800426 	beq	r3,r2,3e4 <__fixsfsi+0x54>
     3d4:	d8800317 	ldw	r2,12(sp)
     3d8:	103ff616 	blt	r2,zero,3b4 <__fixsfsi+0x24>
     3dc:	00c00784 	movi	r3,30
     3e0:	1880070e 	bge	r3,r2,400 <__fixsfsi+0x70>
     3e4:	d8800217 	ldw	r2,8(sp)
     3e8:	10000c1e 	bne	r2,zero,41c <__fixsfsi+0x8c>
     3ec:	00a00034 	movhi	r2,32768
     3f0:	10bfffc4 	addi	r2,r2,-1
     3f4:	dfc00517 	ldw	ra,20(sp)
     3f8:	dec00604 	addi	sp,sp,24
     3fc:	f800283a 	ret
     400:	1885c83a 	sub	r2,r3,r2
     404:	d9000217 	ldw	r4,8(sp)
     408:	d8c00417 	ldw	r3,16(sp)
     40c:	1884d83a 	srl	r2,r3,r2
     410:	203fe926 	beq	r4,zero,3b8 <__fixsfsi+0x28>
     414:	0085c83a 	sub	r2,zero,r2
     418:	003fe706 	br	3b8 <__fixsfsi+0x28>
     41c:	00a00034 	movhi	r2,32768
     420:	003fe506 	br	3b8 <__fixsfsi+0x28>

00000424 <__unpack_f>:
     424:	21800017 	ldw	r6,0(r4)
     428:	00c02034 	movhi	r3,128
     42c:	18ffffc4 	addi	r3,r3,-1
     430:	3004d5fa 	srli	r2,r6,23
     434:	3008d7fa 	srli	r4,r6,31
     438:	30ce703a 	and	r7,r6,r3
     43c:	10c03fcc 	andi	r3,r2,255
     440:	29000115 	stw	r4,4(r5)
     444:	1800131e 	bne	r3,zero,494 <__unpack_f+0x70>
     448:	38000f26 	beq	r7,zero,488 <__unpack_f+0x64>
     44c:	380691fa 	slli	r3,r7,7
     450:	01bfe084 	movi	r6,-126
     454:	008000c4 	movi	r2,3
     458:	01100034 	movhi	r4,16384
     45c:	213fffc4 	addi	r4,r4,-1
     460:	28800015 	stw	r2,0(r5)
     464:	29800215 	stw	r6,8(r5)
     468:	20c00536 	bltu	r4,r3,480 <__unpack_f+0x5c>
     46c:	3005883a 	mov	r2,r6
     470:	18c7883a 	add	r3,r3,r3
     474:	10bfffc4 	addi	r2,r2,-1
     478:	20fffd2e 	bgeu	r4,r3,470 <__unpack_f+0x4c>
     47c:	28800215 	stw	r2,8(r5)
     480:	28c00315 	stw	r3,12(r5)
     484:	f800283a 	ret
     488:	00800084 	movi	r2,2
     48c:	28800015 	stw	r2,0(r5)
     490:	f800283a 	ret
     494:	00803fc4 	movi	r2,255
     498:	18800826 	beq	r3,r2,4bc <__unpack_f+0x98>
     49c:	380491fa 	slli	r2,r7,7
     4a0:	18ffe044 	addi	r3,r3,-127
     4a4:	28c00215 	stw	r3,8(r5)
     4a8:	10900034 	orhi	r2,r2,16384
     4ac:	28800315 	stw	r2,12(r5)
     4b0:	008000c4 	movi	r2,3
     4b4:	28800015 	stw	r2,0(r5)
     4b8:	f800283a 	ret
     4bc:	3800031e 	bne	r7,zero,4cc <__unpack_f+0xa8>
     4c0:	00800104 	movi	r2,4
     4c4:	28800015 	stw	r2,0(r5)
     4c8:	f800283a 	ret
     4cc:	3080042c 	andhi	r2,r6,16
     4d0:	10000426 	beq	r2,zero,4e4 <__unpack_f+0xc0>
     4d4:	00800044 	movi	r2,1
     4d8:	28800015 	stw	r2,0(r5)
     4dc:	29c00315 	stw	r7,12(r5)
     4e0:	f800283a 	ret
     4e4:	28000015 	stw	zero,0(r5)
     4e8:	003ffc06 	br	4dc <__unpack_f+0xb8>

000004ec <printf>:
     4ec:	defffb04 	addi	sp,sp,-20
     4f0:	dfc00115 	stw	ra,4(sp)
     4f4:	d9400215 	stw	r5,8(sp)
     4f8:	d9800315 	stw	r6,12(sp)
     4fc:	d9c00415 	stw	r7,16(sp)
     500:	00800074 	movhi	r2,1
     504:	108e7f04 	addi	r2,r2,14844
     508:	10c00017 	ldw	r3,0(r2)
     50c:	200b883a 	mov	r5,r4
     510:	d8800204 	addi	r2,sp,8
     514:	19000217 	ldw	r4,8(r3)
     518:	100d883a 	mov	r6,r2
     51c:	d8800015 	stw	r2,0(sp)
     520:	00024e40 	call	24e4 <__vfprintf_internal>
     524:	dfc00117 	ldw	ra,4(sp)
     528:	dec00504 	addi	sp,sp,20
     52c:	f800283a 	ret

00000530 <_printf_r>:
     530:	defffc04 	addi	sp,sp,-16
     534:	dfc00115 	stw	ra,4(sp)
     538:	d9800215 	stw	r6,8(sp)
     53c:	d9c00315 	stw	r7,12(sp)
     540:	280d883a 	mov	r6,r5
     544:	21400217 	ldw	r5,8(r4)
     548:	d8c00204 	addi	r3,sp,8
     54c:	180f883a 	mov	r7,r3
     550:	d8c00015 	stw	r3,0(sp)
     554:	00006380 	call	638 <___vfprintf_internal_r>
     558:	dfc00117 	ldw	ra,4(sp)
     55c:	dec00404 	addi	sp,sp,16
     560:	f800283a 	ret

00000564 <_scanf_r>:
     564:	defffc04 	addi	sp,sp,-16
     568:	dfc00115 	stw	ra,4(sp)
     56c:	d9800215 	stw	r6,8(sp)
     570:	d9c00315 	stw	r7,12(sp)
     574:	280d883a 	mov	r6,r5
     578:	21400117 	ldw	r5,4(r4)
     57c:	d8c00204 	addi	r3,sp,8
     580:	180f883a 	mov	r7,r3
     584:	d8c00015 	stw	r3,0(sp)
     588:	00025080 	call	2508 <__svfscanf_r>
     58c:	dfc00117 	ldw	ra,4(sp)
     590:	dec00404 	addi	sp,sp,16
     594:	f800283a 	ret

00000598 <scanf>:
     598:	defffb04 	addi	sp,sp,-20
     59c:	dfc00115 	stw	ra,4(sp)
     5a0:	d9400215 	stw	r5,8(sp)
     5a4:	d9800315 	stw	r6,12(sp)
     5a8:	d9c00415 	stw	r7,16(sp)
     5ac:	00800074 	movhi	r2,1
     5b0:	108e7f04 	addi	r2,r2,14844
     5b4:	11400017 	ldw	r5,0(r2)
     5b8:	200d883a 	mov	r6,r4
     5bc:	d8800204 	addi	r2,sp,8
     5c0:	2809883a 	mov	r4,r5
     5c4:	29400117 	ldw	r5,4(r5)
     5c8:	100f883a 	mov	r7,r2
     5cc:	d8800015 	stw	r2,0(sp)
     5d0:	00025080 	call	2508 <__svfscanf_r>
     5d4:	dfc00117 	ldw	ra,4(sp)
     5d8:	dec00504 	addi	sp,sp,20
     5dc:	f800283a 	ret

000005e0 <__sprint_r>:
     5e0:	30800217 	ldw	r2,8(r6)
     5e4:	defffe04 	addi	sp,sp,-8
     5e8:	dc000015 	stw	r16,0(sp)
     5ec:	dfc00115 	stw	ra,4(sp)
     5f0:	3021883a 	mov	r16,r6
     5f4:	0007883a 	mov	r3,zero
     5f8:	1000061e 	bne	r2,zero,614 <__sprint_r+0x34>
     5fc:	1805883a 	mov	r2,r3
     600:	30000115 	stw	zero,4(r6)
     604:	dfc00117 	ldw	ra,4(sp)
     608:	dc000017 	ldw	r16,0(sp)
     60c:	dec00204 	addi	sp,sp,8
     610:	f800283a 	ret
     614:	00060fc0 	call	60fc <__sfvwrite_r>
     618:	1007883a 	mov	r3,r2
     61c:	1805883a 	mov	r2,r3
     620:	80000115 	stw	zero,4(r16)
     624:	80000215 	stw	zero,8(r16)
     628:	dfc00117 	ldw	ra,4(sp)
     62c:	dc000017 	ldw	r16,0(sp)
     630:	dec00204 	addi	sp,sp,8
     634:	f800283a 	ret

00000638 <___vfprintf_internal_r>:
     638:	defea304 	addi	sp,sp,-1396
     63c:	dd815915 	stw	r22,1380(sp)
     640:	dc015315 	stw	r16,1356(sp)
     644:	d9c15215 	stw	r7,1352(sp)
     648:	dfc15c15 	stw	ra,1392(sp)
     64c:	df015b15 	stw	fp,1388(sp)
     650:	ddc15a15 	stw	r23,1384(sp)
     654:	dd415815 	stw	r21,1376(sp)
     658:	dd015715 	stw	r20,1372(sp)
     65c:	dcc15615 	stw	r19,1368(sp)
     660:	dc815515 	stw	r18,1364(sp)
     664:	dc415415 	stw	r17,1360(sp)
     668:	282d883a 	mov	r22,r5
     66c:	3021883a 	mov	r16,r6
     670:	d9015015 	stw	r4,1344(sp)
     674:	000674c0 	call	674c <_localeconv_r>
     678:	10800017 	ldw	r2,0(r2)
     67c:	d9c15217 	ldw	r7,1352(sp)
     680:	d8814a15 	stw	r2,1320(sp)
     684:	d8815017 	ldw	r2,1344(sp)
     688:	10000226 	beq	r2,zero,694 <___vfprintf_internal_r+0x5c>
     68c:	10800e17 	ldw	r2,56(r2)
     690:	10020d26 	beq	r2,zero,ec8 <___vfprintf_internal_r+0x890>
     694:	b080030b 	ldhu	r2,12(r22)
     698:	1080020c 	andi	r2,r2,8
     69c:	10020e26 	beq	r2,zero,ed8 <___vfprintf_internal_r+0x8a0>
     6a0:	b0800417 	ldw	r2,16(r22)
     6a4:	10020c26 	beq	r2,zero,ed8 <___vfprintf_internal_r+0x8a0>
     6a8:	b200030b 	ldhu	r8,12(r22)
     6ac:	00800284 	movi	r2,10
     6b0:	40c0068c 	andi	r3,r8,26
     6b4:	18802f1e 	bne	r3,r2,774 <___vfprintf_internal_r+0x13c>
     6b8:	b080038f 	ldh	r2,14(r22)
     6bc:	10002d16 	blt	r2,zero,774 <___vfprintf_internal_r+0x13c>
     6c0:	b240038b 	ldhu	r9,14(r22)
     6c4:	b2800717 	ldw	r10,28(r22)
     6c8:	b2c00917 	ldw	r11,36(r22)
     6cc:	d9015017 	ldw	r4,1344(sp)
     6d0:	dc402a04 	addi	r17,sp,168
     6d4:	d8804104 	addi	r2,sp,260
     6d8:	00c10004 	movi	r3,1024
     6dc:	423fff4c 	andi	r8,r8,65533
     6e0:	800d883a 	mov	r6,r16
     6e4:	880b883a 	mov	r5,r17
     6e8:	da002d0d 	sth	r8,180(sp)
     6ec:	da402d8d 	sth	r9,182(sp)
     6f0:	da803115 	stw	r10,196(sp)
     6f4:	dac03315 	stw	r11,204(sp)
     6f8:	d8802e15 	stw	r2,184(sp)
     6fc:	d8c02f15 	stw	r3,188(sp)
     700:	d8802a15 	stw	r2,168(sp)
     704:	d8c02c15 	stw	r3,176(sp)
     708:	d8003015 	stw	zero,192(sp)
     70c:	00006380 	call	638 <___vfprintf_internal_r>
     710:	d8814c15 	stw	r2,1328(sp)
     714:	10000416 	blt	r2,zero,728 <___vfprintf_internal_r+0xf0>
     718:	d9015017 	ldw	r4,1344(sp)
     71c:	880b883a 	mov	r5,r17
     720:	00055900 	call	5590 <_fflush_r>
     724:	1002321e 	bne	r2,zero,ff0 <___vfprintf_internal_r+0x9b8>
     728:	d8802d0b 	ldhu	r2,180(sp)
     72c:	1080100c 	andi	r2,r2,64
     730:	10000326 	beq	r2,zero,740 <___vfprintf_internal_r+0x108>
     734:	b080030b 	ldhu	r2,12(r22)
     738:	10801014 	ori	r2,r2,64
     73c:	b080030d 	sth	r2,12(r22)
     740:	d8814c17 	ldw	r2,1328(sp)
     744:	dfc15c17 	ldw	ra,1392(sp)
     748:	df015b17 	ldw	fp,1388(sp)
     74c:	ddc15a17 	ldw	r23,1384(sp)
     750:	dd815917 	ldw	r22,1380(sp)
     754:	dd415817 	ldw	r21,1376(sp)
     758:	dd015717 	ldw	r20,1372(sp)
     75c:	dcc15617 	ldw	r19,1368(sp)
     760:	dc815517 	ldw	r18,1364(sp)
     764:	dc415417 	ldw	r17,1360(sp)
     768:	dc015317 	ldw	r16,1356(sp)
     76c:	dec15d04 	addi	sp,sp,1396
     770:	f800283a 	ret
     774:	0005883a 	mov	r2,zero
     778:	0007883a 	mov	r3,zero
     77c:	dd401a04 	addi	r21,sp,104
     780:	d8814315 	stw	r2,1292(sp)
     784:	802f883a 	mov	r23,r16
     788:	d8c14415 	stw	r3,1296(sp)
     78c:	d8014c15 	stw	zero,1328(sp)
     790:	d8014915 	stw	zero,1316(sp)
     794:	d8014515 	stw	zero,1300(sp)
     798:	d8014815 	stw	zero,1312(sp)
     79c:	dd400d15 	stw	r21,52(sp)
     7a0:	d8000f15 	stw	zero,60(sp)
     7a4:	d8000e15 	stw	zero,56(sp)
     7a8:	b8800007 	ldb	r2,0(r23)
     7ac:	10001926 	beq	r2,zero,814 <___vfprintf_internal_r+0x1dc>
     7b0:	00c00944 	movi	r3,37
     7b4:	10c01726 	beq	r2,r3,814 <___vfprintf_internal_r+0x1dc>
     7b8:	b821883a 	mov	r16,r23
     7bc:	00000106 	br	7c4 <___vfprintf_internal_r+0x18c>
     7c0:	10c00326 	beq	r2,r3,7d0 <___vfprintf_internal_r+0x198>
     7c4:	84000044 	addi	r16,r16,1
     7c8:	80800007 	ldb	r2,0(r16)
     7cc:	103ffc1e 	bne	r2,zero,7c0 <___vfprintf_internal_r+0x188>
     7d0:	85e7c83a 	sub	r19,r16,r23
     7d4:	98000e26 	beq	r19,zero,810 <___vfprintf_internal_r+0x1d8>
     7d8:	dc800f17 	ldw	r18,60(sp)
     7dc:	dc400e17 	ldw	r17,56(sp)
     7e0:	008001c4 	movi	r2,7
     7e4:	94e5883a 	add	r18,r18,r19
     7e8:	8c400044 	addi	r17,r17,1
     7ec:	adc00015 	stw	r23,0(r21)
     7f0:	dc800f15 	stw	r18,60(sp)
     7f4:	acc00115 	stw	r19,4(r21)
     7f8:	dc400e15 	stw	r17,56(sp)
     7fc:	14428b16 	blt	r2,r17,122c <___vfprintf_internal_r+0xbf4>
     800:	ad400204 	addi	r21,r21,8
     804:	d9014c17 	ldw	r4,1328(sp)
     808:	24c9883a 	add	r4,r4,r19
     80c:	d9014c15 	stw	r4,1328(sp)
     810:	802f883a 	mov	r23,r16
     814:	b8800007 	ldb	r2,0(r23)
     818:	10013c26 	beq	r2,zero,d0c <___vfprintf_internal_r+0x6d4>
     81c:	bdc00044 	addi	r23,r23,1
     820:	d8000405 	stb	zero,16(sp)
     824:	b8c00007 	ldb	r3,0(r23)
     828:	04ffffc4 	movi	r19,-1
     82c:	d8014d15 	stw	zero,1332(sp)
     830:	d8014b15 	stw	zero,1324(sp)
     834:	d8c14e15 	stw	r3,1336(sp)
     838:	bdc00044 	addi	r23,r23,1
     83c:	d9414e17 	ldw	r5,1336(sp)
     840:	00801604 	movi	r2,88
     844:	28fff804 	addi	r3,r5,-32
     848:	10c06036 	bltu	r2,r3,9cc <___vfprintf_internal_r+0x394>
     84c:	18c5883a 	add	r2,r3,r3
     850:	1085883a 	add	r2,r2,r2
     854:	00c00034 	movhi	r3,0
     858:	18c21a04 	addi	r3,r3,2152
     85c:	10c5883a 	add	r2,r2,r3
     860:	11000017 	ldw	r4,0(r2)
     864:	2000683a 	jmp	r4
     868:	000017dc 	xori	zero,zero,95
     86c:	000009cc 	andi	zero,zero,39
     870:	000009cc 	andi	zero,zero,39
     874:	000017c8 	cmpgei	zero,zero,95
     878:	000009cc 	andi	zero,zero,39
     87c:	000009cc 	andi	zero,zero,39
     880:	000009cc 	andi	zero,zero,39
     884:	000009cc 	andi	zero,zero,39
     888:	000009cc 	andi	zero,zero,39
     88c:	000009cc 	andi	zero,zero,39
     890:	000015a8 	cmpgeui	zero,zero,86
     894:	000017b8 	rdprs	zero,zero,94
     898:	000009cc 	andi	zero,zero,39
     89c:	000015c0 	call	15c <alt_irq_handler+0x70>
     8a0:	00001854 	movui	zero,97
     8a4:	000009cc 	andi	zero,zero,39
     8a8:	00001840 	call	184 <_start+0x1c>
     8ac:	00001808 	cmpgei	zero,zero,96
     8b0:	00001808 	cmpgei	zero,zero,96
     8b4:	00001808 	cmpgei	zero,zero,96
     8b8:	00001808 	cmpgei	zero,zero,96
     8bc:	00001808 	cmpgei	zero,zero,96
     8c0:	00001808 	cmpgei	zero,zero,96
     8c4:	00001808 	cmpgei	zero,zero,96
     8c8:	00001808 	cmpgei	zero,zero,96
     8cc:	00001808 	cmpgei	zero,zero,96
     8d0:	000009cc 	andi	zero,zero,39
     8d4:	000009cc 	andi	zero,zero,39
     8d8:	000009cc 	andi	zero,zero,39
     8dc:	000009cc 	andi	zero,zero,39
     8e0:	000009cc 	andi	zero,zero,39
     8e4:	000009cc 	andi	zero,zero,39
     8e8:	000009cc 	andi	zero,zero,39
     8ec:	000009cc 	andi	zero,zero,39
     8f0:	000009cc 	andi	zero,zero,39
     8f4:	000009cc 	andi	zero,zero,39
     8f8:	00001024 	muli	zero,zero,64
     8fc:	00001690 	cmplti	zero,zero,90
     900:	000009cc 	andi	zero,zero,39
     904:	00001690 	cmplti	zero,zero,90
     908:	000009cc 	andi	zero,zero,39
     90c:	000009cc 	andi	zero,zero,39
     910:	000009cc 	andi	zero,zero,39
     914:	000009cc 	andi	zero,zero,39
     918:	000017f4 	movhi	zero,95
     91c:	000009cc 	andi	zero,zero,39
     920:	000009cc 	andi	zero,zero,39
     924:	000010d8 	cmpnei	zero,zero,67
     928:	000009cc 	andi	zero,zero,39
     92c:	000009cc 	andi	zero,zero,39
     930:	000009cc 	andi	zero,zero,39
     934:	000009cc 	andi	zero,zero,39
     938:	000009cc 	andi	zero,zero,39
     93c:	00001124 	muli	zero,zero,68
     940:	000009cc 	andi	zero,zero,39
     944:	000009cc 	andi	zero,zero,39
     948:	00001744 	movi	zero,93
     94c:	000009cc 	andi	zero,zero,39
     950:	000009cc 	andi	zero,zero,39
     954:	000009cc 	andi	zero,zero,39
     958:	000009cc 	andi	zero,zero,39
     95c:	000009cc 	andi	zero,zero,39
     960:	000009cc 	andi	zero,zero,39
     964:	000009cc 	andi	zero,zero,39
     968:	000009cc 	andi	zero,zero,39
     96c:	000009cc 	andi	zero,zero,39
     970:	000009cc 	andi	zero,zero,39
     974:	00001718 	cmpnei	zero,zero,92
     978:	00001030 	cmpltui	zero,zero,64
     97c:	00001690 	cmplti	zero,zero,90
     980:	00001690 	cmplti	zero,zero,90
     984:	00001690 	cmplti	zero,zero,90
     988:	0000167c 	xorhi	zero,zero,89
     98c:	00001030 	cmpltui	zero,zero,64
     990:	000009cc 	andi	zero,zero,39
     994:	000009cc 	andi	zero,zero,39
     998:	00001604 	movi	zero,88
     99c:	000009cc 	andi	zero,zero,39
     9a0:	000015d4 	movui	zero,87
     9a4:	000010e4 	muli	zero,zero,67
     9a8:	00001634 	movhi	zero,88
     9ac:	00001620 	cmpeqi	zero,zero,88
     9b0:	000009cc 	andi	zero,zero,39
     9b4:	000018b0 	cmpltui	zero,zero,98
     9b8:	000009cc 	andi	zero,zero,39
     9bc:	00001130 	cmpltui	zero,zero,68
     9c0:	000009cc 	andi	zero,zero,39
     9c4:	000009cc 	andi	zero,zero,39
     9c8:	000017a8 	cmpgeui	zero,zero,94
     9cc:	d9014e17 	ldw	r4,1336(sp)
     9d0:	2000ce26 	beq	r4,zero,d0c <___vfprintf_internal_r+0x6d4>
     9d4:	01400044 	movi	r5,1
     9d8:	d9801004 	addi	r6,sp,64
     9dc:	d9c14115 	stw	r7,1284(sp)
     9e0:	d9414615 	stw	r5,1304(sp)
     9e4:	d9814215 	stw	r6,1288(sp)
     9e8:	280f883a 	mov	r7,r5
     9ec:	d9001005 	stb	r4,64(sp)
     9f0:	d8000405 	stb	zero,16(sp)
     9f4:	d8014715 	stw	zero,1308(sp)
     9f8:	d8c14d17 	ldw	r3,1332(sp)
     9fc:	1880008c 	andi	r2,r3,2
     a00:	1005003a 	cmpeq	r2,r2,zero
     a04:	d8815115 	stw	r2,1348(sp)
     a08:	1000031e 	bne	r2,zero,a18 <___vfprintf_internal_r+0x3e0>
     a0c:	d9014617 	ldw	r4,1304(sp)
     a10:	21000084 	addi	r4,r4,2
     a14:	d9014615 	stw	r4,1304(sp)
     a18:	d9414d17 	ldw	r5,1332(sp)
     a1c:	2940210c 	andi	r5,r5,132
     a20:	d9414f15 	stw	r5,1340(sp)
     a24:	28002d1e 	bne	r5,zero,adc <___vfprintf_internal_r+0x4a4>
     a28:	d9814b17 	ldw	r6,1324(sp)
     a2c:	d8814617 	ldw	r2,1304(sp)
     a30:	30a1c83a 	sub	r16,r6,r2
     a34:	0400290e 	bge	zero,r16,adc <___vfprintf_internal_r+0x4a4>
     a38:	00800404 	movi	r2,16
     a3c:	1404580e 	bge	r2,r16,1ba0 <___vfprintf_internal_r+0x1568>
     a40:	dc800f17 	ldw	r18,60(sp)
     a44:	dc400e17 	ldw	r17,56(sp)
     a48:	1027883a 	mov	r19,r2
     a4c:	07000074 	movhi	fp,1
     a50:	e7063b04 	addi	fp,fp,6380
     a54:	050001c4 	movi	r20,7
     a58:	00000306 	br	a68 <___vfprintf_internal_r+0x430>
     a5c:	843ffc04 	addi	r16,r16,-16
     a60:	ad400204 	addi	r21,r21,8
     a64:	9c00130e 	bge	r19,r16,ab4 <___vfprintf_internal_r+0x47c>
     a68:	94800404 	addi	r18,r18,16
     a6c:	8c400044 	addi	r17,r17,1
     a70:	af000015 	stw	fp,0(r21)
     a74:	acc00115 	stw	r19,4(r21)
     a78:	dc800f15 	stw	r18,60(sp)
     a7c:	dc400e15 	stw	r17,56(sp)
     a80:	a47ff60e 	bge	r20,r17,a5c <___vfprintf_internal_r+0x424>
     a84:	d9015017 	ldw	r4,1344(sp)
     a88:	b00b883a 	mov	r5,r22
     a8c:	d9800d04 	addi	r6,sp,52
     a90:	d9c15215 	stw	r7,1352(sp)
     a94:	00005e00 	call	5e0 <__sprint_r>
     a98:	d9c15217 	ldw	r7,1352(sp)
     a9c:	10009e1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
     aa0:	843ffc04 	addi	r16,r16,-16
     aa4:	dc800f17 	ldw	r18,60(sp)
     aa8:	dc400e17 	ldw	r17,56(sp)
     aac:	dd401a04 	addi	r21,sp,104
     ab0:	9c3fed16 	blt	r19,r16,a68 <___vfprintf_internal_r+0x430>
     ab4:	9425883a 	add	r18,r18,r16
     ab8:	8c400044 	addi	r17,r17,1
     abc:	008001c4 	movi	r2,7
     ac0:	af000015 	stw	fp,0(r21)
     ac4:	ac000115 	stw	r16,4(r21)
     ac8:	dc800f15 	stw	r18,60(sp)
     acc:	dc400e15 	stw	r17,56(sp)
     ad0:	1441f516 	blt	r2,r17,12a8 <___vfprintf_internal_r+0xc70>
     ad4:	ad400204 	addi	r21,r21,8
     ad8:	00000206 	br	ae4 <___vfprintf_internal_r+0x4ac>
     adc:	dc800f17 	ldw	r18,60(sp)
     ae0:	dc400e17 	ldw	r17,56(sp)
     ae4:	d8800407 	ldb	r2,16(sp)
     ae8:	10000b26 	beq	r2,zero,b18 <___vfprintf_internal_r+0x4e0>
     aec:	00800044 	movi	r2,1
     af0:	94800044 	addi	r18,r18,1
     af4:	8c400044 	addi	r17,r17,1
     af8:	a8800115 	stw	r2,4(r21)
     afc:	d8c00404 	addi	r3,sp,16
     b00:	008001c4 	movi	r2,7
     b04:	a8c00015 	stw	r3,0(r21)
     b08:	dc800f15 	stw	r18,60(sp)
     b0c:	dc400e15 	stw	r17,56(sp)
     b10:	1441da16 	blt	r2,r17,127c <___vfprintf_internal_r+0xc44>
     b14:	ad400204 	addi	r21,r21,8
     b18:	d9015117 	ldw	r4,1348(sp)
     b1c:	20000b1e 	bne	r4,zero,b4c <___vfprintf_internal_r+0x514>
     b20:	d8800504 	addi	r2,sp,20
     b24:	94800084 	addi	r18,r18,2
     b28:	8c400044 	addi	r17,r17,1
     b2c:	a8800015 	stw	r2,0(r21)
     b30:	00c00084 	movi	r3,2
     b34:	008001c4 	movi	r2,7
     b38:	a8c00115 	stw	r3,4(r21)
     b3c:	dc800f15 	stw	r18,60(sp)
     b40:	dc400e15 	stw	r17,56(sp)
     b44:	1441c216 	blt	r2,r17,1250 <___vfprintf_internal_r+0xc18>
     b48:	ad400204 	addi	r21,r21,8
     b4c:	d9414f17 	ldw	r5,1340(sp)
     b50:	00802004 	movi	r2,128
     b54:	2880b126 	beq	r5,r2,e1c <___vfprintf_internal_r+0x7e4>
     b58:	d8c14717 	ldw	r3,1308(sp)
     b5c:	19e1c83a 	sub	r16,r3,r7
     b60:	0400260e 	bge	zero,r16,bfc <___vfprintf_internal_r+0x5c4>
     b64:	00800404 	movi	r2,16
     b68:	1403c90e 	bge	r2,r16,1a90 <___vfprintf_internal_r+0x1458>
     b6c:	1027883a 	mov	r19,r2
     b70:	07000074 	movhi	fp,1
     b74:	e7063704 	addi	fp,fp,6364
     b78:	050001c4 	movi	r20,7
     b7c:	00000306 	br	b8c <___vfprintf_internal_r+0x554>
     b80:	843ffc04 	addi	r16,r16,-16
     b84:	ad400204 	addi	r21,r21,8
     b88:	9c00130e 	bge	r19,r16,bd8 <___vfprintf_internal_r+0x5a0>
     b8c:	94800404 	addi	r18,r18,16
     b90:	8c400044 	addi	r17,r17,1
     b94:	af000015 	stw	fp,0(r21)
     b98:	acc00115 	stw	r19,4(r21)
     b9c:	dc800f15 	stw	r18,60(sp)
     ba0:	dc400e15 	stw	r17,56(sp)
     ba4:	a47ff60e 	bge	r20,r17,b80 <___vfprintf_internal_r+0x548>
     ba8:	d9015017 	ldw	r4,1344(sp)
     bac:	b00b883a 	mov	r5,r22
     bb0:	d9800d04 	addi	r6,sp,52
     bb4:	d9c15215 	stw	r7,1352(sp)
     bb8:	00005e00 	call	5e0 <__sprint_r>
     bbc:	d9c15217 	ldw	r7,1352(sp)
     bc0:	1000551e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
     bc4:	843ffc04 	addi	r16,r16,-16
     bc8:	dc800f17 	ldw	r18,60(sp)
     bcc:	dc400e17 	ldw	r17,56(sp)
     bd0:	dd401a04 	addi	r21,sp,104
     bd4:	9c3fed16 	blt	r19,r16,b8c <___vfprintf_internal_r+0x554>
     bd8:	9425883a 	add	r18,r18,r16
     bdc:	8c400044 	addi	r17,r17,1
     be0:	008001c4 	movi	r2,7
     be4:	af000015 	stw	fp,0(r21)
     be8:	ac000115 	stw	r16,4(r21)
     bec:	dc800f15 	stw	r18,60(sp)
     bf0:	dc400e15 	stw	r17,56(sp)
     bf4:	14418216 	blt	r2,r17,1200 <___vfprintf_internal_r+0xbc8>
     bf8:	ad400204 	addi	r21,r21,8
     bfc:	d9014d17 	ldw	r4,1332(sp)
     c00:	2080400c 	andi	r2,r4,256
     c04:	10004a1e 	bne	r2,zero,d30 <___vfprintf_internal_r+0x6f8>
     c08:	d9414217 	ldw	r5,1288(sp)
     c0c:	91e5883a 	add	r18,r18,r7
     c10:	8c400044 	addi	r17,r17,1
     c14:	008001c4 	movi	r2,7
     c18:	a9400015 	stw	r5,0(r21)
     c1c:	a9c00115 	stw	r7,4(r21)
     c20:	dc800f15 	stw	r18,60(sp)
     c24:	dc400e15 	stw	r17,56(sp)
     c28:	14416716 	blt	r2,r17,11c8 <___vfprintf_internal_r+0xb90>
     c2c:	a8c00204 	addi	r3,r21,8
     c30:	d9814d17 	ldw	r6,1332(sp)
     c34:	3080010c 	andi	r2,r6,4
     c38:	10002826 	beq	r2,zero,cdc <___vfprintf_internal_r+0x6a4>
     c3c:	d8814b17 	ldw	r2,1324(sp)
     c40:	d9014617 	ldw	r4,1304(sp)
     c44:	1121c83a 	sub	r16,r2,r4
     c48:	0400240e 	bge	zero,r16,cdc <___vfprintf_internal_r+0x6a4>
     c4c:	00800404 	movi	r2,16
     c50:	14044f0e 	bge	r2,r16,1d90 <___vfprintf_internal_r+0x1758>
     c54:	dc400e17 	ldw	r17,56(sp)
     c58:	1027883a 	mov	r19,r2
     c5c:	07000074 	movhi	fp,1
     c60:	e7063b04 	addi	fp,fp,6380
     c64:	050001c4 	movi	r20,7
     c68:	00000306 	br	c78 <___vfprintf_internal_r+0x640>
     c6c:	843ffc04 	addi	r16,r16,-16
     c70:	18c00204 	addi	r3,r3,8
     c74:	9c00110e 	bge	r19,r16,cbc <___vfprintf_internal_r+0x684>
     c78:	94800404 	addi	r18,r18,16
     c7c:	8c400044 	addi	r17,r17,1
     c80:	1f000015 	stw	fp,0(r3)
     c84:	1cc00115 	stw	r19,4(r3)
     c88:	dc800f15 	stw	r18,60(sp)
     c8c:	dc400e15 	stw	r17,56(sp)
     c90:	a47ff60e 	bge	r20,r17,c6c <___vfprintf_internal_r+0x634>
     c94:	d9015017 	ldw	r4,1344(sp)
     c98:	b00b883a 	mov	r5,r22
     c9c:	d9800d04 	addi	r6,sp,52
     ca0:	00005e00 	call	5e0 <__sprint_r>
     ca4:	10001c1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
     ca8:	843ffc04 	addi	r16,r16,-16
     cac:	dc800f17 	ldw	r18,60(sp)
     cb0:	dc400e17 	ldw	r17,56(sp)
     cb4:	d8c01a04 	addi	r3,sp,104
     cb8:	9c3fef16 	blt	r19,r16,c78 <___vfprintf_internal_r+0x640>
     cbc:	9425883a 	add	r18,r18,r16
     cc0:	8c400044 	addi	r17,r17,1
     cc4:	008001c4 	movi	r2,7
     cc8:	1f000015 	stw	fp,0(r3)
     ccc:	1c000115 	stw	r16,4(r3)
     cd0:	dc800f15 	stw	r18,60(sp)
     cd4:	dc400e15 	stw	r17,56(sp)
     cd8:	1440cb16 	blt	r2,r17,1008 <___vfprintf_internal_r+0x9d0>
     cdc:	d8814b17 	ldw	r2,1324(sp)
     ce0:	d9414617 	ldw	r5,1304(sp)
     ce4:	1140010e 	bge	r2,r5,cec <___vfprintf_internal_r+0x6b4>
     ce8:	2805883a 	mov	r2,r5
     cec:	d9814c17 	ldw	r6,1328(sp)
     cf0:	308d883a 	add	r6,r6,r2
     cf4:	d9814c15 	stw	r6,1328(sp)
     cf8:	90013b1e 	bne	r18,zero,11e8 <___vfprintf_internal_r+0xbb0>
     cfc:	d9c14117 	ldw	r7,1284(sp)
     d00:	dd401a04 	addi	r21,sp,104
     d04:	d8000e15 	stw	zero,56(sp)
     d08:	003ea706 	br	7a8 <___vfprintf_internal_r+0x170>
     d0c:	d8800f17 	ldw	r2,60(sp)
     d10:	10053f1e 	bne	r2,zero,2210 <___vfprintf_internal_r+0x1bd8>
     d14:	d8000e15 	stw	zero,56(sp)
     d18:	b080030b 	ldhu	r2,12(r22)
     d1c:	1080100c 	andi	r2,r2,64
     d20:	103e8726 	beq	r2,zero,740 <___vfprintf_internal_r+0x108>
     d24:	00bfffc4 	movi	r2,-1
     d28:	d8814c15 	stw	r2,1328(sp)
     d2c:	003e8406 	br	740 <___vfprintf_internal_r+0x108>
     d30:	d9814e17 	ldw	r6,1336(sp)
     d34:	00801944 	movi	r2,101
     d38:	11806e16 	blt	r2,r6,ef4 <___vfprintf_internal_r+0x8bc>
     d3c:	d9414817 	ldw	r5,1312(sp)
     d40:	00c00044 	movi	r3,1
     d44:	1943430e 	bge	r3,r5,1a54 <___vfprintf_internal_r+0x141c>
     d48:	d8814217 	ldw	r2,1288(sp)
     d4c:	94800044 	addi	r18,r18,1
     d50:	8c400044 	addi	r17,r17,1
     d54:	a8800015 	stw	r2,0(r21)
     d58:	008001c4 	movi	r2,7
     d5c:	a8c00115 	stw	r3,4(r21)
     d60:	dc800f15 	stw	r18,60(sp)
     d64:	dc400e15 	stw	r17,56(sp)
     d68:	1441ca16 	blt	r2,r17,1494 <___vfprintf_internal_r+0xe5c>
     d6c:	a8c00204 	addi	r3,r21,8
     d70:	d9014a17 	ldw	r4,1320(sp)
     d74:	00800044 	movi	r2,1
     d78:	94800044 	addi	r18,r18,1
     d7c:	8c400044 	addi	r17,r17,1
     d80:	18800115 	stw	r2,4(r3)
     d84:	008001c4 	movi	r2,7
     d88:	19000015 	stw	r4,0(r3)
     d8c:	dc800f15 	stw	r18,60(sp)
     d90:	dc400e15 	stw	r17,56(sp)
     d94:	1441b616 	blt	r2,r17,1470 <___vfprintf_internal_r+0xe38>
     d98:	1cc00204 	addi	r19,r3,8
     d9c:	d9014317 	ldw	r4,1292(sp)
     da0:	d9414417 	ldw	r5,1296(sp)
     da4:	000d883a 	mov	r6,zero
     da8:	000f883a 	mov	r7,zero
     dac:	000df500 	call	df50 <__nedf2>
     db0:	10017426 	beq	r2,zero,1384 <___vfprintf_internal_r+0xd4c>
     db4:	d9414817 	ldw	r5,1312(sp)
     db8:	d9814217 	ldw	r6,1288(sp)
     dbc:	8c400044 	addi	r17,r17,1
     dc0:	2c85883a 	add	r2,r5,r18
     dc4:	14bfffc4 	addi	r18,r2,-1
     dc8:	28bfffc4 	addi	r2,r5,-1
     dcc:	30c00044 	addi	r3,r6,1
     dd0:	98800115 	stw	r2,4(r19)
     dd4:	008001c4 	movi	r2,7
     dd8:	98c00015 	stw	r3,0(r19)
     ddc:	dc800f15 	stw	r18,60(sp)
     de0:	dc400e15 	stw	r17,56(sp)
     de4:	14418e16 	blt	r2,r17,1420 <___vfprintf_internal_r+0xde8>
     de8:	9cc00204 	addi	r19,r19,8
     dec:	d9414917 	ldw	r5,1316(sp)
     df0:	d8800904 	addi	r2,sp,36
     df4:	8c400044 	addi	r17,r17,1
     df8:	9165883a 	add	r18,r18,r5
     dfc:	98800015 	stw	r2,0(r19)
     e00:	008001c4 	movi	r2,7
     e04:	99400115 	stw	r5,4(r19)
     e08:	dc800f15 	stw	r18,60(sp)
     e0c:	dc400e15 	stw	r17,56(sp)
     e10:	1440ed16 	blt	r2,r17,11c8 <___vfprintf_internal_r+0xb90>
     e14:	98c00204 	addi	r3,r19,8
     e18:	003f8506 	br	c30 <___vfprintf_internal_r+0x5f8>
     e1c:	d9814b17 	ldw	r6,1324(sp)
     e20:	d8814617 	ldw	r2,1304(sp)
     e24:	30a1c83a 	sub	r16,r6,r2
     e28:	043f4b0e 	bge	zero,r16,b58 <___vfprintf_internal_r+0x520>
     e2c:	00800404 	movi	r2,16
     e30:	1404340e 	bge	r2,r16,1f04 <___vfprintf_internal_r+0x18cc>
     e34:	1027883a 	mov	r19,r2
     e38:	07000074 	movhi	fp,1
     e3c:	e7063704 	addi	fp,fp,6364
     e40:	050001c4 	movi	r20,7
     e44:	00000306 	br	e54 <___vfprintf_internal_r+0x81c>
     e48:	843ffc04 	addi	r16,r16,-16
     e4c:	ad400204 	addi	r21,r21,8
     e50:	9c00130e 	bge	r19,r16,ea0 <___vfprintf_internal_r+0x868>
     e54:	94800404 	addi	r18,r18,16
     e58:	8c400044 	addi	r17,r17,1
     e5c:	af000015 	stw	fp,0(r21)
     e60:	acc00115 	stw	r19,4(r21)
     e64:	dc800f15 	stw	r18,60(sp)
     e68:	dc400e15 	stw	r17,56(sp)
     e6c:	a47ff60e 	bge	r20,r17,e48 <___vfprintf_internal_r+0x810>
     e70:	d9015017 	ldw	r4,1344(sp)
     e74:	b00b883a 	mov	r5,r22
     e78:	d9800d04 	addi	r6,sp,52
     e7c:	d9c15215 	stw	r7,1352(sp)
     e80:	00005e00 	call	5e0 <__sprint_r>
     e84:	d9c15217 	ldw	r7,1352(sp)
     e88:	103fa31e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
     e8c:	843ffc04 	addi	r16,r16,-16
     e90:	dc800f17 	ldw	r18,60(sp)
     e94:	dc400e17 	ldw	r17,56(sp)
     e98:	dd401a04 	addi	r21,sp,104
     e9c:	9c3fed16 	blt	r19,r16,e54 <___vfprintf_internal_r+0x81c>
     ea0:	9425883a 	add	r18,r18,r16
     ea4:	8c400044 	addi	r17,r17,1
     ea8:	008001c4 	movi	r2,7
     eac:	af000015 	stw	fp,0(r21)
     eb0:	ac000115 	stw	r16,4(r21)
     eb4:	dc800f15 	stw	r18,60(sp)
     eb8:	dc400e15 	stw	r17,56(sp)
     ebc:	14416116 	blt	r2,r17,1444 <___vfprintf_internal_r+0xe0c>
     ec0:	ad400204 	addi	r21,r21,8
     ec4:	003f2406 	br	b58 <___vfprintf_internal_r+0x520>
     ec8:	d9015017 	ldw	r4,1344(sp)
     ecc:	00058280 	call	5828 <__sinit>
     ed0:	d9c15217 	ldw	r7,1352(sp)
     ed4:	003def06 	br	694 <___vfprintf_internal_r+0x5c>
     ed8:	d9015017 	ldw	r4,1344(sp)
     edc:	b00b883a 	mov	r5,r22
     ee0:	d9c15215 	stw	r7,1352(sp)
     ee4:	0003c880 	call	3c88 <__swsetup_r>
     ee8:	d9c15217 	ldw	r7,1352(sp)
     eec:	103dee26 	beq	r2,zero,6a8 <___vfprintf_internal_r+0x70>
     ef0:	003f8c06 	br	d24 <___vfprintf_internal_r+0x6ec>
     ef4:	d9014317 	ldw	r4,1292(sp)
     ef8:	d9414417 	ldw	r5,1296(sp)
     efc:	000d883a 	mov	r6,zero
     f00:	000f883a 	mov	r7,zero
     f04:	000dec80 	call	dec8 <__eqdf2>
     f08:	1000f21e 	bne	r2,zero,12d4 <___vfprintf_internal_r+0xc9c>
     f0c:	00800074 	movhi	r2,1
     f10:	10863604 	addi	r2,r2,6360
     f14:	94800044 	addi	r18,r18,1
     f18:	8c400044 	addi	r17,r17,1
     f1c:	a8800015 	stw	r2,0(r21)
     f20:	00c00044 	movi	r3,1
     f24:	008001c4 	movi	r2,7
     f28:	a8c00115 	stw	r3,4(r21)
     f2c:	dc800f15 	stw	r18,60(sp)
     f30:	dc400e15 	stw	r17,56(sp)
     f34:	1442fa16 	blt	r2,r17,1b20 <___vfprintf_internal_r+0x14e8>
     f38:	a8c00204 	addi	r3,r21,8
     f3c:	d8800617 	ldw	r2,24(sp)
     f40:	d9014817 	ldw	r4,1312(sp)
     f44:	11015c0e 	bge	r2,r4,14b8 <___vfprintf_internal_r+0xe80>
     f48:	dc400e17 	ldw	r17,56(sp)
     f4c:	d9814a17 	ldw	r6,1320(sp)
     f50:	00800044 	movi	r2,1
     f54:	94800044 	addi	r18,r18,1
     f58:	8c400044 	addi	r17,r17,1
     f5c:	18800115 	stw	r2,4(r3)
     f60:	008001c4 	movi	r2,7
     f64:	19800015 	stw	r6,0(r3)
     f68:	dc800f15 	stw	r18,60(sp)
     f6c:	dc400e15 	stw	r17,56(sp)
     f70:	14431016 	blt	r2,r17,1bb4 <___vfprintf_internal_r+0x157c>
     f74:	18c00204 	addi	r3,r3,8
     f78:	d8814817 	ldw	r2,1312(sp)
     f7c:	143fffc4 	addi	r16,r2,-1
     f80:	043f2b0e 	bge	zero,r16,c30 <___vfprintf_internal_r+0x5f8>
     f84:	00800404 	movi	r2,16
     f88:	1402a20e 	bge	r2,r16,1a14 <___vfprintf_internal_r+0x13dc>
     f8c:	dc400e17 	ldw	r17,56(sp)
     f90:	1027883a 	mov	r19,r2
     f94:	07000074 	movhi	fp,1
     f98:	e7063704 	addi	fp,fp,6364
     f9c:	050001c4 	movi	r20,7
     fa0:	00000306 	br	fb0 <___vfprintf_internal_r+0x978>
     fa4:	18c00204 	addi	r3,r3,8
     fa8:	843ffc04 	addi	r16,r16,-16
     fac:	9c029c0e 	bge	r19,r16,1a20 <___vfprintf_internal_r+0x13e8>
     fb0:	94800404 	addi	r18,r18,16
     fb4:	8c400044 	addi	r17,r17,1
     fb8:	1f000015 	stw	fp,0(r3)
     fbc:	1cc00115 	stw	r19,4(r3)
     fc0:	dc800f15 	stw	r18,60(sp)
     fc4:	dc400e15 	stw	r17,56(sp)
     fc8:	a47ff60e 	bge	r20,r17,fa4 <___vfprintf_internal_r+0x96c>
     fcc:	d9015017 	ldw	r4,1344(sp)
     fd0:	b00b883a 	mov	r5,r22
     fd4:	d9800d04 	addi	r6,sp,52
     fd8:	00005e00 	call	5e0 <__sprint_r>
     fdc:	103f4e1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
     fe0:	dc800f17 	ldw	r18,60(sp)
     fe4:	dc400e17 	ldw	r17,56(sp)
     fe8:	d8c01a04 	addi	r3,sp,104
     fec:	003fee06 	br	fa8 <___vfprintf_internal_r+0x970>
     ff0:	d8802d0b 	ldhu	r2,180(sp)
     ff4:	00ffffc4 	movi	r3,-1
     ff8:	d8c14c15 	stw	r3,1328(sp)
     ffc:	1080100c 	andi	r2,r2,64
    1000:	103dcc1e 	bne	r2,zero,734 <___vfprintf_internal_r+0xfc>
    1004:	003dce06 	br	740 <___vfprintf_internal_r+0x108>
    1008:	d9015017 	ldw	r4,1344(sp)
    100c:	b00b883a 	mov	r5,r22
    1010:	d9800d04 	addi	r6,sp,52
    1014:	00005e00 	call	5e0 <__sprint_r>
    1018:	103f3f1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    101c:	dc800f17 	ldw	r18,60(sp)
    1020:	003f2e06 	br	cdc <___vfprintf_internal_r+0x6a4>
    1024:	d9414d17 	ldw	r5,1332(sp)
    1028:	29400414 	ori	r5,r5,16
    102c:	d9414d15 	stw	r5,1332(sp)
    1030:	d9814d17 	ldw	r6,1332(sp)
    1034:	3080080c 	andi	r2,r6,32
    1038:	10014f1e 	bne	r2,zero,1578 <___vfprintf_internal_r+0xf40>
    103c:	d8c14d17 	ldw	r3,1332(sp)
    1040:	1880040c 	andi	r2,r3,16
    1044:	1002ea1e 	bne	r2,zero,1bf0 <___vfprintf_internal_r+0x15b8>
    1048:	d9014d17 	ldw	r4,1332(sp)
    104c:	2080100c 	andi	r2,r4,64
    1050:	1002e726 	beq	r2,zero,1bf0 <___vfprintf_internal_r+0x15b8>
    1054:	3880000f 	ldh	r2,0(r7)
    1058:	39c00104 	addi	r7,r7,4
    105c:	d9c14115 	stw	r7,1284(sp)
    1060:	1023d7fa 	srai	r17,r2,31
    1064:	1021883a 	mov	r16,r2
    1068:	88037216 	blt	r17,zero,1e34 <___vfprintf_internal_r+0x17fc>
    106c:	01000044 	movi	r4,1
    1070:	98000416 	blt	r19,zero,1084 <___vfprintf_internal_r+0xa4c>
    1074:	d8c14d17 	ldw	r3,1332(sp)
    1078:	00bfdfc4 	movi	r2,-129
    107c:	1886703a 	and	r3,r3,r2
    1080:	d8c14d15 	stw	r3,1332(sp)
    1084:	8444b03a 	or	r2,r16,r17
    1088:	1002261e 	bne	r2,zero,1924 <___vfprintf_internal_r+0x12ec>
    108c:	9802251e 	bne	r19,zero,1924 <___vfprintf_internal_r+0x12ec>
    1090:	20803fcc 	andi	r2,r4,255
    1094:	10029b26 	beq	r2,zero,1b04 <___vfprintf_internal_r+0x14cc>
    1098:	d8c01a04 	addi	r3,sp,104
    109c:	dd001004 	addi	r20,sp,64
    10a0:	d8c14215 	stw	r3,1288(sp)
    10a4:	d8c14217 	ldw	r3,1288(sp)
    10a8:	dcc14615 	stw	r19,1304(sp)
    10ac:	a0c5c83a 	sub	r2,r20,r3
    10b0:	11c00a04 	addi	r7,r2,40
    10b4:	99c0010e 	bge	r19,r7,10bc <___vfprintf_internal_r+0xa84>
    10b8:	d9c14615 	stw	r7,1304(sp)
    10bc:	dcc14715 	stw	r19,1308(sp)
    10c0:	d8800407 	ldb	r2,16(sp)
    10c4:	103e4c26 	beq	r2,zero,9f8 <___vfprintf_internal_r+0x3c0>
    10c8:	d8814617 	ldw	r2,1304(sp)
    10cc:	10800044 	addi	r2,r2,1
    10d0:	d8814615 	stw	r2,1304(sp)
    10d4:	003e4806 	br	9f8 <___vfprintf_internal_r+0x3c0>
    10d8:	d9814d17 	ldw	r6,1332(sp)
    10dc:	31800414 	ori	r6,r6,16
    10e0:	d9814d15 	stw	r6,1332(sp)
    10e4:	d8c14d17 	ldw	r3,1332(sp)
    10e8:	1880080c 	andi	r2,r3,32
    10ec:	1001271e 	bne	r2,zero,158c <___vfprintf_internal_r+0xf54>
    10f0:	d9414d17 	ldw	r5,1332(sp)
    10f4:	2880040c 	andi	r2,r5,16
    10f8:	1002b61e 	bne	r2,zero,1bd4 <___vfprintf_internal_r+0x159c>
    10fc:	d9814d17 	ldw	r6,1332(sp)
    1100:	3080100c 	andi	r2,r6,64
    1104:	1002b326 	beq	r2,zero,1bd4 <___vfprintf_internal_r+0x159c>
    1108:	3c00000b 	ldhu	r16,0(r7)
    110c:	0009883a 	mov	r4,zero
    1110:	39c00104 	addi	r7,r7,4
    1114:	0023883a 	mov	r17,zero
    1118:	d9c14115 	stw	r7,1284(sp)
    111c:	d8000405 	stb	zero,16(sp)
    1120:	003fd306 	br	1070 <___vfprintf_internal_r+0xa38>
    1124:	d9014d17 	ldw	r4,1332(sp)
    1128:	21000414 	ori	r4,r4,16
    112c:	d9014d15 	stw	r4,1332(sp)
    1130:	d9414d17 	ldw	r5,1332(sp)
    1134:	2880080c 	andi	r2,r5,32
    1138:	1001081e 	bne	r2,zero,155c <___vfprintf_internal_r+0xf24>
    113c:	d8c14d17 	ldw	r3,1332(sp)
    1140:	1880040c 	andi	r2,r3,16
    1144:	1002b01e 	bne	r2,zero,1c08 <___vfprintf_internal_r+0x15d0>
    1148:	d9014d17 	ldw	r4,1332(sp)
    114c:	2080100c 	andi	r2,r4,64
    1150:	1002ad26 	beq	r2,zero,1c08 <___vfprintf_internal_r+0x15d0>
    1154:	3c00000b 	ldhu	r16,0(r7)
    1158:	01000044 	movi	r4,1
    115c:	39c00104 	addi	r7,r7,4
    1160:	0023883a 	mov	r17,zero
    1164:	d9c14115 	stw	r7,1284(sp)
    1168:	d8000405 	stb	zero,16(sp)
    116c:	003fc006 	br	1070 <___vfprintf_internal_r+0xa38>
    1170:	d9015017 	ldw	r4,1344(sp)
    1174:	b00b883a 	mov	r5,r22
    1178:	d9800d04 	addi	r6,sp,52
    117c:	00005e00 	call	5e0 <__sprint_r>
    1180:	103ee51e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1184:	dc800f17 	ldw	r18,60(sp)
    1188:	d8c01a04 	addi	r3,sp,104
    118c:	d9814d17 	ldw	r6,1332(sp)
    1190:	3080004c 	andi	r2,r6,1
    1194:	1005003a 	cmpeq	r2,r2,zero
    1198:	103ea51e 	bne	r2,zero,c30 <___vfprintf_internal_r+0x5f8>
    119c:	00800044 	movi	r2,1
    11a0:	dc400e17 	ldw	r17,56(sp)
    11a4:	18800115 	stw	r2,4(r3)
    11a8:	d8814a17 	ldw	r2,1320(sp)
    11ac:	94800044 	addi	r18,r18,1
    11b0:	8c400044 	addi	r17,r17,1
    11b4:	18800015 	stw	r2,0(r3)
    11b8:	008001c4 	movi	r2,7
    11bc:	dc800f15 	stw	r18,60(sp)
    11c0:	dc400e15 	stw	r17,56(sp)
    11c4:	14421e0e 	bge	r2,r17,1a40 <___vfprintf_internal_r+0x1408>
    11c8:	d9015017 	ldw	r4,1344(sp)
    11cc:	b00b883a 	mov	r5,r22
    11d0:	d9800d04 	addi	r6,sp,52
    11d4:	00005e00 	call	5e0 <__sprint_r>
    11d8:	103ecf1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    11dc:	dc800f17 	ldw	r18,60(sp)
    11e0:	d8c01a04 	addi	r3,sp,104
    11e4:	003e9206 	br	c30 <___vfprintf_internal_r+0x5f8>
    11e8:	d9015017 	ldw	r4,1344(sp)
    11ec:	b00b883a 	mov	r5,r22
    11f0:	d9800d04 	addi	r6,sp,52
    11f4:	00005e00 	call	5e0 <__sprint_r>
    11f8:	103ec026 	beq	r2,zero,cfc <___vfprintf_internal_r+0x6c4>
    11fc:	003ec606 	br	d18 <___vfprintf_internal_r+0x6e0>
    1200:	d9015017 	ldw	r4,1344(sp)
    1204:	b00b883a 	mov	r5,r22
    1208:	d9800d04 	addi	r6,sp,52
    120c:	d9c15215 	stw	r7,1352(sp)
    1210:	00005e00 	call	5e0 <__sprint_r>
    1214:	d9c15217 	ldw	r7,1352(sp)
    1218:	103ebf1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    121c:	dc800f17 	ldw	r18,60(sp)
    1220:	dc400e17 	ldw	r17,56(sp)
    1224:	dd401a04 	addi	r21,sp,104
    1228:	003e7406 	br	bfc <___vfprintf_internal_r+0x5c4>
    122c:	d9015017 	ldw	r4,1344(sp)
    1230:	b00b883a 	mov	r5,r22
    1234:	d9800d04 	addi	r6,sp,52
    1238:	d9c15215 	stw	r7,1352(sp)
    123c:	00005e00 	call	5e0 <__sprint_r>
    1240:	d9c15217 	ldw	r7,1352(sp)
    1244:	103eb41e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1248:	dd401a04 	addi	r21,sp,104
    124c:	003d6d06 	br	804 <___vfprintf_internal_r+0x1cc>
    1250:	d9015017 	ldw	r4,1344(sp)
    1254:	b00b883a 	mov	r5,r22
    1258:	d9800d04 	addi	r6,sp,52
    125c:	d9c15215 	stw	r7,1352(sp)
    1260:	00005e00 	call	5e0 <__sprint_r>
    1264:	d9c15217 	ldw	r7,1352(sp)
    1268:	103eab1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    126c:	dc800f17 	ldw	r18,60(sp)
    1270:	dc400e17 	ldw	r17,56(sp)
    1274:	dd401a04 	addi	r21,sp,104
    1278:	003e3406 	br	b4c <___vfprintf_internal_r+0x514>
    127c:	d9015017 	ldw	r4,1344(sp)
    1280:	b00b883a 	mov	r5,r22
    1284:	d9800d04 	addi	r6,sp,52
    1288:	d9c15215 	stw	r7,1352(sp)
    128c:	00005e00 	call	5e0 <__sprint_r>
    1290:	d9c15217 	ldw	r7,1352(sp)
    1294:	103ea01e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1298:	dc800f17 	ldw	r18,60(sp)
    129c:	dc400e17 	ldw	r17,56(sp)
    12a0:	dd401a04 	addi	r21,sp,104
    12a4:	003e1c06 	br	b18 <___vfprintf_internal_r+0x4e0>
    12a8:	d9015017 	ldw	r4,1344(sp)
    12ac:	b00b883a 	mov	r5,r22
    12b0:	d9800d04 	addi	r6,sp,52
    12b4:	d9c15215 	stw	r7,1352(sp)
    12b8:	00005e00 	call	5e0 <__sprint_r>
    12bc:	d9c15217 	ldw	r7,1352(sp)
    12c0:	103e951e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    12c4:	dc800f17 	ldw	r18,60(sp)
    12c8:	dc400e17 	ldw	r17,56(sp)
    12cc:	dd401a04 	addi	r21,sp,104
    12d0:	003e0406 	br	ae4 <___vfprintf_internal_r+0x4ac>
    12d4:	d9000617 	ldw	r4,24(sp)
    12d8:	0102520e 	bge	zero,r4,1c24 <___vfprintf_internal_r+0x15ec>
    12dc:	d9814817 	ldw	r6,1312(sp)
    12e0:	21807a16 	blt	r4,r6,14cc <___vfprintf_internal_r+0xe94>
    12e4:	d8814217 	ldw	r2,1288(sp)
    12e8:	91a5883a 	add	r18,r18,r6
    12ec:	8c400044 	addi	r17,r17,1
    12f0:	a8800015 	stw	r2,0(r21)
    12f4:	008001c4 	movi	r2,7
    12f8:	a9800115 	stw	r6,4(r21)
    12fc:	dc800f15 	stw	r18,60(sp)
    1300:	dc400e15 	stw	r17,56(sp)
    1304:	1442f616 	blt	r2,r17,1ee0 <___vfprintf_internal_r+0x18a8>
    1308:	a8c00204 	addi	r3,r21,8
    130c:	d9414817 	ldw	r5,1312(sp)
    1310:	2161c83a 	sub	r16,r4,r5
    1314:	043f9d0e 	bge	zero,r16,118c <___vfprintf_internal_r+0xb54>
    1318:	00800404 	movi	r2,16
    131c:	1402130e 	bge	r2,r16,1b6c <___vfprintf_internal_r+0x1534>
    1320:	dc400e17 	ldw	r17,56(sp)
    1324:	1027883a 	mov	r19,r2
    1328:	07000074 	movhi	fp,1
    132c:	e7063704 	addi	fp,fp,6364
    1330:	050001c4 	movi	r20,7
    1334:	00000306 	br	1344 <___vfprintf_internal_r+0xd0c>
    1338:	18c00204 	addi	r3,r3,8
    133c:	843ffc04 	addi	r16,r16,-16
    1340:	9c020d0e 	bge	r19,r16,1b78 <___vfprintf_internal_r+0x1540>
    1344:	94800404 	addi	r18,r18,16
    1348:	8c400044 	addi	r17,r17,1
    134c:	1f000015 	stw	fp,0(r3)
    1350:	1cc00115 	stw	r19,4(r3)
    1354:	dc800f15 	stw	r18,60(sp)
    1358:	dc400e15 	stw	r17,56(sp)
    135c:	a47ff60e 	bge	r20,r17,1338 <___vfprintf_internal_r+0xd00>
    1360:	d9015017 	ldw	r4,1344(sp)
    1364:	b00b883a 	mov	r5,r22
    1368:	d9800d04 	addi	r6,sp,52
    136c:	00005e00 	call	5e0 <__sprint_r>
    1370:	103e691e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1374:	dc800f17 	ldw	r18,60(sp)
    1378:	dc400e17 	ldw	r17,56(sp)
    137c:	d8c01a04 	addi	r3,sp,104
    1380:	003fee06 	br	133c <___vfprintf_internal_r+0xd04>
    1384:	d8814817 	ldw	r2,1312(sp)
    1388:	143fffc4 	addi	r16,r2,-1
    138c:	043e970e 	bge	zero,r16,dec <___vfprintf_internal_r+0x7b4>
    1390:	00800404 	movi	r2,16
    1394:	1400180e 	bge	r2,r16,13f8 <___vfprintf_internal_r+0xdc0>
    1398:	1029883a 	mov	r20,r2
    139c:	07000074 	movhi	fp,1
    13a0:	e7063704 	addi	fp,fp,6364
    13a4:	054001c4 	movi	r21,7
    13a8:	00000306 	br	13b8 <___vfprintf_internal_r+0xd80>
    13ac:	9cc00204 	addi	r19,r19,8
    13b0:	843ffc04 	addi	r16,r16,-16
    13b4:	a400120e 	bge	r20,r16,1400 <___vfprintf_internal_r+0xdc8>
    13b8:	94800404 	addi	r18,r18,16
    13bc:	8c400044 	addi	r17,r17,1
    13c0:	9f000015 	stw	fp,0(r19)
    13c4:	9d000115 	stw	r20,4(r19)
    13c8:	dc800f15 	stw	r18,60(sp)
    13cc:	dc400e15 	stw	r17,56(sp)
    13d0:	ac7ff60e 	bge	r21,r17,13ac <___vfprintf_internal_r+0xd74>
    13d4:	d9015017 	ldw	r4,1344(sp)
    13d8:	b00b883a 	mov	r5,r22
    13dc:	d9800d04 	addi	r6,sp,52
    13e0:	00005e00 	call	5e0 <__sprint_r>
    13e4:	103e4c1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    13e8:	dc800f17 	ldw	r18,60(sp)
    13ec:	dc400e17 	ldw	r17,56(sp)
    13f0:	dcc01a04 	addi	r19,sp,104
    13f4:	003fee06 	br	13b0 <___vfprintf_internal_r+0xd78>
    13f8:	07000074 	movhi	fp,1
    13fc:	e7063704 	addi	fp,fp,6364
    1400:	9425883a 	add	r18,r18,r16
    1404:	8c400044 	addi	r17,r17,1
    1408:	008001c4 	movi	r2,7
    140c:	9f000015 	stw	fp,0(r19)
    1410:	9c000115 	stw	r16,4(r19)
    1414:	dc800f15 	stw	r18,60(sp)
    1418:	dc400e15 	stw	r17,56(sp)
    141c:	147e720e 	bge	r2,r17,de8 <___vfprintf_internal_r+0x7b0>
    1420:	d9015017 	ldw	r4,1344(sp)
    1424:	b00b883a 	mov	r5,r22
    1428:	d9800d04 	addi	r6,sp,52
    142c:	00005e00 	call	5e0 <__sprint_r>
    1430:	103e391e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1434:	dc800f17 	ldw	r18,60(sp)
    1438:	dc400e17 	ldw	r17,56(sp)
    143c:	dcc01a04 	addi	r19,sp,104
    1440:	003e6a06 	br	dec <___vfprintf_internal_r+0x7b4>
    1444:	d9015017 	ldw	r4,1344(sp)
    1448:	b00b883a 	mov	r5,r22
    144c:	d9800d04 	addi	r6,sp,52
    1450:	d9c15215 	stw	r7,1352(sp)
    1454:	00005e00 	call	5e0 <__sprint_r>
    1458:	d9c15217 	ldw	r7,1352(sp)
    145c:	103e2e1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1460:	dc800f17 	ldw	r18,60(sp)
    1464:	dc400e17 	ldw	r17,56(sp)
    1468:	dd401a04 	addi	r21,sp,104
    146c:	003dba06 	br	b58 <___vfprintf_internal_r+0x520>
    1470:	d9015017 	ldw	r4,1344(sp)
    1474:	b00b883a 	mov	r5,r22
    1478:	d9800d04 	addi	r6,sp,52
    147c:	00005e00 	call	5e0 <__sprint_r>
    1480:	103e251e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1484:	dc800f17 	ldw	r18,60(sp)
    1488:	dc400e17 	ldw	r17,56(sp)
    148c:	dcc01a04 	addi	r19,sp,104
    1490:	003e4206 	br	d9c <___vfprintf_internal_r+0x764>
    1494:	d9015017 	ldw	r4,1344(sp)
    1498:	b00b883a 	mov	r5,r22
    149c:	d9800d04 	addi	r6,sp,52
    14a0:	00005e00 	call	5e0 <__sprint_r>
    14a4:	103e1c1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    14a8:	dc800f17 	ldw	r18,60(sp)
    14ac:	dc400e17 	ldw	r17,56(sp)
    14b0:	d8c01a04 	addi	r3,sp,104
    14b4:	003e2e06 	br	d70 <___vfprintf_internal_r+0x738>
    14b8:	d9414d17 	ldw	r5,1332(sp)
    14bc:	2880004c 	andi	r2,r5,1
    14c0:	1005003a 	cmpeq	r2,r2,zero
    14c4:	103dda1e 	bne	r2,zero,c30 <___vfprintf_internal_r+0x5f8>
    14c8:	003e9f06 	br	f48 <___vfprintf_internal_r+0x910>
    14cc:	d8c14217 	ldw	r3,1288(sp)
    14d0:	9125883a 	add	r18,r18,r4
    14d4:	8c400044 	addi	r17,r17,1
    14d8:	008001c4 	movi	r2,7
    14dc:	a8c00015 	stw	r3,0(r21)
    14e0:	a9000115 	stw	r4,4(r21)
    14e4:	dc800f15 	stw	r18,60(sp)
    14e8:	dc400e15 	stw	r17,56(sp)
    14ec:	14426616 	blt	r2,r17,1e88 <___vfprintf_internal_r+0x1850>
    14f0:	a8c00204 	addi	r3,r21,8
    14f4:	d9414a17 	ldw	r5,1320(sp)
    14f8:	00800044 	movi	r2,1
    14fc:	94800044 	addi	r18,r18,1
    1500:	8c400044 	addi	r17,r17,1
    1504:	18800115 	stw	r2,4(r3)
    1508:	008001c4 	movi	r2,7
    150c:	19400015 	stw	r5,0(r3)
    1510:	dc800f15 	stw	r18,60(sp)
    1514:	dc400e15 	stw	r17,56(sp)
    1518:	2021883a 	mov	r16,r4
    151c:	14425016 	blt	r2,r17,1e60 <___vfprintf_internal_r+0x1828>
    1520:	19400204 	addi	r5,r3,8
    1524:	d9814817 	ldw	r6,1312(sp)
    1528:	8c400044 	addi	r17,r17,1
    152c:	dc400e15 	stw	r17,56(sp)
    1530:	3107c83a 	sub	r3,r6,r4
    1534:	d9014217 	ldw	r4,1288(sp)
    1538:	90e5883a 	add	r18,r18,r3
    153c:	28c00115 	stw	r3,4(r5)
    1540:	8105883a 	add	r2,r16,r4
    1544:	28800015 	stw	r2,0(r5)
    1548:	008001c4 	movi	r2,7
    154c:	dc800f15 	stw	r18,60(sp)
    1550:	147f1d16 	blt	r2,r17,11c8 <___vfprintf_internal_r+0xb90>
    1554:	28c00204 	addi	r3,r5,8
    1558:	003db506 	br	c30 <___vfprintf_internal_r+0x5f8>
    155c:	3c000017 	ldw	r16,0(r7)
    1560:	3c400117 	ldw	r17,4(r7)
    1564:	39800204 	addi	r6,r7,8
    1568:	01000044 	movi	r4,1
    156c:	d9814115 	stw	r6,1284(sp)
    1570:	d8000405 	stb	zero,16(sp)
    1574:	003ebe06 	br	1070 <___vfprintf_internal_r+0xa38>
    1578:	3c000017 	ldw	r16,0(r7)
    157c:	3c400117 	ldw	r17,4(r7)
    1580:	38800204 	addi	r2,r7,8
    1584:	d8814115 	stw	r2,1284(sp)
    1588:	003eb706 	br	1068 <___vfprintf_internal_r+0xa30>
    158c:	3c000017 	ldw	r16,0(r7)
    1590:	3c400117 	ldw	r17,4(r7)
    1594:	39000204 	addi	r4,r7,8
    1598:	d9014115 	stw	r4,1284(sp)
    159c:	0009883a 	mov	r4,zero
    15a0:	d8000405 	stb	zero,16(sp)
    15a4:	003eb206 	br	1070 <___vfprintf_internal_r+0xa38>
    15a8:	38c00017 	ldw	r3,0(r7)
    15ac:	39c00104 	addi	r7,r7,4
    15b0:	d8c14b15 	stw	r3,1324(sp)
    15b4:	1800d10e 	bge	r3,zero,18fc <___vfprintf_internal_r+0x12c4>
    15b8:	00c7c83a 	sub	r3,zero,r3
    15bc:	d8c14b15 	stw	r3,1324(sp)
    15c0:	d9014d17 	ldw	r4,1332(sp)
    15c4:	b8c00007 	ldb	r3,0(r23)
    15c8:	21000114 	ori	r4,r4,4
    15cc:	d9014d15 	stw	r4,1332(sp)
    15d0:	003c9806 	br	834 <___vfprintf_internal_r+0x1fc>
    15d4:	d9814d17 	ldw	r6,1332(sp)
    15d8:	3080080c 	andi	r2,r6,32
    15dc:	1001f026 	beq	r2,zero,1da0 <___vfprintf_internal_r+0x1768>
    15e0:	d9014c17 	ldw	r4,1328(sp)
    15e4:	38800017 	ldw	r2,0(r7)
    15e8:	39c00104 	addi	r7,r7,4
    15ec:	d9c14115 	stw	r7,1284(sp)
    15f0:	2007d7fa 	srai	r3,r4,31
    15f4:	d9c14117 	ldw	r7,1284(sp)
    15f8:	11000015 	stw	r4,0(r2)
    15fc:	10c00115 	stw	r3,4(r2)
    1600:	003c6906 	br	7a8 <___vfprintf_internal_r+0x170>
    1604:	b8c00007 	ldb	r3,0(r23)
    1608:	00801b04 	movi	r2,108
    160c:	18824f26 	beq	r3,r2,1f4c <___vfprintf_internal_r+0x1914>
    1610:	d9414d17 	ldw	r5,1332(sp)
    1614:	29400414 	ori	r5,r5,16
    1618:	d9414d15 	stw	r5,1332(sp)
    161c:	003c8506 	br	834 <___vfprintf_internal_r+0x1fc>
    1620:	d9814d17 	ldw	r6,1332(sp)
    1624:	b8c00007 	ldb	r3,0(r23)
    1628:	31800814 	ori	r6,r6,32
    162c:	d9814d15 	stw	r6,1332(sp)
    1630:	003c8006 	br	834 <___vfprintf_internal_r+0x1fc>
    1634:	d8814d17 	ldw	r2,1332(sp)
    1638:	3c000017 	ldw	r16,0(r7)
    163c:	00c01e04 	movi	r3,120
    1640:	10800094 	ori	r2,r2,2
    1644:	d8814d15 	stw	r2,1332(sp)
    1648:	39c00104 	addi	r7,r7,4
    164c:	01400074 	movhi	r5,1
    1650:	29461f04 	addi	r5,r5,6268
    1654:	00800c04 	movi	r2,48
    1658:	0023883a 	mov	r17,zero
    165c:	01000084 	movi	r4,2
    1660:	d9c14115 	stw	r7,1284(sp)
    1664:	d8c14e15 	stw	r3,1336(sp)
    1668:	d9414515 	stw	r5,1300(sp)
    166c:	d8800505 	stb	r2,20(sp)
    1670:	d8c00545 	stb	r3,21(sp)
    1674:	d8000405 	stb	zero,16(sp)
    1678:	003e7d06 	br	1070 <___vfprintf_internal_r+0xa38>
    167c:	d8814d17 	ldw	r2,1332(sp)
    1680:	b8c00007 	ldb	r3,0(r23)
    1684:	10801014 	ori	r2,r2,64
    1688:	d8814d15 	stw	r2,1332(sp)
    168c:	003c6906 	br	834 <___vfprintf_internal_r+0x1fc>
    1690:	d9414d17 	ldw	r5,1332(sp)
    1694:	2880020c 	andi	r2,r5,8
    1698:	1001df26 	beq	r2,zero,1e18 <___vfprintf_internal_r+0x17e0>
    169c:	39800017 	ldw	r6,0(r7)
    16a0:	38800204 	addi	r2,r7,8
    16a4:	d8814115 	stw	r2,1284(sp)
    16a8:	d9814315 	stw	r6,1292(sp)
    16ac:	39c00117 	ldw	r7,4(r7)
    16b0:	d9c14415 	stw	r7,1296(sp)
    16b4:	d9014317 	ldw	r4,1292(sp)
    16b8:	d9414417 	ldw	r5,1296(sp)
    16bc:	0008ca00 	call	8ca0 <__isinfd>
    16c0:	10021726 	beq	r2,zero,1f20 <___vfprintf_internal_r+0x18e8>
    16c4:	d9014317 	ldw	r4,1292(sp)
    16c8:	d9414417 	ldw	r5,1296(sp)
    16cc:	000d883a 	mov	r6,zero
    16d0:	000f883a 	mov	r7,zero
    16d4:	000e0e80 	call	e0e8 <__ltdf2>
    16d8:	1002ca16 	blt	r2,zero,2204 <___vfprintf_internal_r+0x1bcc>
    16dc:	d9414e17 	ldw	r5,1336(sp)
    16e0:	008011c4 	movi	r2,71
    16e4:	11420a16 	blt	r2,r5,1f10 <___vfprintf_internal_r+0x18d8>
    16e8:	01800074 	movhi	r6,1
    16ec:	31862404 	addi	r6,r6,6288
    16f0:	d9814215 	stw	r6,1288(sp)
    16f4:	d9014d17 	ldw	r4,1332(sp)
    16f8:	00c000c4 	movi	r3,3
    16fc:	00bfdfc4 	movi	r2,-129
    1700:	2088703a 	and	r4,r4,r2
    1704:	180f883a 	mov	r7,r3
    1708:	d8c14615 	stw	r3,1304(sp)
    170c:	d9014d15 	stw	r4,1332(sp)
    1710:	d8014715 	stw	zero,1308(sp)
    1714:	003e6a06 	br	10c0 <___vfprintf_internal_r+0xa88>
    1718:	38800017 	ldw	r2,0(r7)
    171c:	00c00044 	movi	r3,1
    1720:	39c00104 	addi	r7,r7,4
    1724:	d9c14115 	stw	r7,1284(sp)
    1728:	d9001004 	addi	r4,sp,64
    172c:	180f883a 	mov	r7,r3
    1730:	d8c14615 	stw	r3,1304(sp)
    1734:	d9014215 	stw	r4,1288(sp)
    1738:	d8801005 	stb	r2,64(sp)
    173c:	d8000405 	stb	zero,16(sp)
    1740:	003cac06 	br	9f4 <___vfprintf_internal_r+0x3bc>
    1744:	01400074 	movhi	r5,1
    1748:	29462a04 	addi	r5,r5,6312
    174c:	d9414515 	stw	r5,1300(sp)
    1750:	d9814d17 	ldw	r6,1332(sp)
    1754:	3080080c 	andi	r2,r6,32
    1758:	1000f926 	beq	r2,zero,1b40 <___vfprintf_internal_r+0x1508>
    175c:	3c000017 	ldw	r16,0(r7)
    1760:	3c400117 	ldw	r17,4(r7)
    1764:	38800204 	addi	r2,r7,8
    1768:	d8814115 	stw	r2,1284(sp)
    176c:	d9414d17 	ldw	r5,1332(sp)
    1770:	2880004c 	andi	r2,r5,1
    1774:	1005003a 	cmpeq	r2,r2,zero
    1778:	1000b31e 	bne	r2,zero,1a48 <___vfprintf_internal_r+0x1410>
    177c:	8444b03a 	or	r2,r16,r17
    1780:	1000b126 	beq	r2,zero,1a48 <___vfprintf_internal_r+0x1410>
    1784:	d9814e17 	ldw	r6,1336(sp)
    1788:	29400094 	ori	r5,r5,2
    178c:	00800c04 	movi	r2,48
    1790:	01000084 	movi	r4,2
    1794:	d9414d15 	stw	r5,1332(sp)
    1798:	d8800505 	stb	r2,20(sp)
    179c:	d9800545 	stb	r6,21(sp)
    17a0:	d8000405 	stb	zero,16(sp)
    17a4:	003e3206 	br	1070 <___vfprintf_internal_r+0xa38>
    17a8:	01800074 	movhi	r6,1
    17ac:	31861f04 	addi	r6,r6,6268
    17b0:	d9814515 	stw	r6,1300(sp)
    17b4:	003fe606 	br	1750 <___vfprintf_internal_r+0x1118>
    17b8:	00800ac4 	movi	r2,43
    17bc:	d8800405 	stb	r2,16(sp)
    17c0:	b8c00007 	ldb	r3,0(r23)
    17c4:	003c1b06 	br	834 <___vfprintf_internal_r+0x1fc>
    17c8:	d8814d17 	ldw	r2,1332(sp)
    17cc:	b8c00007 	ldb	r3,0(r23)
    17d0:	10800054 	ori	r2,r2,1
    17d4:	d8814d15 	stw	r2,1332(sp)
    17d8:	003c1606 	br	834 <___vfprintf_internal_r+0x1fc>
    17dc:	d8800407 	ldb	r2,16(sp)
    17e0:	1000461e 	bne	r2,zero,18fc <___vfprintf_internal_r+0x12c4>
    17e4:	00800804 	movi	r2,32
    17e8:	d8800405 	stb	r2,16(sp)
    17ec:	b8c00007 	ldb	r3,0(r23)
    17f0:	003c1006 	br	834 <___vfprintf_internal_r+0x1fc>
    17f4:	d9814d17 	ldw	r6,1332(sp)
    17f8:	b8c00007 	ldb	r3,0(r23)
    17fc:	31800214 	ori	r6,r6,8
    1800:	d9814d15 	stw	r6,1332(sp)
    1804:	003c0b06 	br	834 <___vfprintf_internal_r+0x1fc>
    1808:	0007883a 	mov	r3,zero
    180c:	01000244 	movi	r4,9
    1810:	188002a4 	muli	r2,r3,10
    1814:	b8c00007 	ldb	r3,0(r23)
    1818:	d9814e17 	ldw	r6,1336(sp)
    181c:	bdc00044 	addi	r23,r23,1
    1820:	d8c14e15 	stw	r3,1336(sp)
    1824:	d9414e17 	ldw	r5,1336(sp)
    1828:	3085883a 	add	r2,r6,r2
    182c:	10fff404 	addi	r3,r2,-48
    1830:	28bff404 	addi	r2,r5,-48
    1834:	20bff62e 	bgeu	r4,r2,1810 <___vfprintf_internal_r+0x11d8>
    1838:	d8c14b15 	stw	r3,1324(sp)
    183c:	003bff06 	br	83c <___vfprintf_internal_r+0x204>
    1840:	d9414d17 	ldw	r5,1332(sp)
    1844:	b8c00007 	ldb	r3,0(r23)
    1848:	29402014 	ori	r5,r5,128
    184c:	d9414d15 	stw	r5,1332(sp)
    1850:	003bf806 	br	834 <___vfprintf_internal_r+0x1fc>
    1854:	b8c00007 	ldb	r3,0(r23)
    1858:	00800a84 	movi	r2,42
    185c:	bdc00044 	addi	r23,r23,1
    1860:	18831526 	beq	r3,r2,24b8 <___vfprintf_internal_r+0x1e80>
    1864:	d8c14e15 	stw	r3,1336(sp)
    1868:	18bff404 	addi	r2,r3,-48
    186c:	00c00244 	movi	r3,9
    1870:	18827836 	bltu	r3,r2,2254 <___vfprintf_internal_r+0x1c1c>
    1874:	000d883a 	mov	r6,zero
    1878:	308002a4 	muli	r2,r6,10
    187c:	b9800007 	ldb	r6,0(r23)
    1880:	d9414e17 	ldw	r5,1336(sp)
    1884:	bdc00044 	addi	r23,r23,1
    1888:	d9814e15 	stw	r6,1336(sp)
    188c:	d9014e17 	ldw	r4,1336(sp)
    1890:	1145883a 	add	r2,r2,r5
    1894:	11bff404 	addi	r6,r2,-48
    1898:	20bff404 	addi	r2,r4,-48
    189c:	18bff62e 	bgeu	r3,r2,1878 <___vfprintf_internal_r+0x1240>
    18a0:	3027883a 	mov	r19,r6
    18a4:	303be50e 	bge	r6,zero,83c <___vfprintf_internal_r+0x204>
    18a8:	04ffffc4 	movi	r19,-1
    18ac:	003be306 	br	83c <___vfprintf_internal_r+0x204>
    18b0:	d8000405 	stb	zero,16(sp)
    18b4:	39800017 	ldw	r6,0(r7)
    18b8:	39c00104 	addi	r7,r7,4
    18bc:	d9c14115 	stw	r7,1284(sp)
    18c0:	d9814215 	stw	r6,1288(sp)
    18c4:	3001c926 	beq	r6,zero,1fec <___vfprintf_internal_r+0x19b4>
    18c8:	98000e16 	blt	r19,zero,1904 <___vfprintf_internal_r+0x12cc>
    18cc:	d9014217 	ldw	r4,1288(sp)
    18d0:	000b883a 	mov	r5,zero
    18d4:	980d883a 	mov	r6,r19
    18d8:	00071dc0 	call	71dc <memchr>
    18dc:	10025926 	beq	r2,zero,2244 <___vfprintf_internal_r+0x1c0c>
    18e0:	d8c14217 	ldw	r3,1288(sp)
    18e4:	10cfc83a 	sub	r7,r2,r3
    18e8:	99c19e16 	blt	r19,r7,1f64 <___vfprintf_internal_r+0x192c>
    18ec:	d9c14615 	stw	r7,1304(sp)
    18f0:	38000916 	blt	r7,zero,1918 <___vfprintf_internal_r+0x12e0>
    18f4:	d8014715 	stw	zero,1308(sp)
    18f8:	003df106 	br	10c0 <___vfprintf_internal_r+0xa88>
    18fc:	b8c00007 	ldb	r3,0(r23)
    1900:	003bcc06 	br	834 <___vfprintf_internal_r+0x1fc>
    1904:	d9014217 	ldw	r4,1288(sp)
    1908:	00091240 	call	9124 <strlen>
    190c:	d8814615 	stw	r2,1304(sp)
    1910:	100f883a 	mov	r7,r2
    1914:	103ff70e 	bge	r2,zero,18f4 <___vfprintf_internal_r+0x12bc>
    1918:	d8014615 	stw	zero,1304(sp)
    191c:	d8014715 	stw	zero,1308(sp)
    1920:	003de706 	br	10c0 <___vfprintf_internal_r+0xa88>
    1924:	20c03fcc 	andi	r3,r4,255
    1928:	00800044 	movi	r2,1
    192c:	18802d26 	beq	r3,r2,19e4 <___vfprintf_internal_r+0x13ac>
    1930:	18800e36 	bltu	r3,r2,196c <___vfprintf_internal_r+0x1334>
    1934:	00800084 	movi	r2,2
    1938:	1880fa26 	beq	r3,r2,1d24 <___vfprintf_internal_r+0x16ec>
    193c:	01000074 	movhi	r4,1
    1940:	21062f04 	addi	r4,r4,6332
    1944:	00091240 	call	9124 <strlen>
    1948:	100f883a 	mov	r7,r2
    194c:	dcc14615 	stw	r19,1304(sp)
    1950:	9880010e 	bge	r19,r2,1958 <___vfprintf_internal_r+0x1320>
    1954:	d8814615 	stw	r2,1304(sp)
    1958:	00800074 	movhi	r2,1
    195c:	10862f04 	addi	r2,r2,6332
    1960:	dcc14715 	stw	r19,1308(sp)
    1964:	d8814215 	stw	r2,1288(sp)
    1968:	003dd506 	br	10c0 <___vfprintf_internal_r+0xa88>
    196c:	d9401a04 	addi	r5,sp,104
    1970:	dd001004 	addi	r20,sp,64
    1974:	d9414215 	stw	r5,1288(sp)
    1978:	880a977a 	slli	r5,r17,29
    197c:	d9814217 	ldw	r6,1288(sp)
    1980:	8004d0fa 	srli	r2,r16,3
    1984:	8806d0fa 	srli	r3,r17,3
    1988:	810001cc 	andi	r4,r16,7
    198c:	2884b03a 	or	r2,r5,r2
    1990:	31bfffc4 	addi	r6,r6,-1
    1994:	21000c04 	addi	r4,r4,48
    1998:	d9814215 	stw	r6,1288(sp)
    199c:	10cab03a 	or	r5,r2,r3
    19a0:	31000005 	stb	r4,0(r6)
    19a4:	1021883a 	mov	r16,r2
    19a8:	1823883a 	mov	r17,r3
    19ac:	283ff21e 	bne	r5,zero,1978 <___vfprintf_internal_r+0x1340>
    19b0:	d8c14d17 	ldw	r3,1332(sp)
    19b4:	1880004c 	andi	r2,r3,1
    19b8:	1005003a 	cmpeq	r2,r2,zero
    19bc:	103db91e 	bne	r2,zero,10a4 <___vfprintf_internal_r+0xa6c>
    19c0:	20803fcc 	andi	r2,r4,255
    19c4:	1080201c 	xori	r2,r2,128
    19c8:	10bfe004 	addi	r2,r2,-128
    19cc:	00c00c04 	movi	r3,48
    19d0:	10fdb426 	beq	r2,r3,10a4 <___vfprintf_internal_r+0xa6c>
    19d4:	31bfffc4 	addi	r6,r6,-1
    19d8:	d9814215 	stw	r6,1288(sp)
    19dc:	30c00005 	stb	r3,0(r6)
    19e0:	003db006 	br	10a4 <___vfprintf_internal_r+0xa6c>
    19e4:	88800068 	cmpgeui	r2,r17,1
    19e8:	10002c1e 	bne	r2,zero,1a9c <___vfprintf_internal_r+0x1464>
    19ec:	8800021e 	bne	r17,zero,19f8 <___vfprintf_internal_r+0x13c0>
    19f0:	00800244 	movi	r2,9
    19f4:	14002936 	bltu	r2,r16,1a9c <___vfprintf_internal_r+0x1464>
    19f8:	d90019c4 	addi	r4,sp,103
    19fc:	dd001004 	addi	r20,sp,64
    1a00:	d9014215 	stw	r4,1288(sp)
    1a04:	d9014217 	ldw	r4,1288(sp)
    1a08:	80800c04 	addi	r2,r16,48
    1a0c:	20800005 	stb	r2,0(r4)
    1a10:	003da406 	br	10a4 <___vfprintf_internal_r+0xa6c>
    1a14:	dc400e17 	ldw	r17,56(sp)
    1a18:	07000074 	movhi	fp,1
    1a1c:	e7063704 	addi	fp,fp,6364
    1a20:	9425883a 	add	r18,r18,r16
    1a24:	8c400044 	addi	r17,r17,1
    1a28:	008001c4 	movi	r2,7
    1a2c:	1f000015 	stw	fp,0(r3)
    1a30:	1c000115 	stw	r16,4(r3)
    1a34:	dc800f15 	stw	r18,60(sp)
    1a38:	dc400e15 	stw	r17,56(sp)
    1a3c:	147de216 	blt	r2,r17,11c8 <___vfprintf_internal_r+0xb90>
    1a40:	18c00204 	addi	r3,r3,8
    1a44:	003c7a06 	br	c30 <___vfprintf_internal_r+0x5f8>
    1a48:	01000084 	movi	r4,2
    1a4c:	d8000405 	stb	zero,16(sp)
    1a50:	003d8706 	br	1070 <___vfprintf_internal_r+0xa38>
    1a54:	d9814d17 	ldw	r6,1332(sp)
    1a58:	30c4703a 	and	r2,r6,r3
    1a5c:	1005003a 	cmpeq	r2,r2,zero
    1a60:	103cb926 	beq	r2,zero,d48 <___vfprintf_internal_r+0x710>
    1a64:	d9014217 	ldw	r4,1288(sp)
    1a68:	94800044 	addi	r18,r18,1
    1a6c:	8c400044 	addi	r17,r17,1
    1a70:	008001c4 	movi	r2,7
    1a74:	a9000015 	stw	r4,0(r21)
    1a78:	a8c00115 	stw	r3,4(r21)
    1a7c:	dc800f15 	stw	r18,60(sp)
    1a80:	dc400e15 	stw	r17,56(sp)
    1a84:	147e6616 	blt	r2,r17,1420 <___vfprintf_internal_r+0xde8>
    1a88:	acc00204 	addi	r19,r21,8
    1a8c:	003cd706 	br	dec <___vfprintf_internal_r+0x7b4>
    1a90:	07000074 	movhi	fp,1
    1a94:	e7063704 	addi	fp,fp,6364
    1a98:	003c4f06 	br	bd8 <___vfprintf_internal_r+0x5a0>
    1a9c:	dd001004 	addi	r20,sp,64
    1aa0:	dc801a04 	addi	r18,sp,104
    1aa4:	8009883a 	mov	r4,r16
    1aa8:	880b883a 	mov	r5,r17
    1aac:	01800284 	movi	r6,10
    1ab0:	000f883a 	mov	r7,zero
    1ab4:	000cc900 	call	cc90 <__umoddi3>
    1ab8:	12000c04 	addi	r8,r2,48
    1abc:	94bfffc4 	addi	r18,r18,-1
    1ac0:	8009883a 	mov	r4,r16
    1ac4:	880b883a 	mov	r5,r17
    1ac8:	01800284 	movi	r6,10
    1acc:	000f883a 	mov	r7,zero
    1ad0:	92000005 	stb	r8,0(r18)
    1ad4:	000c6b40 	call	c6b4 <__udivdi3>
    1ad8:	1009883a 	mov	r4,r2
    1adc:	1021883a 	mov	r16,r2
    1ae0:	18800068 	cmpgeui	r2,r3,1
    1ae4:	1823883a 	mov	r17,r3
    1ae8:	103fee1e 	bne	r2,zero,1aa4 <___vfprintf_internal_r+0x146c>
    1aec:	1800021e 	bne	r3,zero,1af8 <___vfprintf_internal_r+0x14c0>
    1af0:	00800244 	movi	r2,9
    1af4:	113feb36 	bltu	r2,r4,1aa4 <___vfprintf_internal_r+0x146c>
    1af8:	94bfffc4 	addi	r18,r18,-1
    1afc:	dc814215 	stw	r18,1288(sp)
    1b00:	003fc006 	br	1a04 <___vfprintf_internal_r+0x13cc>
    1b04:	d9014d17 	ldw	r4,1332(sp)
    1b08:	2080004c 	andi	r2,r4,1
    1b0c:	10009a1e 	bne	r2,zero,1d78 <___vfprintf_internal_r+0x1740>
    1b10:	d9401a04 	addi	r5,sp,104
    1b14:	dd001004 	addi	r20,sp,64
    1b18:	d9414215 	stw	r5,1288(sp)
    1b1c:	003d6106 	br	10a4 <___vfprintf_internal_r+0xa6c>
    1b20:	d9015017 	ldw	r4,1344(sp)
    1b24:	b00b883a 	mov	r5,r22
    1b28:	d9800d04 	addi	r6,sp,52
    1b2c:	00005e00 	call	5e0 <__sprint_r>
    1b30:	103c791e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1b34:	dc800f17 	ldw	r18,60(sp)
    1b38:	d8c01a04 	addi	r3,sp,104
    1b3c:	003cff06 	br	f3c <___vfprintf_internal_r+0x904>
    1b40:	d8c14d17 	ldw	r3,1332(sp)
    1b44:	1880040c 	andi	r2,r3,16
    1b48:	1000711e 	bne	r2,zero,1d10 <___vfprintf_internal_r+0x16d8>
    1b4c:	d9014d17 	ldw	r4,1332(sp)
    1b50:	2080100c 	andi	r2,r4,64
    1b54:	10006e26 	beq	r2,zero,1d10 <___vfprintf_internal_r+0x16d8>
    1b58:	3c00000b 	ldhu	r16,0(r7)
    1b5c:	0023883a 	mov	r17,zero
    1b60:	39c00104 	addi	r7,r7,4
    1b64:	d9c14115 	stw	r7,1284(sp)
    1b68:	003f0006 	br	176c <___vfprintf_internal_r+0x1134>
    1b6c:	dc400e17 	ldw	r17,56(sp)
    1b70:	07000074 	movhi	fp,1
    1b74:	e7063704 	addi	fp,fp,6364
    1b78:	9425883a 	add	r18,r18,r16
    1b7c:	8c400044 	addi	r17,r17,1
    1b80:	008001c4 	movi	r2,7
    1b84:	1f000015 	stw	fp,0(r3)
    1b88:	1c000115 	stw	r16,4(r3)
    1b8c:	dc800f15 	stw	r18,60(sp)
    1b90:	dc400e15 	stw	r17,56(sp)
    1b94:	147d7616 	blt	r2,r17,1170 <___vfprintf_internal_r+0xb38>
    1b98:	18c00204 	addi	r3,r3,8
    1b9c:	003d7b06 	br	118c <___vfprintf_internal_r+0xb54>
    1ba0:	dc800f17 	ldw	r18,60(sp)
    1ba4:	dc400e17 	ldw	r17,56(sp)
    1ba8:	07000074 	movhi	fp,1
    1bac:	e7063b04 	addi	fp,fp,6380
    1bb0:	003bc006 	br	ab4 <___vfprintf_internal_r+0x47c>
    1bb4:	d9015017 	ldw	r4,1344(sp)
    1bb8:	b00b883a 	mov	r5,r22
    1bbc:	d9800d04 	addi	r6,sp,52
    1bc0:	00005e00 	call	5e0 <__sprint_r>
    1bc4:	103c541e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1bc8:	dc800f17 	ldw	r18,60(sp)
    1bcc:	d8c01a04 	addi	r3,sp,104
    1bd0:	003ce906 	br	f78 <___vfprintf_internal_r+0x940>
    1bd4:	3c000017 	ldw	r16,0(r7)
    1bd8:	0009883a 	mov	r4,zero
    1bdc:	39c00104 	addi	r7,r7,4
    1be0:	0023883a 	mov	r17,zero
    1be4:	d9c14115 	stw	r7,1284(sp)
    1be8:	d8000405 	stb	zero,16(sp)
    1bec:	003d2006 	br	1070 <___vfprintf_internal_r+0xa38>
    1bf0:	38800017 	ldw	r2,0(r7)
    1bf4:	39c00104 	addi	r7,r7,4
    1bf8:	d9c14115 	stw	r7,1284(sp)
    1bfc:	1023d7fa 	srai	r17,r2,31
    1c00:	1021883a 	mov	r16,r2
    1c04:	003d1806 	br	1068 <___vfprintf_internal_r+0xa30>
    1c08:	3c000017 	ldw	r16,0(r7)
    1c0c:	01000044 	movi	r4,1
    1c10:	39c00104 	addi	r7,r7,4
    1c14:	0023883a 	mov	r17,zero
    1c18:	d9c14115 	stw	r7,1284(sp)
    1c1c:	d8000405 	stb	zero,16(sp)
    1c20:	003d1306 	br	1070 <___vfprintf_internal_r+0xa38>
    1c24:	00800074 	movhi	r2,1
    1c28:	10863604 	addi	r2,r2,6360
    1c2c:	94800044 	addi	r18,r18,1
    1c30:	8c400044 	addi	r17,r17,1
    1c34:	a8800015 	stw	r2,0(r21)
    1c38:	00c00044 	movi	r3,1
    1c3c:	008001c4 	movi	r2,7
    1c40:	a8c00115 	stw	r3,4(r21)
    1c44:	dc800f15 	stw	r18,60(sp)
    1c48:	dc400e15 	stw	r17,56(sp)
    1c4c:	1440ca16 	blt	r2,r17,1f78 <___vfprintf_internal_r+0x1940>
    1c50:	a8c00204 	addi	r3,r21,8
    1c54:	2000061e 	bne	r4,zero,1c70 <___vfprintf_internal_r+0x1638>
    1c58:	d9414817 	ldw	r5,1312(sp)
    1c5c:	2800041e 	bne	r5,zero,1c70 <___vfprintf_internal_r+0x1638>
    1c60:	d9814d17 	ldw	r6,1332(sp)
    1c64:	3080004c 	andi	r2,r6,1
    1c68:	1005003a 	cmpeq	r2,r2,zero
    1c6c:	103bf01e 	bne	r2,zero,c30 <___vfprintf_internal_r+0x5f8>
    1c70:	00800044 	movi	r2,1
    1c74:	dc400e17 	ldw	r17,56(sp)
    1c78:	18800115 	stw	r2,4(r3)
    1c7c:	d8814a17 	ldw	r2,1320(sp)
    1c80:	94800044 	addi	r18,r18,1
    1c84:	8c400044 	addi	r17,r17,1
    1c88:	18800015 	stw	r2,0(r3)
    1c8c:	008001c4 	movi	r2,7
    1c90:	dc800f15 	stw	r18,60(sp)
    1c94:	dc400e15 	stw	r17,56(sp)
    1c98:	1440ca16 	blt	r2,r17,1fc4 <___vfprintf_internal_r+0x198c>
    1c9c:	18c00204 	addi	r3,r3,8
    1ca0:	0121c83a 	sub	r16,zero,r4
    1ca4:	0400500e 	bge	zero,r16,1de8 <___vfprintf_internal_r+0x17b0>
    1ca8:	00800404 	movi	r2,16
    1cac:	1400800e 	bge	r2,r16,1eb0 <___vfprintf_internal_r+0x1878>
    1cb0:	1027883a 	mov	r19,r2
    1cb4:	07000074 	movhi	fp,1
    1cb8:	e7063704 	addi	fp,fp,6364
    1cbc:	050001c4 	movi	r20,7
    1cc0:	00000306 	br	1cd0 <___vfprintf_internal_r+0x1698>
    1cc4:	18c00204 	addi	r3,r3,8
    1cc8:	843ffc04 	addi	r16,r16,-16
    1ccc:	9c007a0e 	bge	r19,r16,1eb8 <___vfprintf_internal_r+0x1880>
    1cd0:	94800404 	addi	r18,r18,16
    1cd4:	8c400044 	addi	r17,r17,1
    1cd8:	1f000015 	stw	fp,0(r3)
    1cdc:	1cc00115 	stw	r19,4(r3)
    1ce0:	dc800f15 	stw	r18,60(sp)
    1ce4:	dc400e15 	stw	r17,56(sp)
    1ce8:	a47ff60e 	bge	r20,r17,1cc4 <___vfprintf_internal_r+0x168c>
    1cec:	d9015017 	ldw	r4,1344(sp)
    1cf0:	b00b883a 	mov	r5,r22
    1cf4:	d9800d04 	addi	r6,sp,52
    1cf8:	00005e00 	call	5e0 <__sprint_r>
    1cfc:	103c061e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1d00:	dc800f17 	ldw	r18,60(sp)
    1d04:	dc400e17 	ldw	r17,56(sp)
    1d08:	d8c01a04 	addi	r3,sp,104
    1d0c:	003fee06 	br	1cc8 <___vfprintf_internal_r+0x1690>
    1d10:	3c000017 	ldw	r16,0(r7)
    1d14:	0023883a 	mov	r17,zero
    1d18:	39c00104 	addi	r7,r7,4
    1d1c:	d9c14115 	stw	r7,1284(sp)
    1d20:	003e9206 	br	176c <___vfprintf_internal_r+0x1134>
    1d24:	d9401a04 	addi	r5,sp,104
    1d28:	dd001004 	addi	r20,sp,64
    1d2c:	d9414215 	stw	r5,1288(sp)
    1d30:	d9814517 	ldw	r6,1300(sp)
    1d34:	880a973a 	slli	r5,r17,28
    1d38:	8004d13a 	srli	r2,r16,4
    1d3c:	810003cc 	andi	r4,r16,15
    1d40:	3109883a 	add	r4,r6,r4
    1d44:	2884b03a 	or	r2,r5,r2
    1d48:	21400003 	ldbu	r5,0(r4)
    1d4c:	d9014217 	ldw	r4,1288(sp)
    1d50:	8806d13a 	srli	r3,r17,4
    1d54:	1021883a 	mov	r16,r2
    1d58:	213fffc4 	addi	r4,r4,-1
    1d5c:	d9014215 	stw	r4,1288(sp)
    1d60:	d9814217 	ldw	r6,1288(sp)
    1d64:	10c8b03a 	or	r4,r2,r3
    1d68:	1823883a 	mov	r17,r3
    1d6c:	31400005 	stb	r5,0(r6)
    1d70:	203fef1e 	bne	r4,zero,1d30 <___vfprintf_internal_r+0x16f8>
    1d74:	003ccb06 	br	10a4 <___vfprintf_internal_r+0xa6c>
    1d78:	00800c04 	movi	r2,48
    1d7c:	d98019c4 	addi	r6,sp,103
    1d80:	dd001004 	addi	r20,sp,64
    1d84:	d88019c5 	stb	r2,103(sp)
    1d88:	d9814215 	stw	r6,1288(sp)
    1d8c:	003cc506 	br	10a4 <___vfprintf_internal_r+0xa6c>
    1d90:	dc400e17 	ldw	r17,56(sp)
    1d94:	07000074 	movhi	fp,1
    1d98:	e7063b04 	addi	fp,fp,6380
    1d9c:	003bc706 	br	cbc <___vfprintf_internal_r+0x684>
    1da0:	d9414d17 	ldw	r5,1332(sp)
    1da4:	2880040c 	andi	r2,r5,16
    1da8:	10007c26 	beq	r2,zero,1f9c <___vfprintf_internal_r+0x1964>
    1dac:	38800017 	ldw	r2,0(r7)
    1db0:	39c00104 	addi	r7,r7,4
    1db4:	d9c14115 	stw	r7,1284(sp)
    1db8:	d9814c17 	ldw	r6,1328(sp)
    1dbc:	d9c14117 	ldw	r7,1284(sp)
    1dc0:	11800015 	stw	r6,0(r2)
    1dc4:	003a7806 	br	7a8 <___vfprintf_internal_r+0x170>
    1dc8:	d9015017 	ldw	r4,1344(sp)
    1dcc:	b00b883a 	mov	r5,r22
    1dd0:	d9800d04 	addi	r6,sp,52
    1dd4:	00005e00 	call	5e0 <__sprint_r>
    1dd8:	103bcf1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1ddc:	dc800f17 	ldw	r18,60(sp)
    1de0:	dc400e17 	ldw	r17,56(sp)
    1de4:	d8c01a04 	addi	r3,sp,104
    1de8:	d9014817 	ldw	r4,1312(sp)
    1dec:	d9414217 	ldw	r5,1288(sp)
    1df0:	8c400044 	addi	r17,r17,1
    1df4:	9125883a 	add	r18,r18,r4
    1df8:	008001c4 	movi	r2,7
    1dfc:	19400015 	stw	r5,0(r3)
    1e00:	19000115 	stw	r4,4(r3)
    1e04:	dc800f15 	stw	r18,60(sp)
    1e08:	dc400e15 	stw	r17,56(sp)
    1e0c:	147cee16 	blt	r2,r17,11c8 <___vfprintf_internal_r+0xb90>
    1e10:	18c00204 	addi	r3,r3,8
    1e14:	003b8606 	br	c30 <___vfprintf_internal_r+0x5f8>
    1e18:	38c00017 	ldw	r3,0(r7)
    1e1c:	39000204 	addi	r4,r7,8
    1e20:	d9014115 	stw	r4,1284(sp)
    1e24:	d8c14315 	stw	r3,1292(sp)
    1e28:	39c00117 	ldw	r7,4(r7)
    1e2c:	d9c14415 	stw	r7,1296(sp)
    1e30:	003e2006 	br	16b4 <___vfprintf_internal_r+0x107c>
    1e34:	0005883a 	mov	r2,zero
    1e38:	1409c83a 	sub	r4,r2,r16
    1e3c:	1105803a 	cmpltu	r2,r2,r4
    1e40:	044bc83a 	sub	r5,zero,r17
    1e44:	2885c83a 	sub	r2,r5,r2
    1e48:	2021883a 	mov	r16,r4
    1e4c:	1023883a 	mov	r17,r2
    1e50:	01000044 	movi	r4,1
    1e54:	00800b44 	movi	r2,45
    1e58:	d8800405 	stb	r2,16(sp)
    1e5c:	003c8406 	br	1070 <___vfprintf_internal_r+0xa38>
    1e60:	d9015017 	ldw	r4,1344(sp)
    1e64:	b00b883a 	mov	r5,r22
    1e68:	d9800d04 	addi	r6,sp,52
    1e6c:	00005e00 	call	5e0 <__sprint_r>
    1e70:	103ba91e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1e74:	dc800f17 	ldw	r18,60(sp)
    1e78:	dc400e17 	ldw	r17,56(sp)
    1e7c:	d9000617 	ldw	r4,24(sp)
    1e80:	d9401a04 	addi	r5,sp,104
    1e84:	003da706 	br	1524 <___vfprintf_internal_r+0xeec>
    1e88:	d9015017 	ldw	r4,1344(sp)
    1e8c:	b00b883a 	mov	r5,r22
    1e90:	d9800d04 	addi	r6,sp,52
    1e94:	00005e00 	call	5e0 <__sprint_r>
    1e98:	103b9f1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1e9c:	dc800f17 	ldw	r18,60(sp)
    1ea0:	dc400e17 	ldw	r17,56(sp)
    1ea4:	d9000617 	ldw	r4,24(sp)
    1ea8:	d8c01a04 	addi	r3,sp,104
    1eac:	003d9106 	br	14f4 <___vfprintf_internal_r+0xebc>
    1eb0:	07000074 	movhi	fp,1
    1eb4:	e7063704 	addi	fp,fp,6364
    1eb8:	9425883a 	add	r18,r18,r16
    1ebc:	8c400044 	addi	r17,r17,1
    1ec0:	008001c4 	movi	r2,7
    1ec4:	1f000015 	stw	fp,0(r3)
    1ec8:	1c000115 	stw	r16,4(r3)
    1ecc:	dc800f15 	stw	r18,60(sp)
    1ed0:	dc400e15 	stw	r17,56(sp)
    1ed4:	147fbc16 	blt	r2,r17,1dc8 <___vfprintf_internal_r+0x1790>
    1ed8:	18c00204 	addi	r3,r3,8
    1edc:	003fc206 	br	1de8 <___vfprintf_internal_r+0x17b0>
    1ee0:	d9015017 	ldw	r4,1344(sp)
    1ee4:	b00b883a 	mov	r5,r22
    1ee8:	d9800d04 	addi	r6,sp,52
    1eec:	00005e00 	call	5e0 <__sprint_r>
    1ef0:	103b891e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1ef4:	dc800f17 	ldw	r18,60(sp)
    1ef8:	d9000617 	ldw	r4,24(sp)
    1efc:	d8c01a04 	addi	r3,sp,104
    1f00:	003d0206 	br	130c <___vfprintf_internal_r+0xcd4>
    1f04:	07000074 	movhi	fp,1
    1f08:	e7063704 	addi	fp,fp,6364
    1f0c:	003be406 	br	ea0 <___vfprintf_internal_r+0x868>
    1f10:	00800074 	movhi	r2,1
    1f14:	10862504 	addi	r2,r2,6292
    1f18:	d8814215 	stw	r2,1288(sp)
    1f1c:	003df506 	br	16f4 <___vfprintf_internal_r+0x10bc>
    1f20:	d9014317 	ldw	r4,1292(sp)
    1f24:	d9414417 	ldw	r5,1296(sp)
    1f28:	0008ce00 	call	8ce0 <__isnand>
    1f2c:	10003926 	beq	r2,zero,2014 <___vfprintf_internal_r+0x19dc>
    1f30:	d9414e17 	ldw	r5,1336(sp)
    1f34:	008011c4 	movi	r2,71
    1f38:	1140ce16 	blt	r2,r5,2274 <___vfprintf_internal_r+0x1c3c>
    1f3c:	01800074 	movhi	r6,1
    1f40:	31862604 	addi	r6,r6,6296
    1f44:	d9814215 	stw	r6,1288(sp)
    1f48:	003dea06 	br	16f4 <___vfprintf_internal_r+0x10bc>
    1f4c:	d9014d17 	ldw	r4,1332(sp)
    1f50:	bdc00044 	addi	r23,r23,1
    1f54:	b8c00007 	ldb	r3,0(r23)
    1f58:	21000814 	ori	r4,r4,32
    1f5c:	d9014d15 	stw	r4,1332(sp)
    1f60:	003a3406 	br	834 <___vfprintf_internal_r+0x1fc>
    1f64:	dcc14615 	stw	r19,1304(sp)
    1f68:	98011016 	blt	r19,zero,23ac <___vfprintf_internal_r+0x1d74>
    1f6c:	980f883a 	mov	r7,r19
    1f70:	d8014715 	stw	zero,1308(sp)
    1f74:	003c5206 	br	10c0 <___vfprintf_internal_r+0xa88>
    1f78:	d9015017 	ldw	r4,1344(sp)
    1f7c:	b00b883a 	mov	r5,r22
    1f80:	d9800d04 	addi	r6,sp,52
    1f84:	00005e00 	call	5e0 <__sprint_r>
    1f88:	103b631e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1f8c:	dc800f17 	ldw	r18,60(sp)
    1f90:	d9000617 	ldw	r4,24(sp)
    1f94:	d8c01a04 	addi	r3,sp,104
    1f98:	003f2e06 	br	1c54 <___vfprintf_internal_r+0x161c>
    1f9c:	d8c14d17 	ldw	r3,1332(sp)
    1fa0:	1880100c 	andi	r2,r3,64
    1fa4:	1000a026 	beq	r2,zero,2228 <___vfprintf_internal_r+0x1bf0>
    1fa8:	38800017 	ldw	r2,0(r7)
    1fac:	39c00104 	addi	r7,r7,4
    1fb0:	d9c14115 	stw	r7,1284(sp)
    1fb4:	d9014c17 	ldw	r4,1328(sp)
    1fb8:	d9c14117 	ldw	r7,1284(sp)
    1fbc:	1100000d 	sth	r4,0(r2)
    1fc0:	0039f906 	br	7a8 <___vfprintf_internal_r+0x170>
    1fc4:	d9015017 	ldw	r4,1344(sp)
    1fc8:	b00b883a 	mov	r5,r22
    1fcc:	d9800d04 	addi	r6,sp,52
    1fd0:	00005e00 	call	5e0 <__sprint_r>
    1fd4:	103b501e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    1fd8:	dc800f17 	ldw	r18,60(sp)
    1fdc:	dc400e17 	ldw	r17,56(sp)
    1fe0:	d9000617 	ldw	r4,24(sp)
    1fe4:	d8c01a04 	addi	r3,sp,104
    1fe8:	003f2d06 	br	1ca0 <___vfprintf_internal_r+0x1668>
    1fec:	00800184 	movi	r2,6
    1ff0:	14c09a36 	bltu	r2,r19,225c <___vfprintf_internal_r+0x1c24>
    1ff4:	dcc14615 	stw	r19,1304(sp)
    1ff8:	9800010e 	bge	r19,zero,2000 <___vfprintf_internal_r+0x19c8>
    1ffc:	d8014615 	stw	zero,1304(sp)
    2000:	00800074 	movhi	r2,1
    2004:	10862804 	addi	r2,r2,6304
    2008:	980f883a 	mov	r7,r19
    200c:	d8814215 	stw	r2,1288(sp)
    2010:	003a7806 	br	9f4 <___vfprintf_internal_r+0x3bc>
    2014:	00bfffc4 	movi	r2,-1
    2018:	9880e226 	beq	r19,r2,23a4 <___vfprintf_internal_r+0x1d6c>
    201c:	d9414e17 	ldw	r5,1336(sp)
    2020:	008019c4 	movi	r2,103
    2024:	2880dc26 	beq	r5,r2,2398 <___vfprintf_internal_r+0x1d60>
    2028:	008011c4 	movi	r2,71
    202c:	2880da26 	beq	r5,r2,2398 <___vfprintf_internal_r+0x1d60>
    2030:	d9414d17 	ldw	r5,1332(sp)
    2034:	d9014417 	ldw	r4,1296(sp)
    2038:	d9814317 	ldw	r6,1292(sp)
    203c:	29404014 	ori	r5,r5,256
    2040:	d9414d15 	stw	r5,1332(sp)
    2044:	2000cc16 	blt	r4,zero,2378 <___vfprintf_internal_r+0x1d40>
    2048:	3021883a 	mov	r16,r6
    204c:	2023883a 	mov	r17,r4
    2050:	0039883a 	mov	fp,zero
    2054:	d9414e17 	ldw	r5,1336(sp)
    2058:	00801984 	movi	r2,102
    205c:	2880b726 	beq	r5,r2,233c <___vfprintf_internal_r+0x1d04>
    2060:	00801184 	movi	r2,70
    2064:	2880b526 	beq	r5,r2,233c <___vfprintf_internal_r+0x1d04>
    2068:	00801944 	movi	r2,101
    206c:	2880c826 	beq	r5,r2,2390 <___vfprintf_internal_r+0x1d58>
    2070:	00801144 	movi	r2,69
    2074:	2880c626 	beq	r5,r2,2390 <___vfprintf_internal_r+0x1d58>
    2078:	9829883a 	mov	r20,r19
    207c:	d9015017 	ldw	r4,1344(sp)
    2080:	d8800604 	addi	r2,sp,24
    2084:	880d883a 	mov	r6,r17
    2088:	d8800115 	stw	r2,4(sp)
    208c:	d8c00704 	addi	r3,sp,28
    2090:	d8800804 	addi	r2,sp,32
    2094:	800b883a 	mov	r5,r16
    2098:	01c00084 	movi	r7,2
    209c:	d8c00215 	stw	r3,8(sp)
    20a0:	d8800315 	stw	r2,12(sp)
    20a4:	dd000015 	stw	r20,0(sp)
    20a8:	0003fdc0 	call	3fdc <_dtoa_r>
    20ac:	d9814e17 	ldw	r6,1336(sp)
    20b0:	d8814215 	stw	r2,1288(sp)
    20b4:	008019c4 	movi	r2,103
    20b8:	30809526 	beq	r6,r2,2310 <___vfprintf_internal_r+0x1cd8>
    20bc:	d8c14e17 	ldw	r3,1336(sp)
    20c0:	008011c4 	movi	r2,71
    20c4:	18809226 	beq	r3,r2,2310 <___vfprintf_internal_r+0x1cd8>
    20c8:	d9414217 	ldw	r5,1288(sp)
    20cc:	d9814e17 	ldw	r6,1336(sp)
    20d0:	00801984 	movi	r2,102
    20d4:	2d25883a 	add	r18,r5,r20
    20d8:	30808626 	beq	r6,r2,22f4 <___vfprintf_internal_r+0x1cbc>
    20dc:	00801184 	movi	r2,70
    20e0:	30808426 	beq	r6,r2,22f4 <___vfprintf_internal_r+0x1cbc>
    20e4:	000d883a 	mov	r6,zero
    20e8:	000f883a 	mov	r7,zero
    20ec:	880b883a 	mov	r5,r17
    20f0:	8009883a 	mov	r4,r16
    20f4:	000dec80 	call	dec8 <__eqdf2>
    20f8:	1000751e 	bne	r2,zero,22d0 <___vfprintf_internal_r+0x1c98>
    20fc:	9005883a 	mov	r2,r18
    2100:	dc800815 	stw	r18,32(sp)
    2104:	d9014217 	ldw	r4,1288(sp)
    2108:	d9414e17 	ldw	r5,1336(sp)
    210c:	00c019c4 	movi	r3,103
    2110:	1125c83a 	sub	r18,r2,r4
    2114:	28c06826 	beq	r5,r3,22b8 <___vfprintf_internal_r+0x1c80>
    2118:	008011c4 	movi	r2,71
    211c:	28806626 	beq	r5,r2,22b8 <___vfprintf_internal_r+0x1c80>
    2120:	d9000617 	ldw	r4,24(sp)
    2124:	d8c14e17 	ldw	r3,1336(sp)
    2128:	00801944 	movi	r2,101
    212c:	10c05516 	blt	r2,r3,2284 <___vfprintf_internal_r+0x1c4c>
    2130:	213fffc4 	addi	r4,r4,-1
    2134:	d9000615 	stw	r4,24(sp)
    2138:	d8c00905 	stb	r3,36(sp)
    213c:	2021883a 	mov	r16,r4
    2140:	2000c116 	blt	r4,zero,2448 <___vfprintf_internal_r+0x1e10>
    2144:	00800ac4 	movi	r2,43
    2148:	d8800945 	stb	r2,37(sp)
    214c:	00800244 	movi	r2,9
    2150:	1400af0e 	bge	r2,r16,2410 <___vfprintf_internal_r+0x1dd8>
    2154:	1027883a 	mov	r19,r2
    2158:	dc400cc4 	addi	r17,sp,51
    215c:	8009883a 	mov	r4,r16
    2160:	01400284 	movi	r5,10
    2164:	000e6ac0 	call	e6ac <__modsi3>
    2168:	10800c04 	addi	r2,r2,48
    216c:	8c7fffc4 	addi	r17,r17,-1
    2170:	8009883a 	mov	r4,r16
    2174:	01400284 	movi	r5,10
    2178:	88800005 	stb	r2,0(r17)
    217c:	000e64c0 	call	e64c <__divsi3>
    2180:	1021883a 	mov	r16,r2
    2184:	98bff516 	blt	r19,r2,215c <___vfprintf_internal_r+0x1b24>
    2188:	10c00c04 	addi	r3,r2,48
    218c:	d8800b04 	addi	r2,sp,44
    2190:	108001c4 	addi	r2,r2,7
    2194:	897fffc4 	addi	r5,r17,-1
    2198:	88ffffc5 	stb	r3,-1(r17)
    219c:	2880a72e 	bgeu	r5,r2,243c <___vfprintf_internal_r+0x1e04>
    21a0:	1009883a 	mov	r4,r2
    21a4:	d9800904 	addi	r6,sp,36
    21a8:	d8c00984 	addi	r3,sp,38
    21ac:	28800003 	ldbu	r2,0(r5)
    21b0:	29400044 	addi	r5,r5,1
    21b4:	18800005 	stb	r2,0(r3)
    21b8:	18c00044 	addi	r3,r3,1
    21bc:	293ffb36 	bltu	r5,r4,21ac <___vfprintf_internal_r+0x1b74>
    21c0:	1987c83a 	sub	r3,r3,r6
    21c4:	00800044 	movi	r2,1
    21c8:	d8c14915 	stw	r3,1316(sp)
    21cc:	90cf883a 	add	r7,r18,r3
    21d0:	1480960e 	bge	r2,r18,242c <___vfprintf_internal_r+0x1df4>
    21d4:	39c00044 	addi	r7,r7,1
    21d8:	d9c14615 	stw	r7,1304(sp)
    21dc:	38003416 	blt	r7,zero,22b0 <___vfprintf_internal_r+0x1c78>
    21e0:	e0803fcc 	andi	r2,fp,255
    21e4:	1080201c 	xori	r2,r2,128
    21e8:	10bfe004 	addi	r2,r2,-128
    21ec:	10004e26 	beq	r2,zero,2328 <___vfprintf_internal_r+0x1cf0>
    21f0:	00800b44 	movi	r2,45
    21f4:	dc814815 	stw	r18,1312(sp)
    21f8:	d8014715 	stw	zero,1308(sp)
    21fc:	d8800405 	stb	r2,16(sp)
    2200:	003bb106 	br	10c8 <___vfprintf_internal_r+0xa90>
    2204:	00800b44 	movi	r2,45
    2208:	d8800405 	stb	r2,16(sp)
    220c:	003d3306 	br	16dc <___vfprintf_internal_r+0x10a4>
    2210:	d9015017 	ldw	r4,1344(sp)
    2214:	b00b883a 	mov	r5,r22
    2218:	d9800d04 	addi	r6,sp,52
    221c:	00005e00 	call	5e0 <__sprint_r>
    2220:	103abd1e 	bne	r2,zero,d18 <___vfprintf_internal_r+0x6e0>
    2224:	003abb06 	br	d14 <___vfprintf_internal_r+0x6dc>
    2228:	38800017 	ldw	r2,0(r7)
    222c:	39c00104 	addi	r7,r7,4
    2230:	d9c14115 	stw	r7,1284(sp)
    2234:	d9414c17 	ldw	r5,1328(sp)
    2238:	d9c14117 	ldw	r7,1284(sp)
    223c:	11400015 	stw	r5,0(r2)
    2240:	00395906 	br	7a8 <___vfprintf_internal_r+0x170>
    2244:	980f883a 	mov	r7,r19
    2248:	dcc14615 	stw	r19,1304(sp)
    224c:	d8014715 	stw	zero,1308(sp)
    2250:	003b9b06 	br	10c0 <___vfprintf_internal_r+0xa88>
    2254:	0027883a 	mov	r19,zero
    2258:	00397806 	br	83c <___vfprintf_internal_r+0x204>
    225c:	00c00074 	movhi	r3,1
    2260:	18c62804 	addi	r3,r3,6304
    2264:	100f883a 	mov	r7,r2
    2268:	d8814615 	stw	r2,1304(sp)
    226c:	d8c14215 	stw	r3,1288(sp)
    2270:	0039e006 	br	9f4 <___vfprintf_internal_r+0x3bc>
    2274:	00800074 	movhi	r2,1
    2278:	10862704 	addi	r2,r2,6300
    227c:	d8814215 	stw	r2,1288(sp)
    2280:	003d1c06 	br	16f4 <___vfprintf_internal_r+0x10bc>
    2284:	d9414e17 	ldw	r5,1336(sp)
    2288:	00801984 	movi	r2,102
    228c:	28804926 	beq	r5,r2,23b4 <___vfprintf_internal_r+0x1d7c>
    2290:	200f883a 	mov	r7,r4
    2294:	24805716 	blt	r4,r18,23f4 <___vfprintf_internal_r+0x1dbc>
    2298:	d9414d17 	ldw	r5,1332(sp)
    229c:	2880004c 	andi	r2,r5,1
    22a0:	10000126 	beq	r2,zero,22a8 <___vfprintf_internal_r+0x1c70>
    22a4:	21c00044 	addi	r7,r4,1
    22a8:	d9c14615 	stw	r7,1304(sp)
    22ac:	383fcc0e 	bge	r7,zero,21e0 <___vfprintf_internal_r+0x1ba8>
    22b0:	d8014615 	stw	zero,1304(sp)
    22b4:	003fca06 	br	21e0 <___vfprintf_internal_r+0x1ba8>
    22b8:	d9000617 	ldw	r4,24(sp)
    22bc:	00bfff04 	movi	r2,-4
    22c0:	1100480e 	bge	r2,r4,23e4 <___vfprintf_internal_r+0x1dac>
    22c4:	99004716 	blt	r19,r4,23e4 <___vfprintf_internal_r+0x1dac>
    22c8:	d8c14e15 	stw	r3,1336(sp)
    22cc:	003ff006 	br	2290 <___vfprintf_internal_r+0x1c58>
    22d0:	d8800817 	ldw	r2,32(sp)
    22d4:	14bf8b2e 	bgeu	r2,r18,2104 <___vfprintf_internal_r+0x1acc>
    22d8:	9007883a 	mov	r3,r18
    22dc:	01000c04 	movi	r4,48
    22e0:	11000005 	stb	r4,0(r2)
    22e4:	10800044 	addi	r2,r2,1
    22e8:	d8800815 	stw	r2,32(sp)
    22ec:	18bffc1e 	bne	r3,r2,22e0 <___vfprintf_internal_r+0x1ca8>
    22f0:	003f8406 	br	2104 <___vfprintf_internal_r+0x1acc>
    22f4:	d8814217 	ldw	r2,1288(sp)
    22f8:	10c00007 	ldb	r3,0(r2)
    22fc:	00800c04 	movi	r2,48
    2300:	18805b26 	beq	r3,r2,2470 <___vfprintf_internal_r+0x1e38>
    2304:	d9000617 	ldw	r4,24(sp)
    2308:	9125883a 	add	r18,r18,r4
    230c:	003f7506 	br	20e4 <___vfprintf_internal_r+0x1aac>
    2310:	d9014d17 	ldw	r4,1332(sp)
    2314:	2080004c 	andi	r2,r4,1
    2318:	1005003a 	cmpeq	r2,r2,zero
    231c:	103f6a26 	beq	r2,zero,20c8 <___vfprintf_internal_r+0x1a90>
    2320:	d8800817 	ldw	r2,32(sp)
    2324:	003f7706 	br	2104 <___vfprintf_internal_r+0x1acc>
    2328:	d9c14615 	stw	r7,1304(sp)
    232c:	38004d16 	blt	r7,zero,2464 <___vfprintf_internal_r+0x1e2c>
    2330:	dc814815 	stw	r18,1312(sp)
    2334:	d8014715 	stw	zero,1308(sp)
    2338:	003b6106 	br	10c0 <___vfprintf_internal_r+0xa88>
    233c:	d9015017 	ldw	r4,1344(sp)
    2340:	d8800604 	addi	r2,sp,24
    2344:	d8800115 	stw	r2,4(sp)
    2348:	d8c00704 	addi	r3,sp,28
    234c:	d8800804 	addi	r2,sp,32
    2350:	800b883a 	mov	r5,r16
    2354:	880d883a 	mov	r6,r17
    2358:	01c000c4 	movi	r7,3
    235c:	d8c00215 	stw	r3,8(sp)
    2360:	d8800315 	stw	r2,12(sp)
    2364:	dcc00015 	stw	r19,0(sp)
    2368:	9829883a 	mov	r20,r19
    236c:	0003fdc0 	call	3fdc <_dtoa_r>
    2370:	d8814215 	stw	r2,1288(sp)
    2374:	003f5106 	br	20bc <___vfprintf_internal_r+0x1a84>
    2378:	d8c14317 	ldw	r3,1292(sp)
    237c:	d9014417 	ldw	r4,1296(sp)
    2380:	07000b44 	movi	fp,45
    2384:	1821883a 	mov	r16,r3
    2388:	2460003c 	xorhi	r17,r4,32768
    238c:	003f3106 	br	2054 <___vfprintf_internal_r+0x1a1c>
    2390:	9d000044 	addi	r20,r19,1
    2394:	003f3906 	br	207c <___vfprintf_internal_r+0x1a44>
    2398:	983f251e 	bne	r19,zero,2030 <___vfprintf_internal_r+0x19f8>
    239c:	04c00044 	movi	r19,1
    23a0:	003f2306 	br	2030 <___vfprintf_internal_r+0x19f8>
    23a4:	04c00184 	movi	r19,6
    23a8:	003f2106 	br	2030 <___vfprintf_internal_r+0x19f8>
    23ac:	d8014615 	stw	zero,1304(sp)
    23b0:	003eee06 	br	1f6c <___vfprintf_internal_r+0x1934>
    23b4:	200f883a 	mov	r7,r4
    23b8:	0100370e 	bge	zero,r4,2498 <___vfprintf_internal_r+0x1e60>
    23bc:	9800031e 	bne	r19,zero,23cc <___vfprintf_internal_r+0x1d94>
    23c0:	d9814d17 	ldw	r6,1332(sp)
    23c4:	3080004c 	andi	r2,r6,1
    23c8:	103fb726 	beq	r2,zero,22a8 <___vfprintf_internal_r+0x1c70>
    23cc:	20800044 	addi	r2,r4,1
    23d0:	98a7883a 	add	r19,r19,r2
    23d4:	dcc14615 	stw	r19,1304(sp)
    23d8:	980f883a 	mov	r7,r19
    23dc:	983f800e 	bge	r19,zero,21e0 <___vfprintf_internal_r+0x1ba8>
    23e0:	003fb306 	br	22b0 <___vfprintf_internal_r+0x1c78>
    23e4:	d9814e17 	ldw	r6,1336(sp)
    23e8:	31bfff84 	addi	r6,r6,-2
    23ec:	d9814e15 	stw	r6,1336(sp)
    23f0:	003f4c06 	br	2124 <___vfprintf_internal_r+0x1aec>
    23f4:	0100180e 	bge	zero,r4,2458 <___vfprintf_internal_r+0x1e20>
    23f8:	00800044 	movi	r2,1
    23fc:	1485883a 	add	r2,r2,r18
    2400:	d8814615 	stw	r2,1304(sp)
    2404:	100f883a 	mov	r7,r2
    2408:	103f750e 	bge	r2,zero,21e0 <___vfprintf_internal_r+0x1ba8>
    240c:	003fa806 	br	22b0 <___vfprintf_internal_r+0x1c78>
    2410:	80c00c04 	addi	r3,r16,48
    2414:	00800c04 	movi	r2,48
    2418:	d8c009c5 	stb	r3,39(sp)
    241c:	d9800904 	addi	r6,sp,36
    2420:	d8c00a04 	addi	r3,sp,40
    2424:	d8800985 	stb	r2,38(sp)
    2428:	003f6506 	br	21c0 <___vfprintf_internal_r+0x1b88>
    242c:	d9014d17 	ldw	r4,1332(sp)
    2430:	2084703a 	and	r2,r4,r2
    2434:	103f9c26 	beq	r2,zero,22a8 <___vfprintf_internal_r+0x1c70>
    2438:	003f6606 	br	21d4 <___vfprintf_internal_r+0x1b9c>
    243c:	d9800904 	addi	r6,sp,36
    2440:	d8c00984 	addi	r3,sp,38
    2444:	003f5e06 	br	21c0 <___vfprintf_internal_r+0x1b88>
    2448:	00800b44 	movi	r2,45
    244c:	0121c83a 	sub	r16,zero,r4
    2450:	d8800945 	stb	r2,37(sp)
    2454:	003f3d06 	br	214c <___vfprintf_internal_r+0x1b14>
    2458:	00800084 	movi	r2,2
    245c:	1105c83a 	sub	r2,r2,r4
    2460:	003fe606 	br	23fc <___vfprintf_internal_r+0x1dc4>
    2464:	d8014615 	stw	zero,1304(sp)
    2468:	dc814815 	stw	r18,1312(sp)
    246c:	003fb106 	br	2334 <___vfprintf_internal_r+0x1cfc>
    2470:	000d883a 	mov	r6,zero
    2474:	000f883a 	mov	r7,zero
    2478:	8009883a 	mov	r4,r16
    247c:	880b883a 	mov	r5,r17
    2480:	000df500 	call	df50 <__nedf2>
    2484:	103f9f26 	beq	r2,zero,2304 <___vfprintf_internal_r+0x1ccc>
    2488:	00800044 	movi	r2,1
    248c:	1509c83a 	sub	r4,r2,r20
    2490:	d9000615 	stw	r4,24(sp)
    2494:	003f9b06 	br	2304 <___vfprintf_internal_r+0x1ccc>
    2498:	98000d1e 	bne	r19,zero,24d0 <___vfprintf_internal_r+0x1e98>
    249c:	d8c14d17 	ldw	r3,1332(sp)
    24a0:	1880004c 	andi	r2,r3,1
    24a4:	10000a1e 	bne	r2,zero,24d0 <___vfprintf_internal_r+0x1e98>
    24a8:	01000044 	movi	r4,1
    24ac:	200f883a 	mov	r7,r4
    24b0:	d9014615 	stw	r4,1304(sp)
    24b4:	003f4a06 	br	21e0 <___vfprintf_internal_r+0x1ba8>
    24b8:	3cc00017 	ldw	r19,0(r7)
    24bc:	39c00104 	addi	r7,r7,4
    24c0:	983d0e0e 	bge	r19,zero,18fc <___vfprintf_internal_r+0x12c4>
    24c4:	b8c00007 	ldb	r3,0(r23)
    24c8:	04ffffc4 	movi	r19,-1
    24cc:	0038d906 	br	834 <___vfprintf_internal_r+0x1fc>
    24d0:	9cc00084 	addi	r19,r19,2
    24d4:	dcc14615 	stw	r19,1304(sp)
    24d8:	980f883a 	mov	r7,r19
    24dc:	983f400e 	bge	r19,zero,21e0 <___vfprintf_internal_r+0x1ba8>
    24e0:	003f7306 	br	22b0 <___vfprintf_internal_r+0x1c78>

000024e4 <__vfprintf_internal>:
    24e4:	00800074 	movhi	r2,1
    24e8:	108e7f04 	addi	r2,r2,14844
    24ec:	2013883a 	mov	r9,r4
    24f0:	11000017 	ldw	r4,0(r2)
    24f4:	2805883a 	mov	r2,r5
    24f8:	300f883a 	mov	r7,r6
    24fc:	480b883a 	mov	r5,r9
    2500:	100d883a 	mov	r6,r2
    2504:	00006381 	jmpi	638 <___vfprintf_internal_r>

00002508 <__svfscanf_r>:
    2508:	deff4e04 	addi	sp,sp,-712
    250c:	dd80ae15 	stw	r22,696(sp)
    2510:	dd00ac15 	stw	r20,688(sp)
    2514:	dc40a915 	stw	r17,676(sp)
    2518:	dc00a815 	stw	r16,672(sp)
    251c:	dfc0b115 	stw	ra,708(sp)
    2520:	df00b015 	stw	fp,704(sp)
    2524:	ddc0af15 	stw	r23,700(sp)
    2528:	dd40ad15 	stw	r21,692(sp)
    252c:	dcc0ab15 	stw	r19,684(sp)
    2530:	dc80aa15 	stw	r18,680(sp)
    2534:	202d883a 	mov	r22,r4
    2538:	2821883a 	mov	r16,r5
    253c:	d9c0a415 	stw	r7,656(sp)
    2540:	3029883a 	mov	r20,r6
    2544:	d800a215 	stw	zero,648(sp)
    2548:	0023883a 	mov	r17,zero
    254c:	d800a115 	stw	zero,644(sp)
    2550:	d800a015 	stw	zero,640(sp)
    2554:	a1000007 	ldb	r4,0(r20)
    2558:	d9000115 	stw	r4,4(sp)
    255c:	20001f26 	beq	r4,zero,25dc <__svfscanf_r+0xd4>
    2560:	04800074 	movhi	r18,1
    2564:	948e7e04 	addi	r18,r18,14840
    2568:	91800017 	ldw	r6,0(r18)
    256c:	a5000044 	addi	r20,r20,1
    2570:	3107883a 	add	r3,r6,r4
    2574:	18800003 	ldbu	r2,0(r3)
    2578:	1080020c 	andi	r2,r2,8
    257c:	10002426 	beq	r2,zero,2610 <__svfscanf_r+0x108>
    2580:	80c00117 	ldw	r3,4(r16)
    2584:	00c00e0e 	bge	zero,r3,25c0 <__svfscanf_r+0xb8>
    2588:	81400017 	ldw	r5,0(r16)
    258c:	90800017 	ldw	r2,0(r18)
    2590:	28c00003 	ldbu	r3,0(r5)
    2594:	1887883a 	add	r3,r3,r2
    2598:	19000003 	ldbu	r4,0(r3)
    259c:	2100020c 	andi	r4,r4,8
    25a0:	203fec26 	beq	r4,zero,2554 <__svfscanf_r+0x4c>
    25a4:	80c00117 	ldw	r3,4(r16)
    25a8:	29800044 	addi	r6,r5,1
    25ac:	8c400044 	addi	r17,r17,1
    25b0:	18ffffc4 	addi	r3,r3,-1
    25b4:	81800015 	stw	r6,0(r16)
    25b8:	80c00115 	stw	r3,4(r16)
    25bc:	00fff216 	blt	zero,r3,2588 <__svfscanf_r+0x80>
    25c0:	b009883a 	mov	r4,r22
    25c4:	800b883a 	mov	r5,r16
    25c8:	0008ac00 	call	8ac0 <__srefill_r>
    25cc:	103fee26 	beq	r2,zero,2588 <__svfscanf_r+0x80>
    25d0:	a1000007 	ldb	r4,0(r20)
    25d4:	d9000115 	stw	r4,4(sp)
    25d8:	203fe11e 	bne	r4,zero,2560 <__svfscanf_r+0x58>
    25dc:	d880a217 	ldw	r2,648(sp)
    25e0:	dfc0b117 	ldw	ra,708(sp)
    25e4:	df00b017 	ldw	fp,704(sp)
    25e8:	ddc0af17 	ldw	r23,700(sp)
    25ec:	dd80ae17 	ldw	r22,696(sp)
    25f0:	dd40ad17 	ldw	r21,692(sp)
    25f4:	dd00ac17 	ldw	r20,688(sp)
    25f8:	dcc0ab17 	ldw	r19,684(sp)
    25fc:	dc80aa17 	ldw	r18,680(sp)
    2600:	dc40a917 	ldw	r17,676(sp)
    2604:	dc00a817 	ldw	r16,672(sp)
    2608:	dec0b204 	addi	sp,sp,712
    260c:	f800283a 	ret
    2610:	00800944 	movi	r2,37
    2614:	20801626 	beq	r4,r2,2670 <__svfscanf_r+0x168>
    2618:	80800117 	ldw	r2,4(r16)
    261c:	00800b0e 	bge	zero,r2,264c <__svfscanf_r+0x144>
    2620:	81000017 	ldw	r4,0(r16)
    2624:	a0ffffc7 	ldb	r3,-1(r20)
    2628:	20800003 	ldbu	r2,0(r4)
    262c:	10ffeb1e 	bne	r2,r3,25dc <__svfscanf_r+0xd4>
    2630:	80c00117 	ldw	r3,4(r16)
    2634:	21800044 	addi	r6,r4,1
    2638:	8c400044 	addi	r17,r17,1
    263c:	18ffffc4 	addi	r3,r3,-1
    2640:	80c00115 	stw	r3,4(r16)
    2644:	81800015 	stw	r6,0(r16)
    2648:	003fc206 	br	2554 <__svfscanf_r+0x4c>
    264c:	b009883a 	mov	r4,r22
    2650:	800b883a 	mov	r5,r16
    2654:	0008ac00 	call	8ac0 <__srefill_r>
    2658:	103ff126 	beq	r2,zero,2620 <__svfscanf_r+0x118>
    265c:	d900a217 	ldw	r4,648(sp)
    2660:	2004c91e 	bne	r4,zero,3988 <__svfscanf_r+0x1480>
    2664:	00bfffc4 	movi	r2,-1
    2668:	d880a215 	stw	r2,648(sp)
    266c:	003fdb06 	br	25dc <__svfscanf_r+0xd4>
    2670:	d800a315 	stw	zero,652(sp)
    2674:	0027883a 	mov	r19,zero
    2678:	a0c00003 	ldbu	r3,0(r20)
    267c:	00801e04 	movi	r2,120
    2680:	a5000044 	addi	r20,r20,1
    2684:	19403fcc 	andi	r5,r3,255
    2688:	2940201c 	xori	r5,r5,128
    268c:	297fe004 	addi	r5,r5,-128
    2690:	10c08036 	bltu	r2,r3,2894 <__svfscanf_r+0x38c>
    2694:	18c5883a 	add	r2,r3,r3
    2698:	1085883a 	add	r2,r2,r2
    269c:	00c00034 	movhi	r3,0
    26a0:	18c9ac04 	addi	r3,r3,9904
    26a4:	10c5883a 	add	r2,r2,r3
    26a8:	11000017 	ldw	r4,0(r2)
    26ac:	2000683a 	jmp	r4
    26b0:	00002664 	muli	zero,zero,153
    26b4:	00002894 	movui	zero,162
    26b8:	00002894 	movui	zero,162
    26bc:	00002894 	movui	zero,162
    26c0:	00002894 	movui	zero,162
    26c4:	00002894 	movui	zero,162
    26c8:	00002894 	movui	zero,162
    26cc:	00002894 	movui	zero,162
    26d0:	00002894 	movui	zero,162
    26d4:	00002894 	movui	zero,162
    26d8:	00002894 	movui	zero,162
    26dc:	00002894 	movui	zero,162
    26e0:	00002894 	movui	zero,162
    26e4:	00002894 	movui	zero,162
    26e8:	00002894 	movui	zero,162
    26ec:	00002894 	movui	zero,162
    26f0:	00002894 	movui	zero,162
    26f4:	00002894 	movui	zero,162
    26f8:	00002894 	movui	zero,162
    26fc:	00002894 	movui	zero,162
    2700:	00002894 	movui	zero,162
    2704:	00002894 	movui	zero,162
    2708:	00002894 	movui	zero,162
    270c:	00002894 	movui	zero,162
    2710:	00002894 	movui	zero,162
    2714:	00002894 	movui	zero,162
    2718:	00002894 	movui	zero,162
    271c:	00002894 	movui	zero,162
    2720:	00002894 	movui	zero,162
    2724:	00002894 	movui	zero,162
    2728:	00002894 	movui	zero,162
    272c:	00002894 	movui	zero,162
    2730:	00002894 	movui	zero,162
    2734:	00002894 	movui	zero,162
    2738:	00002894 	movui	zero,162
    273c:	00002894 	movui	zero,162
    2740:	00002894 	movui	zero,162
    2744:	00002618 	cmpnei	zero,zero,152
    2748:	00002894 	movui	zero,162
    274c:	00002894 	movui	zero,162
    2750:	00002894 	movui	zero,162
    2754:	00002894 	movui	zero,162
    2758:	000038b8 	rdprs	zero,zero,226
    275c:	00002894 	movui	zero,162
    2760:	00002894 	movui	zero,162
    2764:	00002894 	movui	zero,162
    2768:	00002894 	movui	zero,162
    276c:	00002894 	movui	zero,162
    2770:	000032b4 	movhi	zero,202
    2774:	000032b4 	movhi	zero,202
    2778:	000032b4 	movhi	zero,202
    277c:	000032b4 	movhi	zero,202
    2780:	000032b4 	movhi	zero,202
    2784:	000032b4 	movhi	zero,202
    2788:	000032b4 	movhi	zero,202
    278c:	000032b4 	movhi	zero,202
    2790:	000032b4 	movhi	zero,202
    2794:	000032b4 	movhi	zero,202
    2798:	00002894 	movui	zero,162
    279c:	00002894 	movui	zero,162
    27a0:	00002894 	movui	zero,162
    27a4:	00002894 	movui	zero,162
    27a8:	00002894 	movui	zero,162
    27ac:	00002894 	movui	zero,162
    27b0:	00002894 	movui	zero,162
    27b4:	00002894 	movui	zero,162
    27b8:	00002894 	movui	zero,162
    27bc:	00002894 	movui	zero,162
    27c0:	00003a34 	movhi	zero,232
    27c4:	00003a2c 	andhi	zero,zero,232
    27c8:	00002894 	movui	zero,162
    27cc:	00003a2c 	andhi	zero,zero,232
    27d0:	00002894 	movui	zero,162
    27d4:	00002894 	movui	zero,162
    27d8:	00002894 	movui	zero,162
    27dc:	00002894 	movui	zero,162
    27e0:	00003ac4 	movi	zero,235
    27e4:	00002894 	movui	zero,162
    27e8:	00002894 	movui	zero,162
    27ec:	00003a7c 	xorhi	zero,zero,233
    27f0:	00002894 	movui	zero,162
    27f4:	00002894 	movui	zero,162
    27f8:	00002894 	movui	zero,162
    27fc:	00002894 	movui	zero,162
    2800:	00002894 	movui	zero,162
    2804:	00002894 	movui	zero,162
    2808:	00002894 	movui	zero,162
    280c:	00002894 	movui	zero,162
    2810:	000038c0 	call	38c <main+0x1e8>
    2814:	00002894 	movui	zero,162
    2818:	00002894 	movui	zero,162
    281c:	00003a60 	cmpeqi	zero,zero,233
    2820:	00002894 	movui	zero,162
    2824:	00002894 	movui	zero,162
    2828:	00002894 	movui	zero,162
    282c:	00002894 	movui	zero,162
    2830:	00002894 	movui	zero,162
    2834:	00002894 	movui	zero,162
    2838:	00002894 	movui	zero,162
    283c:	00003a54 	movui	zero,233
    2840:	00003a38 	rdprs	zero,zero,232
    2844:	00003a2c 	andhi	zero,zero,232
    2848:	00003a2c 	andhi	zero,zero,232
    284c:	00003a2c 	andhi	zero,zero,232
    2850:	00003a24 	muli	zero,zero,232
    2854:	00003b18 	cmpnei	zero,zero,236
    2858:	00002894 	movui	zero,162
    285c:	00002894 	movui	zero,162
    2860:	00003b04 	movi	zero,236
    2864:	00002894 	movui	zero,162
    2868:	00003a9c 	xori	zero,zero,234
    286c:	00003a80 	call	3a8 <__fixsfsi+0x18>
    2870:	00003ad4 	movui	zero,235
    2874:	00002894 	movui	zero,162
    2878:	00002894 	movui	zero,162
    287c:	00003acc 	andi	zero,zero,235
    2880:	00002894 	movui	zero,162
    2884:	00002e04 	movi	zero,184
    2888:	00002894 	movui	zero,162
    288c:	00002894 	movui	zero,162
    2890:	000038c0 	call	38c <main+0x1e8>
    2894:	2987883a 	add	r3,r5,r6
    2898:	18800003 	ldbu	r2,0(r3)
    289c:	1080004c 	andi	r2,r2,1
    28a0:	1005003a 	cmpeq	r2,r2,zero
    28a4:	10002c26 	beq	r2,zero,2958 <__svfscanf_r+0x450>
    28a8:	01000074 	movhi	r4,1
    28ac:	212a0104 	addi	r4,r4,-22524
    28b0:	00800284 	movi	r2,10
    28b4:	d900a015 	stw	r4,640(sp)
    28b8:	054000c4 	movi	r21,3
    28bc:	d880a115 	stw	r2,644(sp)
    28c0:	80c00117 	ldw	r3,4(r16)
    28c4:	00c14a0e 	bge	zero,r3,2df0 <__svfscanf_r+0x8e8>
    28c8:	9880100c 	andi	r2,r19,64
    28cc:	10001326 	beq	r2,zero,291c <__svfscanf_r+0x414>
    28d0:	00800104 	movi	r2,4
    28d4:	157f1f36 	bltu	r2,r21,2554 <__svfscanf_r+0x4c>
    28d8:	ad45883a 	add	r2,r21,r21
    28dc:	1085883a 	add	r2,r2,r2
    28e0:	00c00034 	movhi	r3,0
    28e4:	18ca3d04 	addi	r3,r3,10484
    28e8:	10c5883a 	add	r2,r2,r3
    28ec:	11000017 	ldw	r4,0(r2)
    28f0:	2000683a 	jmp	r4
    28f4:	00002960 	cmpeqi	zero,zero,165
    28f8:	00002a6c 	andhi	zero,zero,169
    28fc:	00002ae0 	cmpeqi	zero,zero,171
    2900:	00002dcc 	andi	zero,zero,183
    2904:	00002c18 	cmpnei	zero,zero,176
    2908:	b009883a 	mov	r4,r22
    290c:	800b883a 	mov	r5,r16
    2910:	0008ac00 	call	8ac0 <__srefill_r>
    2914:	103f511e 	bne	r2,zero,265c <__svfscanf_r+0x154>
    2918:	8c400044 	addi	r17,r17,1
    291c:	81400017 	ldw	r5,0(r16)
    2920:	90800017 	ldw	r2,0(r18)
    2924:	28c00003 	ldbu	r3,0(r5)
    2928:	1887883a 	add	r3,r3,r2
    292c:	19000003 	ldbu	r4,0(r3)
    2930:	2100020c 	andi	r4,r4,8
    2934:	203fe626 	beq	r4,zero,28d0 <__svfscanf_r+0x3c8>
    2938:	80c00117 	ldw	r3,4(r16)
    293c:	18ffffc4 	addi	r3,r3,-1
    2940:	80c00115 	stw	r3,4(r16)
    2944:	00fff00e 	bge	zero,r3,2908 <__svfscanf_r+0x400>
    2948:	29800044 	addi	r6,r5,1
    294c:	8c400044 	addi	r17,r17,1
    2950:	81800015 	stw	r6,0(r16)
    2954:	003ff106 	br	291c <__svfscanf_r+0x414>
    2958:	9cc00054 	ori	r19,r19,1
    295c:	003fd206 	br	28a8 <__svfscanf_r+0x3a0>
    2960:	d8c0a317 	ldw	r3,652(sp)
    2964:	1800021e 	bne	r3,zero,2970 <__svfscanf_r+0x468>
    2968:	01000044 	movi	r4,1
    296c:	d900a315 	stw	r4,652(sp)
    2970:	9880004c 	andi	r2,r19,1
    2974:	1005003a 	cmpeq	r2,r2,zero
    2978:	1003d91e 	bne	r2,zero,38e0 <__svfscanf_r+0x13d8>
    297c:	9d40040c 	andi	r21,r19,16
    2980:	a839003a 	cmpeq	fp,r21,zero
    2984:	e0042526 	beq	fp,zero,3a1c <__svfscanf_r+0x1514>
    2988:	d880a417 	ldw	r2,656(sp)
    298c:	14c00017 	ldw	r19,0(r2)
    2990:	10800104 	addi	r2,r2,4
    2994:	d880a415 	stw	r2,656(sp)
    2998:	d8c0a317 	ldw	r3,652(sp)
    299c:	18041a26 	beq	r3,zero,3a08 <__svfscanf_r+0x1500>
    29a0:	01000074 	movhi	r4,1
    29a4:	210e8104 	addi	r4,r4,14852
    29a8:	20800017 	ldw	r2,0(r4)
    29ac:	103f2b26 	beq	r2,zero,265c <__svfscanf_r+0x154>
    29b0:	d8804404 	addi	r2,sp,272
    29b4:	0025883a 	mov	r18,zero
    29b8:	d880a615 	stw	r2,664(sp)
    29bc:	05ffffc4 	movi	r23,-1
    29c0:	80800017 	ldw	r2,0(r16)
    29c4:	80c00117 	ldw	r3,4(r16)
    29c8:	d900a617 	ldw	r4,664(sp)
    29cc:	12000003 	ldbu	r8,0(r2)
    29d0:	18ffffc4 	addi	r3,r3,-1
    29d4:	11800044 	addi	r6,r2,1
    29d8:	248f883a 	add	r7,r4,r18
    29dc:	80c00115 	stw	r3,4(r16)
    29e0:	81800015 	stw	r6,0(r16)
    29e4:	3a000005 	stb	r8,0(r7)
    29e8:	d9000204 	addi	r4,sp,8
    29ec:	000b883a 	mov	r5,zero
    29f0:	01800204 	movi	r6,8
    29f4:	00074400 	call	7440 <memset>
    29f8:	d980a617 	ldw	r6,664(sp)
    29fc:	94800044 	addi	r18,r18,1
    2a00:	d8800204 	addi	r2,sp,8
    2a04:	b009883a 	mov	r4,r22
    2a08:	980b883a 	mov	r5,r19
    2a0c:	900f883a 	mov	r7,r18
    2a10:	d8800015 	stw	r2,0(sp)
    2a14:	00070dc0 	call	70dc <_mbrtowc_r>
    2a18:	1007883a 	mov	r3,r2
    2a1c:	15ff0f26 	beq	r2,r23,265c <__svfscanf_r+0x154>
    2a20:	1003f11e 	bne	r2,zero,39e8 <__svfscanf_r+0x14e0>
    2a24:	a800011e 	bne	r21,zero,2a2c <__svfscanf_r+0x524>
    2a28:	98000015 	stw	zero,0(r19)
    2a2c:	d8c0a317 	ldw	r3,652(sp)
    2a30:	8ca3883a 	add	r17,r17,r18
    2a34:	18ffffc4 	addi	r3,r3,-1
    2a38:	d8c0a315 	stw	r3,652(sp)
    2a3c:	e0000126 	beq	fp,zero,2a44 <__svfscanf_r+0x53c>
    2a40:	9cc00104 	addi	r19,r19,4
    2a44:	0025883a 	mov	r18,zero
    2a48:	80c00117 	ldw	r3,4(r16)
    2a4c:	00c3e90e 	bge	zero,r3,39f4 <__svfscanf_r+0x14ec>
    2a50:	d900a317 	ldw	r4,652(sp)
    2a54:	2003ec26 	beq	r4,zero,3a08 <__svfscanf_r+0x1500>
    2a58:	00c00074 	movhi	r3,1
    2a5c:	18ce8104 	addi	r3,r3,14852
    2a60:	18800017 	ldw	r2,0(r3)
    2a64:	90bfd61e 	bne	r18,r2,29c0 <__svfscanf_r+0x4b8>
    2a68:	003efc06 	br	265c <__svfscanf_r+0x154>
    2a6c:	d880a317 	ldw	r2,652(sp)
    2a70:	1000021e 	bne	r2,zero,2a7c <__svfscanf_r+0x574>
    2a74:	00ffffc4 	movi	r3,-1
    2a78:	d8c0a315 	stw	r3,652(sp)
    2a7c:	9880040c 	andi	r2,r19,16
    2a80:	10036526 	beq	r2,zero,3818 <__svfscanf_r+0x1310>
    2a84:	0027883a 	mov	r19,zero
    2a88:	dd400404 	addi	r21,sp,16
    2a8c:	81000017 	ldw	r4,0(r16)
    2a90:	20800003 	ldbu	r2,0(r4)
    2a94:	a885883a 	add	r2,r21,r2
    2a98:	10c00007 	ldb	r3,0(r2)
    2a9c:	1803be26 	beq	r3,zero,3998 <__svfscanf_r+0x1490>
    2aa0:	80c00117 	ldw	r3,4(r16)
    2aa4:	21800044 	addi	r6,r4,1
    2aa8:	d900a317 	ldw	r4,652(sp)
    2aac:	18ffffc4 	addi	r3,r3,-1
    2ab0:	9cc00044 	addi	r19,r19,1
    2ab4:	81800015 	stw	r6,0(r16)
    2ab8:	80c00115 	stw	r3,4(r16)
    2abc:	24c3b626 	beq	r4,r19,3998 <__svfscanf_r+0x1490>
    2ac0:	00fff216 	blt	zero,r3,2a8c <__svfscanf_r+0x584>
    2ac4:	b009883a 	mov	r4,r22
    2ac8:	800b883a 	mov	r5,r16
    2acc:	0008ac00 	call	8ac0 <__srefill_r>
    2ad0:	103fee26 	beq	r2,zero,2a8c <__svfscanf_r+0x584>
    2ad4:	983ee126 	beq	r19,zero,265c <__svfscanf_r+0x154>
    2ad8:	8ce3883a 	add	r17,r17,r19
    2adc:	003e9d06 	br	2554 <__svfscanf_r+0x4c>
    2ae0:	d900a317 	ldw	r4,652(sp)
    2ae4:	2000021e 	bne	r4,zero,2af0 <__svfscanf_r+0x5e8>
    2ae8:	00bfffc4 	movi	r2,-1
    2aec:	d880a315 	stw	r2,652(sp)
    2af0:	9880004c 	andi	r2,r19,1
    2af4:	1005003a 	cmpeq	r2,r2,zero
    2af8:	1001f41e 	bne	r2,zero,32cc <__svfscanf_r+0xdc4>
    2afc:	9dc0040c 	andi	r23,r19,16
    2b00:	b807003a 	cmpeq	r3,r23,zero
    2b04:	d8c0a515 	stw	r3,660(sp)
    2b08:	1803b21e 	bne	r3,zero,39d4 <__svfscanf_r+0x14cc>
    2b0c:	dd400104 	addi	r21,sp,4
    2b10:	0027883a 	mov	r19,zero
    2b14:	073fffc4 	movi	fp,-1
    2b18:	81400017 	ldw	r5,0(r16)
    2b1c:	90800017 	ldw	r2,0(r18)
    2b20:	29c00003 	ldbu	r7,0(r5)
    2b24:	38c03fcc 	andi	r3,r7,255
    2b28:	1887883a 	add	r3,r3,r2
    2b2c:	19000003 	ldbu	r4,0(r3)
    2b30:	2100020c 	andi	r4,r4,8
    2b34:	2000321e 	bne	r4,zero,2c00 <__svfscanf_r+0x6f8>
    2b38:	d8c0a317 	ldw	r3,652(sp)
    2b3c:	18003026 	beq	r3,zero,2c00 <__svfscanf_r+0x6f8>
    2b40:	00800074 	movhi	r2,1
    2b44:	108e8104 	addi	r2,r2,14852
    2b48:	10c00017 	ldw	r3,0(r2)
    2b4c:	98fec326 	beq	r19,r3,265c <__svfscanf_r+0x154>
    2b50:	d8c04404 	addi	r3,sp,272
    2b54:	80800117 	ldw	r2,4(r16)
    2b58:	d8c0a615 	stw	r3,664(sp)
    2b5c:	d900a617 	ldw	r4,664(sp)
    2b60:	10ffffc4 	addi	r3,r2,-1
    2b64:	29800044 	addi	r6,r5,1
    2b68:	80c00115 	stw	r3,4(r16)
    2b6c:	24c5883a 	add	r2,r4,r19
    2b70:	81800015 	stw	r6,0(r16)
    2b74:	d9000204 	addi	r4,sp,8
    2b78:	000b883a 	mov	r5,zero
    2b7c:	01800204 	movi	r6,8
    2b80:	11c00005 	stb	r7,0(r2)
    2b84:	00074400 	call	7440 <memset>
    2b88:	d980a617 	ldw	r6,664(sp)
    2b8c:	9cc00044 	addi	r19,r19,1
    2b90:	d8800204 	addi	r2,sp,8
    2b94:	b009883a 	mov	r4,r22
    2b98:	a80b883a 	mov	r5,r21
    2b9c:	980f883a 	mov	r7,r19
    2ba0:	d8800015 	stw	r2,0(sp)
    2ba4:	00070dc0 	call	70dc <_mbrtowc_r>
    2ba8:	1007883a 	mov	r3,r2
    2bac:	173eab26 	beq	r2,fp,265c <__svfscanf_r+0x154>
    2bb0:	1003851e 	bne	r2,zero,39c8 <__svfscanf_r+0x14c0>
    2bb4:	a8000015 	stw	zero,0(r21)
    2bb8:	a9000017 	ldw	r4,0(r21)
    2bbc:	00067180 	call	6718 <iswspace>
    2bc0:	1003781e 	bne	r2,zero,39a4 <__svfscanf_r+0x149c>
    2bc4:	d900a317 	ldw	r4,652(sp)
    2bc8:	d880a517 	ldw	r2,660(sp)
    2bcc:	8ce3883a 	add	r17,r17,r19
    2bd0:	213fffc4 	addi	r4,r4,-1
    2bd4:	d900a315 	stw	r4,652(sp)
    2bd8:	10000126 	beq	r2,zero,2be0 <__svfscanf_r+0x6d8>
    2bdc:	ad400104 	addi	r21,r21,4
    2be0:	0027883a 	mov	r19,zero
    2be4:	80c00117 	ldw	r3,4(r16)
    2be8:	00ffcb16 	blt	zero,r3,2b18 <__svfscanf_r+0x610>
    2bec:	b009883a 	mov	r4,r22
    2bf0:	800b883a 	mov	r5,r16
    2bf4:	0008ac00 	call	8ac0 <__srefill_r>
    2bf8:	103fc726 	beq	r2,zero,2b18 <__svfscanf_r+0x610>
    2bfc:	983e971e 	bne	r19,zero,265c <__svfscanf_r+0x154>
    2c00:	b83e541e 	bne	r23,zero,2554 <__svfscanf_r+0x4c>
    2c04:	d900a217 	ldw	r4,648(sp)
    2c08:	a8000015 	stw	zero,0(r21)
    2c0c:	21000044 	addi	r4,r4,1
    2c10:	d900a215 	stw	r4,648(sp)
    2c14:	003e4f06 	br	2554 <__svfscanf_r+0x4c>
    2c18:	d900a317 	ldw	r4,652(sp)
    2c1c:	00805704 	movi	r2,348
    2c20:	20ffffc4 	addi	r3,r4,-1
    2c24:	10c1ed2e 	bgeu	r2,r3,33dc <__svfscanf_r+0xed4>
    2c28:	00805744 	movi	r2,349
    2c2c:	21bfa8c4 	addi	r6,r4,-349
    2c30:	9d41e014 	ori	r21,r19,1920
    2c34:	d880a315 	stw	r2,652(sp)
    2c38:	d8c04404 	addi	r3,sp,272
    2c3c:	d8c0a615 	stw	r3,664(sp)
    2c40:	182f883a 	mov	r23,r3
    2c44:	d8009f15 	stw	zero,636(sp)
    2c48:	d8009e15 	stw	zero,632(sp)
    2c4c:	d8009d15 	stw	zero,628(sp)
    2c50:	d8009c15 	stw	zero,624(sp)
    2c54:	0039883a 	mov	fp,zero
    2c58:	0025883a 	mov	r18,zero
    2c5c:	80800017 	ldw	r2,0(r16)
    2c60:	11400003 	ldbu	r5,0(r2)
    2c64:	00801384 	movi	r2,78
    2c68:	28fff544 	addi	r3,r5,-43
    2c6c:	18c03fcc 	andi	r3,r3,255
    2c70:	10c07d36 	bltu	r2,r3,2e68 <__svfscanf_r+0x960>
    2c74:	18c5883a 	add	r2,r3,r3
    2c78:	1085883a 	add	r2,r2,r2
    2c7c:	00c00034 	movhi	r3,0
    2c80:	18cb2404 	addi	r3,r3,11408
    2c84:	10c5883a 	add	r2,r2,r3
    2c88:	11000017 	ldw	r4,0(r2)
    2c8c:	2000683a 	jmp	r4
    2c90:	00002e20 	cmpeqi	zero,zero,184
    2c94:	00002e68 	cmpgeui	zero,zero,185
    2c98:	00002e20 	cmpeqi	zero,zero,184
    2c9c:	00002fb4 	movhi	zero,190
    2ca0:	00002e68 	cmpgeui	zero,zero,185
    2ca4:	00002fec 	andhi	zero,zero,191
    2ca8:	00003020 	cmpeqi	zero,zero,192
    2cac:	00003020 	cmpeqi	zero,zero,192
    2cb0:	00003020 	cmpeqi	zero,zero,192
    2cb4:	00003020 	cmpeqi	zero,zero,192
    2cb8:	00003020 	cmpeqi	zero,zero,192
    2cbc:	00003020 	cmpeqi	zero,zero,192
    2cc0:	00003020 	cmpeqi	zero,zero,192
    2cc4:	00003020 	cmpeqi	zero,zero,192
    2cc8:	00003020 	cmpeqi	zero,zero,192
    2ccc:	00002e68 	cmpgeui	zero,zero,185
    2cd0:	00002e68 	cmpgeui	zero,zero,185
    2cd4:	00002e68 	cmpgeui	zero,zero,185
    2cd8:	00002e68 	cmpgeui	zero,zero,185
    2cdc:	00002e68 	cmpgeui	zero,zero,185
    2ce0:	00002e68 	cmpgeui	zero,zero,185
    2ce4:	00002e68 	cmpgeui	zero,zero,185
    2ce8:	00003040 	call	304 <main+0x160>
    2cec:	00002e68 	cmpgeui	zero,zero,185
    2cf0:	00002e68 	cmpgeui	zero,zero,185
    2cf4:	00002e68 	cmpgeui	zero,zero,185
    2cf8:	00003050 	cmplti	zero,zero,193
    2cfc:	000030ec 	andhi	zero,zero,195
    2d00:	00002e68 	cmpgeui	zero,zero,185
    2d04:	00002e68 	cmpgeui	zero,zero,185
    2d08:	00003108 	cmpgei	zero,zero,196
    2d0c:	00002e68 	cmpgeui	zero,zero,185
    2d10:	00002e68 	cmpgeui	zero,zero,185
    2d14:	00002e68 	cmpgeui	zero,zero,185
    2d18:	00002e68 	cmpgeui	zero,zero,185
    2d1c:	00003134 	movhi	zero,196
    2d20:	00002e68 	cmpgeui	zero,zero,185
    2d24:	00002e68 	cmpgeui	zero,zero,185
    2d28:	00002e68 	cmpgeui	zero,zero,185
    2d2c:	00002e68 	cmpgeui	zero,zero,185
    2d30:	00002e68 	cmpgeui	zero,zero,185
    2d34:	00003188 	cmpgei	zero,zero,198
    2d38:	00002e68 	cmpgeui	zero,zero,185
    2d3c:	00002e68 	cmpgeui	zero,zero,185
    2d40:	00002e68 	cmpgeui	zero,zero,185
    2d44:	00002e68 	cmpgeui	zero,zero,185
    2d48:	00003298 	cmpnei	zero,zero,202
    2d4c:	00002e68 	cmpgeui	zero,zero,185
    2d50:	00002e68 	cmpgeui	zero,zero,185
    2d54:	00002e68 	cmpgeui	zero,zero,185
    2d58:	00002e68 	cmpgeui	zero,zero,185
    2d5c:	00002e68 	cmpgeui	zero,zero,185
    2d60:	00002e68 	cmpgeui	zero,zero,185
    2d64:	00002e68 	cmpgeui	zero,zero,185
    2d68:	00003040 	call	304 <main+0x160>
    2d6c:	00002e68 	cmpgeui	zero,zero,185
    2d70:	00002e68 	cmpgeui	zero,zero,185
    2d74:	00002e68 	cmpgeui	zero,zero,185
    2d78:	00003050 	cmplti	zero,zero,193
    2d7c:	000030ec 	andhi	zero,zero,195
    2d80:	00002e68 	cmpgeui	zero,zero,185
    2d84:	00002e68 	cmpgeui	zero,zero,185
    2d88:	00003108 	cmpgei	zero,zero,196
    2d8c:	00002e68 	cmpgeui	zero,zero,185
    2d90:	00002e68 	cmpgeui	zero,zero,185
    2d94:	00002e68 	cmpgeui	zero,zero,185
    2d98:	00002e68 	cmpgeui	zero,zero,185
    2d9c:	00003134 	movhi	zero,196
    2da0:	00002e68 	cmpgeui	zero,zero,185
    2da4:	00002e68 	cmpgeui	zero,zero,185
    2da8:	00002e68 	cmpgeui	zero,zero,185
    2dac:	00002e68 	cmpgeui	zero,zero,185
    2db0:	00002e68 	cmpgeui	zero,zero,185
    2db4:	00003188 	cmpgei	zero,zero,198
    2db8:	00002e68 	cmpgeui	zero,zero,185
    2dbc:	00002e68 	cmpgeui	zero,zero,185
    2dc0:	00002e68 	cmpgeui	zero,zero,185
    2dc4:	00002e68 	cmpgeui	zero,zero,185
    2dc8:	00003298 	cmpnei	zero,zero,202
    2dcc:	d900a317 	ldw	r4,652(sp)
    2dd0:	00805704 	movi	r2,348
    2dd4:	20ffffc4 	addi	r3,r4,-1
    2dd8:	10c18c2e 	bgeu	r2,r3,340c <__svfscanf_r+0xf04>
    2ddc:	00805744 	movi	r2,349
    2de0:	257fa8c4 	addi	r21,r4,-349
    2de4:	9c836014 	ori	r18,r19,3456
    2de8:	d880a315 	stw	r2,652(sp)
    2dec:	0001a106 	br	3474 <__svfscanf_r+0xf6c>
    2df0:	b009883a 	mov	r4,r22
    2df4:	800b883a 	mov	r5,r16
    2df8:	0008ac00 	call	8ac0 <__srefill_r>
    2dfc:	103eb226 	beq	r2,zero,28c8 <__svfscanf_r+0x3c0>
    2e00:	003e1606 	br	265c <__svfscanf_r+0x154>
    2e04:	01000284 	movi	r4,10
    2e08:	00800074 	movhi	r2,1
    2e0c:	10ab6104 	addi	r2,r2,-21116
    2e10:	054000c4 	movi	r21,3
    2e14:	d900a115 	stw	r4,644(sp)
    2e18:	d880a015 	stw	r2,640(sp)
    2e1c:	003ea806 	br	28c0 <__svfscanf_r+0x3b8>
    2e20:	a880200c 	andi	r2,r21,128
    2e24:	10001026 	beq	r2,zero,2e68 <__svfscanf_r+0x960>
    2e28:	00bfdfc4 	movi	r2,-129
    2e2c:	a8aa703a 	and	r21,r21,r2
    2e30:	b9400005 	stb	r5,0(r23)
    2e34:	bdc00044 	addi	r23,r23,1
    2e38:	80c00117 	ldw	r3,4(r16)
    2e3c:	8c400044 	addi	r17,r17,1
    2e40:	18bfffc4 	addi	r2,r3,-1
    2e44:	80800115 	stw	r2,4(r16)
    2e48:	0080610e 	bge	zero,r2,2fd0 <__svfscanf_r+0xac8>
    2e4c:	80800017 	ldw	r2,0(r16)
    2e50:	10800044 	addi	r2,r2,1
    2e54:	80800015 	stw	r2,0(r16)
    2e58:	d880a317 	ldw	r2,652(sp)
    2e5c:	10bfffc4 	addi	r2,r2,-1
    2e60:	d880a315 	stw	r2,652(sp)
    2e64:	103f7d1e 	bne	r2,zero,2c5c <__svfscanf_r+0x754>
    2e68:	d8c09e17 	ldw	r3,632(sp)
    2e6c:	18000226 	beq	r3,zero,2e78 <__svfscanf_r+0x970>
    2e70:	00bfbfc4 	movi	r2,-257
    2e74:	a8aa703a 	and	r21,r21,r2
    2e78:	90ffffc4 	addi	r3,r18,-1
    2e7c:	00800044 	movi	r2,1
    2e80:	10c0cd2e 	bgeu	r2,r3,31b8 <__svfscanf_r+0xcb0>
    2e84:	e1003fcc 	andi	r4,fp,255
    2e88:	2100201c 	xori	r4,r4,128
    2e8c:	213fe004 	addi	r4,r4,-128
    2e90:	20ffffc4 	addi	r3,r4,-1
    2e94:	00800184 	movi	r2,6
    2e98:	10c01736 	bltu	r2,r3,2ef8 <__svfscanf_r+0x9f0>
    2e9c:	00c00084 	movi	r3,2
    2ea0:	1900880e 	bge	r3,r4,30c4 <__svfscanf_r+0xbbc>
    2ea4:	008000c4 	movi	r2,3
    2ea8:	1100130e 	bge	r2,r4,2ef8 <__svfscanf_r+0x9f0>
    2eac:	e4ffffc4 	addi	r19,fp,-1
    2eb0:	b825883a 	mov	r18,r23
    2eb4:	94bfffc4 	addi	r18,r18,-1
    2eb8:	91400007 	ldb	r5,0(r18)
    2ebc:	b009883a 	mov	r4,r22
    2ec0:	800d883a 	mov	r6,r16
    2ec4:	000b3a40 	call	b3a4 <_ungetc_r>
    2ec8:	9cffffc4 	addi	r19,r19,-1
    2ecc:	98c03fcc 	andi	r3,r19,255
    2ed0:	18c0201c 	xori	r3,r3,128
    2ed4:	18ffe004 	addi	r3,r3,-128
    2ed8:	00800084 	movi	r2,2
    2edc:	18bff51e 	bne	r3,r2,2eb4 <__svfscanf_r+0x9ac>
    2ee0:	e0bfff04 	addi	r2,fp,-4
    2ee4:	10803fcc 	andi	r2,r2,255
    2ee8:	b887c83a 	sub	r3,r23,r2
    2eec:	8885c83a 	sub	r2,r17,r2
    2ef0:	147fffc4 	addi	r17,r2,-1
    2ef4:	1dffffc4 	addi	r23,r3,-1
    2ef8:	a880400c 	andi	r2,r21,256
    2efc:	10001226 	beq	r2,zero,2f48 <__svfscanf_r+0xa40>
    2f00:	a881000c 	andi	r2,r21,1024
    2f04:	1000651e 	bne	r2,zero,309c <__svfscanf_r+0xb94>
    2f08:	bdffffc4 	addi	r23,r23,-1
    2f0c:	b9400007 	ldb	r5,0(r23)
    2f10:	00801944 	movi	r2,101
    2f14:	8c7fffc4 	addi	r17,r17,-1
    2f18:	28800826 	beq	r5,r2,2f3c <__svfscanf_r+0xa34>
    2f1c:	00801144 	movi	r2,69
    2f20:	28800626 	beq	r5,r2,2f3c <__svfscanf_r+0xa34>
    2f24:	bdffffc4 	addi	r23,r23,-1
    2f28:	b009883a 	mov	r4,r22
    2f2c:	800d883a 	mov	r6,r16
    2f30:	000b3a40 	call	b3a4 <_ungetc_r>
    2f34:	b9400007 	ldb	r5,0(r23)
    2f38:	8c7fffc4 	addi	r17,r17,-1
    2f3c:	b009883a 	mov	r4,r22
    2f40:	800d883a 	mov	r6,r16
    2f44:	000b3a40 	call	b3a4 <_ungetc_r>
    2f48:	a880040c 	andi	r2,r21,16
    2f4c:	103d811e 	bne	r2,zero,2554 <__svfscanf_r+0x4c>
    2f50:	a8c1800c 	andi	r3,r21,1536
    2f54:	00810004 	movi	r2,1024
    2f58:	b8000005 	stb	zero,0(r23)
    2f5c:	1880bb26 	beq	r3,r2,324c <__svfscanf_r+0xd44>
    2f60:	d8809d17 	ldw	r2,628(sp)
    2f64:	1000a61e 	bne	r2,zero,3200 <__svfscanf_r+0xcf8>
    2f68:	d940a617 	ldw	r5,664(sp)
    2f6c:	b009883a 	mov	r4,r22
    2f70:	000d883a 	mov	r6,zero
    2f74:	00091e00 	call	91e0 <_strtod_r>
    2f78:	a900004c 	andi	r4,r21,1
    2f7c:	2009003a 	cmpeq	r4,r4,zero
    2f80:	1025883a 	mov	r18,r2
    2f84:	1827883a 	mov	r19,r3
    2f88:	2000951e 	bne	r4,zero,31e0 <__svfscanf_r+0xcd8>
    2f8c:	d8c0a417 	ldw	r3,656(sp)
    2f90:	18800017 	ldw	r2,0(r3)
    2f94:	1d400104 	addi	r21,r3,4
    2f98:	14c00115 	stw	r19,4(r2)
    2f9c:	14800015 	stw	r18,0(r2)
    2fa0:	d8c0a217 	ldw	r3,648(sp)
    2fa4:	dd40a415 	stw	r21,656(sp)
    2fa8:	18c00044 	addi	r3,r3,1
    2fac:	d8c0a215 	stw	r3,648(sp)
    2fb0:	003d6806 	br	2554 <__svfscanf_r+0x4c>
    2fb4:	a880800c 	andi	r2,r21,512
    2fb8:	103fab26 	beq	r2,zero,2e68 <__svfscanf_r+0x960>
    2fbc:	d9009e17 	ldw	r4,632(sp)
    2fc0:	00bf5fc4 	movi	r2,-641
    2fc4:	a8aa703a 	and	r21,r21,r2
    2fc8:	d9009f15 	stw	r4,636(sp)
    2fcc:	003f9806 	br	2e30 <__svfscanf_r+0x928>
    2fd0:	b009883a 	mov	r4,r22
    2fd4:	800b883a 	mov	r5,r16
    2fd8:	d980a715 	stw	r6,668(sp)
    2fdc:	0008ac00 	call	8ac0 <__srefill_r>
    2fe0:	d980a717 	ldw	r6,668(sp)
    2fe4:	103f9c26 	beq	r2,zero,2e58 <__svfscanf_r+0x950>
    2fe8:	003f9f06 	br	2e68 <__svfscanf_r+0x960>
    2fec:	a880400c 	andi	r2,r21,256
    2ff0:	10000b26 	beq	r2,zero,3020 <__svfscanf_r+0xb18>
    2ff4:	00bfdfc4 	movi	r2,-129
    2ff8:	a8aa703a 	and	r21,r21,r2
    2ffc:	d8809e17 	ldw	r2,632(sp)
    3000:	10800044 	addi	r2,r2,1
    3004:	d8809e15 	stw	r2,632(sp)
    3008:	303f8b26 	beq	r6,zero,2e38 <__svfscanf_r+0x930>
    300c:	d8c0a317 	ldw	r3,652(sp)
    3010:	31bfffc4 	addi	r6,r6,-1
    3014:	18c00044 	addi	r3,r3,1
    3018:	d8c0a315 	stw	r3,652(sp)
    301c:	003f8606 	br	2e38 <__svfscanf_r+0x930>
    3020:	e0803fcc 	andi	r2,fp,255
    3024:	1080201c 	xori	r2,r2,128
    3028:	10bfe004 	addi	r2,r2,-128
    302c:	9085883a 	add	r2,r18,r2
    3030:	103f8d1e 	bne	r2,zero,2e68 <__svfscanf_r+0x960>
    3034:	00bf9fc4 	movi	r2,-385
    3038:	a8aa703a 	and	r21,r21,r2
    303c:	003f7c06 	br	2e30 <__svfscanf_r+0x928>
    3040:	00800044 	movi	r2,1
    3044:	90bf881e 	bne	r18,r2,2e68 <__svfscanf_r+0x960>
    3048:	04800084 	movi	r18,2
    304c:	003f7806 	br	2e30 <__svfscanf_r+0x928>
    3050:	a8c1400c 	andi	r3,r21,1280
    3054:	00810004 	movi	r2,1024
    3058:	18800426 	beq	r3,r2,306c <__svfscanf_r+0xb64>
    305c:	a884703a 	and	r2,r21,r2
    3060:	103f8126 	beq	r2,zero,2e68 <__svfscanf_r+0x960>
    3064:	d8809e17 	ldw	r2,632(sp)
    3068:	103f8326 	beq	r2,zero,2e78 <__svfscanf_r+0x970>
    306c:	a880800c 	andi	r2,r21,512
    3070:	1000051e 	bne	r2,zero,3088 <__svfscanf_r+0xb80>
    3074:	d8c09e17 	ldw	r3,632(sp)
    3078:	d9009f17 	ldw	r4,636(sp)
    307c:	ddc09c15 	stw	r23,624(sp)
    3080:	1907c83a 	sub	r3,r3,r4
    3084:	d8c09d15 	stw	r3,628(sp)
    3088:	00be7fc4 	movi	r2,-1537
    308c:	a884703a 	and	r2,r21,r2
    3090:	15406014 	ori	r21,r2,384
    3094:	d8009e15 	stw	zero,632(sp)
    3098:	003f6506 	br	2e30 <__svfscanf_r+0x928>
    309c:	d900a617 	ldw	r4,664(sp)
    30a0:	25fd4e2e 	bgeu	r4,r23,25dc <__svfscanf_r+0xd4>
    30a4:	bdffffc4 	addi	r23,r23,-1
    30a8:	b9400007 	ldb	r5,0(r23)
    30ac:	b009883a 	mov	r4,r22
    30b0:	800d883a 	mov	r6,r16
    30b4:	000b3a40 	call	b3a4 <_ungetc_r>
    30b8:	d880a617 	ldw	r2,664(sp)
    30bc:	15fff936 	bltu	r2,r23,30a4 <__svfscanf_r+0xb9c>
    30c0:	003d4606 	br	25dc <__svfscanf_r+0xd4>
    30c4:	d900a617 	ldw	r4,664(sp)
    30c8:	25fd442e 	bgeu	r4,r23,25dc <__svfscanf_r+0xd4>
    30cc:	bdffffc4 	addi	r23,r23,-1
    30d0:	b9400007 	ldb	r5,0(r23)
    30d4:	b009883a 	mov	r4,r22
    30d8:	800d883a 	mov	r6,r16
    30dc:	000b3a40 	call	b3a4 <_ungetc_r>
    30e0:	d8c0a617 	ldw	r3,664(sp)
    30e4:	1dfff936 	bltu	r3,r23,30cc <__svfscanf_r+0xbc4>
    30e8:	003d3c06 	br	25dc <__svfscanf_r+0xd4>
    30ec:	e0c03fcc 	andi	r3,fp,255
    30f0:	18c0201c 	xori	r3,r3,128
    30f4:	18ffe004 	addi	r3,r3,-128
    30f8:	00800084 	movi	r2,2
    30fc:	18bf5a1e 	bne	r3,r2,2e68 <__svfscanf_r+0x960>
    3100:	070000c4 	movi	fp,3
    3104:	003f4a06 	br	2e30 <__svfscanf_r+0x928>
    3108:	e0c03fcc 	andi	r3,fp,255
    310c:	18c0201c 	xori	r3,r3,128
    3110:	18ffe004 	addi	r3,r3,-128
    3114:	1800231e 	bne	r3,zero,31a4 <__svfscanf_r+0xc9c>
    3118:	a8c1c00c 	andi	r3,r21,1792
    311c:	0081c004 	movi	r2,1792
    3120:	18bf511e 	bne	r3,r2,2e68 <__svfscanf_r+0x960>
    3124:	00be1fc4 	movi	r2,-1921
    3128:	a8aa703a 	and	r21,r21,r2
    312c:	07000044 	movi	fp,1
    3130:	003f3f06 	br	2e30 <__svfscanf_r+0x928>
    3134:	9000101e 	bne	r18,zero,3178 <__svfscanf_r+0xc70>
    3138:	a8c1c00c 	andi	r3,r21,1792
    313c:	0081c004 	movi	r2,1792
    3140:	18800926 	beq	r3,r2,3168 <__svfscanf_r+0xc60>
    3144:	e0c03fcc 	andi	r3,fp,255
    3148:	18c0201c 	xori	r3,r3,128
    314c:	18ffe004 	addi	r3,r3,-128
    3150:	00800044 	movi	r2,1
    3154:	18800226 	beq	r3,r2,3160 <__svfscanf_r+0xc58>
    3158:	00800104 	movi	r2,4
    315c:	18bf421e 	bne	r3,r2,2e68 <__svfscanf_r+0x960>
    3160:	e7000044 	addi	fp,fp,1
    3164:	003f3206 	br	2e30 <__svfscanf_r+0x928>
    3168:	00be1fc4 	movi	r2,-1921
    316c:	a8aa703a 	and	r21,r21,r2
    3170:	04800044 	movi	r18,1
    3174:	003f2e06 	br	2e30 <__svfscanf_r+0x928>
    3178:	00800084 	movi	r2,2
    317c:	90bff11e 	bne	r18,r2,3144 <__svfscanf_r+0xc3c>
    3180:	048000c4 	movi	r18,3
    3184:	003f2a06 	br	2e30 <__svfscanf_r+0x928>
    3188:	e0c03fcc 	andi	r3,fp,255
    318c:	18c0201c 	xori	r3,r3,128
    3190:	18ffe004 	addi	r3,r3,-128
    3194:	00800184 	movi	r2,6
    3198:	18bf331e 	bne	r3,r2,2e68 <__svfscanf_r+0x960>
    319c:	070001c4 	movi	fp,7
    31a0:	003f2306 	br	2e30 <__svfscanf_r+0x928>
    31a4:	008000c4 	movi	r2,3
    31a8:	18bfed26 	beq	r3,r2,3160 <__svfscanf_r+0xc58>
    31ac:	00800144 	movi	r2,5
    31b0:	18bfeb26 	beq	r3,r2,3160 <__svfscanf_r+0xc58>
    31b4:	003f2c06 	br	2e68 <__svfscanf_r+0x960>
    31b8:	d900a617 	ldw	r4,664(sp)
    31bc:	25fd072e 	bgeu	r4,r23,25dc <__svfscanf_r+0xd4>
    31c0:	bdffffc4 	addi	r23,r23,-1
    31c4:	b9400007 	ldb	r5,0(r23)
    31c8:	b009883a 	mov	r4,r22
    31cc:	800d883a 	mov	r6,r16
    31d0:	000b3a40 	call	b3a4 <_ungetc_r>
    31d4:	d880a617 	ldw	r2,664(sp)
    31d8:	15fff936 	bltu	r2,r23,31c0 <__svfscanf_r+0xcb8>
    31dc:	003cff06 	br	25dc <__svfscanf_r+0xd4>
    31e0:	a880008c 	andi	r2,r21,2
    31e4:	10002026 	beq	r2,zero,3268 <__svfscanf_r+0xd60>
    31e8:	d900a417 	ldw	r4,656(sp)
    31ec:	20800017 	ldw	r2,0(r4)
    31f0:	25400104 	addi	r21,r4,4
    31f4:	10c00115 	stw	r3,4(r2)
    31f8:	14800015 	stw	r18,0(r2)
    31fc:	003f6806 	br	2fa0 <__svfscanf_r+0xa98>
    3200:	d8c09c17 	ldw	r3,624(sp)
    3204:	b009883a 	mov	r4,r22
    3208:	000d883a 	mov	r6,zero
    320c:	19400044 	addi	r5,r3,1
    3210:	01c00284 	movi	r7,10
    3214:	000a8040 	call	a804 <_strtol_r>
    3218:	d9009d17 	ldw	r4,628(sp)
    321c:	110dc83a 	sub	r6,r2,r4
    3220:	d8c0a617 	ldw	r3,664(sp)
    3224:	d9009c17 	ldw	r4,624(sp)
    3228:	188054c4 	addi	r2,r3,339
    322c:	20800236 	bltu	r4,r2,3238 <__svfscanf_r+0xd30>
    3230:	18805484 	addi	r2,r3,338
    3234:	d8809c15 	stw	r2,624(sp)
    3238:	d9009c17 	ldw	r4,624(sp)
    323c:	01400074 	movhi	r5,1
    3240:	29463f04 	addi	r5,r5,6396
    3244:	0008e480 	call	8e48 <sprintf>
    3248:	003f4706 	br	2f68 <__svfscanf_r+0xa60>
    324c:	d8c09e17 	ldw	r3,632(sp)
    3250:	d9009f17 	ldw	r4,636(sp)
    3254:	1905c83a 	sub	r2,r3,r4
    3258:	103f4326 	beq	r2,zero,2f68 <__svfscanf_r+0xa60>
    325c:	008dc83a 	sub	r6,zero,r2
    3260:	ddc09c15 	stw	r23,624(sp)
    3264:	003fee06 	br	3220 <__svfscanf_r+0xd18>
    3268:	d880a417 	ldw	r2,656(sp)
    326c:	9009883a 	mov	r4,r18
    3270:	180b883a 	mov	r5,r3
    3274:	15c00017 	ldw	r23,0(r2)
    3278:	15400104 	addi	r21,r2,4
    327c:	0008ce00 	call	8ce0 <__isnand>
    3280:	10021c1e 	bne	r2,zero,3af4 <__svfscanf_r+0x15ec>
    3284:	980b883a 	mov	r5,r19
    3288:	9009883a 	mov	r4,r18
    328c:	000e3c80 	call	e3c8 <__truncdfsf2>
    3290:	b8800015 	stw	r2,0(r23)
    3294:	003f4206 	br	2fa0 <__svfscanf_r+0xa98>
    3298:	e0c03fcc 	andi	r3,fp,255
    329c:	18c0201c 	xori	r3,r3,128
    32a0:	18ffe004 	addi	r3,r3,-128
    32a4:	008001c4 	movi	r2,7
    32a8:	18beef1e 	bne	r3,r2,2e68 <__svfscanf_r+0x960>
    32ac:	07000204 	movi	fp,8
    32b0:	003edf06 	br	2e30 <__svfscanf_r+0x928>
    32b4:	d900a317 	ldw	r4,652(sp)
    32b8:	208002a4 	muli	r2,r4,10
    32bc:	1145883a 	add	r2,r2,r5
    32c0:	10bff404 	addi	r2,r2,-48
    32c4:	d880a315 	stw	r2,652(sp)
    32c8:	003ceb06 	br	2678 <__svfscanf_r+0x170>
    32cc:	9880040c 	andi	r2,r19,16
    32d0:	10001426 	beq	r2,zero,3324 <__svfscanf_r+0xe1c>
    32d4:	0027883a 	mov	r19,zero
    32d8:	00000906 	br	3300 <__svfscanf_r+0xdf8>
    32dc:	80c00117 	ldw	r3,4(r16)
    32e0:	d880a317 	ldw	r2,652(sp)
    32e4:	29800044 	addi	r6,r5,1
    32e8:	18ffffc4 	addi	r3,r3,-1
    32ec:	9cc00044 	addi	r19,r19,1
    32f0:	81800015 	stw	r6,0(r16)
    32f4:	80c00115 	stw	r3,4(r16)
    32f8:	14fdf726 	beq	r2,r19,2ad8 <__svfscanf_r+0x5d0>
    32fc:	00c02c0e 	bge	zero,r3,33b0 <__svfscanf_r+0xea8>
    3300:	81400017 	ldw	r5,0(r16)
    3304:	90800017 	ldw	r2,0(r18)
    3308:	28c00003 	ldbu	r3,0(r5)
    330c:	1887883a 	add	r3,r3,r2
    3310:	19000003 	ldbu	r4,0(r3)
    3314:	2100020c 	andi	r4,r4,8
    3318:	203ff026 	beq	r4,zero,32dc <__svfscanf_r+0xdd4>
    331c:	8ce3883a 	add	r17,r17,r19
    3320:	003c8c06 	br	2554 <__svfscanf_r+0x4c>
    3324:	d8c0a417 	ldw	r3,656(sp)
    3328:	1d400017 	ldw	r21,0(r3)
    332c:	a827883a 	mov	r19,r21
    3330:	00000e06 	br	336c <__svfscanf_r+0xe64>
    3334:	80800117 	ldw	r2,4(r16)
    3338:	d900a317 	ldw	r4,652(sp)
    333c:	29800044 	addi	r6,r5,1
    3340:	10ffffc4 	addi	r3,r2,-1
    3344:	213fffc4 	addi	r4,r4,-1
    3348:	d900a315 	stw	r4,652(sp)
    334c:	80c00115 	stw	r3,4(r16)
    3350:	28800003 	ldbu	r2,0(r5)
    3354:	98800005 	stb	r2,0(r19)
    3358:	81800015 	stw	r6,0(r16)
    335c:	9cc00044 	addi	r19,r19,1
    3360:	20000926 	beq	r4,zero,3388 <__svfscanf_r+0xe80>
    3364:	80800117 	ldw	r2,4(r16)
    3368:	0080170e 	bge	zero,r2,33c8 <__svfscanf_r+0xec0>
    336c:	81400017 	ldw	r5,0(r16)
    3370:	90800017 	ldw	r2,0(r18)
    3374:	28c00003 	ldbu	r3,0(r5)
    3378:	1887883a 	add	r3,r3,r2
    337c:	19000003 	ldbu	r4,0(r3)
    3380:	2100020c 	andi	r4,r4,8
    3384:	203feb26 	beq	r4,zero,3334 <__svfscanf_r+0xe2c>
    3388:	9d45c83a 	sub	r2,r19,r21
    338c:	d8c0a217 	ldw	r3,648(sp)
    3390:	88a3883a 	add	r17,r17,r2
    3394:	d880a417 	ldw	r2,656(sp)
    3398:	18c00044 	addi	r3,r3,1
    339c:	d8c0a215 	stw	r3,648(sp)
    33a0:	10800104 	addi	r2,r2,4
    33a4:	d880a415 	stw	r2,656(sp)
    33a8:	98000005 	stb	zero,0(r19)
    33ac:	003c6906 	br	2554 <__svfscanf_r+0x4c>
    33b0:	b009883a 	mov	r4,r22
    33b4:	800b883a 	mov	r5,r16
    33b8:	0008ac00 	call	8ac0 <__srefill_r>
    33bc:	103fd026 	beq	r2,zero,3300 <__svfscanf_r+0xdf8>
    33c0:	8ce3883a 	add	r17,r17,r19
    33c4:	003c6306 	br	2554 <__svfscanf_r+0x4c>
    33c8:	b009883a 	mov	r4,r22
    33cc:	800b883a 	mov	r5,r16
    33d0:	0008ac00 	call	8ac0 <__srefill_r>
    33d4:	103fe526 	beq	r2,zero,336c <__svfscanf_r+0xe64>
    33d8:	003feb06 	br	3388 <__svfscanf_r+0xe80>
    33dc:	d900a317 	ldw	r4,652(sp)
    33e0:	9d41e014 	ori	r21,r19,1920
    33e4:	2000821e 	bne	r4,zero,35f0 <__svfscanf_r+0x10e8>
    33e8:	d8c04404 	addi	r3,sp,272
    33ec:	182f883a 	mov	r23,r3
    33f0:	0039883a 	mov	fp,zero
    33f4:	d8c0a615 	stw	r3,664(sp)
    33f8:	d8009c15 	stw	zero,624(sp)
    33fc:	d8009d15 	stw	zero,628(sp)
    3400:	d8009f15 	stw	zero,636(sp)
    3404:	d8009e15 	stw	zero,632(sp)
    3408:	003e9e06 	br	2e84 <__svfscanf_r+0x97c>
    340c:	d900a317 	ldw	r4,652(sp)
    3410:	9c836014 	ori	r18,r19,3456
    3414:	2000161e 	bne	r4,zero,3470 <__svfscanf_r+0xf68>
    3418:	d8804404 	addi	r2,sp,272
    341c:	d880a615 	stw	r2,664(sp)
    3420:	002f883a 	mov	r23,zero
    3424:	1027883a 	mov	r19,r2
    3428:	9080400c 	andi	r2,r18,256
    342c:	10000926 	beq	r2,zero,3454 <__svfscanf_r+0xf4c>
    3430:	d8c0a617 	ldw	r3,664(sp)
    3434:	1cc0052e 	bgeu	r3,r19,344c <__svfscanf_r+0xf44>
    3438:	9cffffc4 	addi	r19,r19,-1
    343c:	99400007 	ldb	r5,0(r19)
    3440:	b009883a 	mov	r4,r22
    3444:	800d883a 	mov	r6,r16
    3448:	000b3a40 	call	b3a4 <_ungetc_r>
    344c:	d900a617 	ldw	r4,664(sp)
    3450:	24fc6226 	beq	r4,r19,25dc <__svfscanf_r+0xd4>
    3454:	9080040c 	andi	r2,r18,16
    3458:	10006726 	beq	r2,zero,35f8 <__svfscanf_r+0x10f0>
    345c:	d8c0a617 	ldw	r3,664(sp)
    3460:	98c5c83a 	sub	r2,r19,r3
    3464:	b885883a 	add	r2,r23,r2
    3468:	88a3883a 	add	r17,r17,r2
    346c:	003c3906 	br	2554 <__svfscanf_r+0x4c>
    3470:	002b883a 	mov	r21,zero
    3474:	d8c04404 	addi	r3,sp,272
    3478:	d8c0a615 	stw	r3,664(sp)
    347c:	002f883a 	mov	r23,zero
    3480:	1827883a 	mov	r19,r3
    3484:	81800017 	ldw	r6,0(r16)
    3488:	00c01344 	movi	r3,77
    348c:	31400003 	ldbu	r5,0(r6)
    3490:	28bff544 	addi	r2,r5,-43
    3494:	10803fcc 	andi	r2,r2,255
    3498:	18bfe336 	bltu	r3,r2,3428 <__svfscanf_r+0xf20>
    349c:	1085883a 	add	r2,r2,r2
    34a0:	1085883a 	add	r2,r2,r2
    34a4:	00c00034 	movhi	r3,0
    34a8:	18cd2e04 	addi	r3,r3,13496
    34ac:	10c5883a 	add	r2,r2,r3
    34b0:	11000017 	ldw	r4,0(r2)
    34b4:	2000683a 	jmp	r4
    34b8:	0000364c 	andi	zero,zero,217
    34bc:	00003428 	cmpgeui	zero,zero,208
    34c0:	0000364c 	andi	zero,zero,217
    34c4:	00003428 	cmpgeui	zero,zero,208
    34c8:	00003428 	cmpgeui	zero,zero,208
    34cc:	00003690 	cmplti	zero,zero,218
    34d0:	0000378c 	andi	zero,zero,222
    34d4:	0000378c 	andi	zero,zero,222
    34d8:	0000378c 	andi	zero,zero,222
    34dc:	0000378c 	andi	zero,zero,222
    34e0:	0000378c 	andi	zero,zero,222
    34e4:	0000378c 	andi	zero,zero,222
    34e8:	0000378c 	andi	zero,zero,222
    34ec:	000037b4 	movhi	zero,222
    34f0:	000037b4 	movhi	zero,222
    34f4:	00003428 	cmpgeui	zero,zero,208
    34f8:	00003428 	cmpgeui	zero,zero,208
    34fc:	00003428 	cmpgeui	zero,zero,208
    3500:	00003428 	cmpgeui	zero,zero,208
    3504:	00003428 	cmpgeui	zero,zero,208
    3508:	00003428 	cmpgeui	zero,zero,208
    350c:	00003428 	cmpgeui	zero,zero,208
    3510:	000037e4 	muli	zero,zero,223
    3514:	000037e4 	muli	zero,zero,223
    3518:	000037e4 	muli	zero,zero,223
    351c:	000037e4 	muli	zero,zero,223
    3520:	000037e4 	muli	zero,zero,223
    3524:	000037e4 	muli	zero,zero,223
    3528:	00003428 	cmpgeui	zero,zero,208
    352c:	00003428 	cmpgeui	zero,zero,208
    3530:	00003428 	cmpgeui	zero,zero,208
    3534:	00003428 	cmpgeui	zero,zero,208
    3538:	00003428 	cmpgeui	zero,zero,208
    353c:	00003428 	cmpgeui	zero,zero,208
    3540:	00003428 	cmpgeui	zero,zero,208
    3544:	00003428 	cmpgeui	zero,zero,208
    3548:	00003428 	cmpgeui	zero,zero,208
    354c:	00003428 	cmpgeui	zero,zero,208
    3550:	00003428 	cmpgeui	zero,zero,208
    3554:	00003428 	cmpgeui	zero,zero,208
    3558:	00003428 	cmpgeui	zero,zero,208
    355c:	00003428 	cmpgeui	zero,zero,208
    3560:	00003428 	cmpgeui	zero,zero,208
    3564:	00003428 	cmpgeui	zero,zero,208
    3568:	00003428 	cmpgeui	zero,zero,208
    356c:	000037f4 	movhi	zero,223
    3570:	00003428 	cmpgeui	zero,zero,208
    3574:	00003428 	cmpgeui	zero,zero,208
    3578:	00003428 	cmpgeui	zero,zero,208
    357c:	00003428 	cmpgeui	zero,zero,208
    3580:	00003428 	cmpgeui	zero,zero,208
    3584:	00003428 	cmpgeui	zero,zero,208
    3588:	00003428 	cmpgeui	zero,zero,208
    358c:	00003428 	cmpgeui	zero,zero,208
    3590:	000037e4 	muli	zero,zero,223
    3594:	000037e4 	muli	zero,zero,223
    3598:	000037e4 	muli	zero,zero,223
    359c:	000037e4 	muli	zero,zero,223
    35a0:	000037e4 	muli	zero,zero,223
    35a4:	000037e4 	muli	zero,zero,223
    35a8:	00003428 	cmpgeui	zero,zero,208
    35ac:	00003428 	cmpgeui	zero,zero,208
    35b0:	00003428 	cmpgeui	zero,zero,208
    35b4:	00003428 	cmpgeui	zero,zero,208
    35b8:	00003428 	cmpgeui	zero,zero,208
    35bc:	00003428 	cmpgeui	zero,zero,208
    35c0:	00003428 	cmpgeui	zero,zero,208
    35c4:	00003428 	cmpgeui	zero,zero,208
    35c8:	00003428 	cmpgeui	zero,zero,208
    35cc:	00003428 	cmpgeui	zero,zero,208
    35d0:	00003428 	cmpgeui	zero,zero,208
    35d4:	00003428 	cmpgeui	zero,zero,208
    35d8:	00003428 	cmpgeui	zero,zero,208
    35dc:	00003428 	cmpgeui	zero,zero,208
    35e0:	00003428 	cmpgeui	zero,zero,208
    35e4:	00003428 	cmpgeui	zero,zero,208
    35e8:	00003428 	cmpgeui	zero,zero,208
    35ec:	000037f4 	movhi	zero,223
    35f0:	000d883a 	mov	r6,zero
    35f4:	003d9006 	br	2c38 <__svfscanf_r+0x730>
    35f8:	98000005 	stb	zero,0(r19)
    35fc:	d8c0a017 	ldw	r3,640(sp)
    3600:	d940a617 	ldw	r5,664(sp)
    3604:	d9c0a117 	ldw	r7,644(sp)
    3608:	b009883a 	mov	r4,r22
    360c:	000d883a 	mov	r6,zero
    3610:	183ee83a 	callr	r3
    3614:	1007883a 	mov	r3,r2
    3618:	9080080c 	andi	r2,r18,32
    361c:	10004d1e 	bne	r2,zero,3754 <__svfscanf_r+0x124c>
    3620:	9080010c 	andi	r2,r18,4
    3624:	10003426 	beq	r2,zero,36f8 <__svfscanf_r+0x11f0>
    3628:	d900a417 	ldw	r4,656(sp)
    362c:	20800017 	ldw	r2,0(r4)
    3630:	21000104 	addi	r4,r4,4
    3634:	d900a415 	stw	r4,656(sp)
    3638:	10c0000d 	sth	r3,0(r2)
    363c:	d880a217 	ldw	r2,648(sp)
    3640:	10800044 	addi	r2,r2,1
    3644:	d880a215 	stw	r2,648(sp)
    3648:	003f8406 	br	345c <__svfscanf_r+0xf54>
    364c:	9080200c 	andi	r2,r18,128
    3650:	103f7526 	beq	r2,zero,3428 <__svfscanf_r+0xf20>
    3654:	00bfdfc4 	movi	r2,-129
    3658:	90a4703a 	and	r18,r18,r2
    365c:	99400005 	stb	r5,0(r19)
    3660:	9cc00044 	addi	r19,r19,1
    3664:	80c00117 	ldw	r3,4(r16)
    3668:	18ffffc4 	addi	r3,r3,-1
    366c:	80c00115 	stw	r3,4(r16)
    3670:	00c0130e 	bge	zero,r3,36c0 <__svfscanf_r+0x11b8>
    3674:	31800044 	addi	r6,r6,1
    3678:	81800015 	stw	r6,0(r16)
    367c:	d880a317 	ldw	r2,652(sp)
    3680:	10bfffc4 	addi	r2,r2,-1
    3684:	d880a315 	stw	r2,652(sp)
    3688:	103f7e1e 	bne	r2,zero,3484 <__svfscanf_r+0xf7c>
    368c:	003f6606 	br	3428 <__svfscanf_r+0xf20>
    3690:	9082000c 	andi	r2,r18,2048
    3694:	103ff126 	beq	r2,zero,365c <__svfscanf_r+0x1154>
    3698:	d8c0a117 	ldw	r3,644(sp)
    369c:	1800031e 	bne	r3,zero,36ac <__svfscanf_r+0x11a4>
    36a0:	01000204 	movi	r4,8
    36a4:	94808014 	ori	r18,r18,512
    36a8:	d900a115 	stw	r4,644(sp)
    36ac:	9081000c 	andi	r2,r18,1024
    36b0:	10000826 	beq	r2,zero,36d4 <__svfscanf_r+0x11cc>
    36b4:	00be9fc4 	movi	r2,-1409
    36b8:	90a4703a 	and	r18,r18,r2
    36bc:	003fe706 	br	365c <__svfscanf_r+0x1154>
    36c0:	b009883a 	mov	r4,r22
    36c4:	800b883a 	mov	r5,r16
    36c8:	0008ac00 	call	8ac0 <__srefill_r>
    36cc:	103feb26 	beq	r2,zero,367c <__svfscanf_r+0x1174>
    36d0:	003f5506 	br	3428 <__svfscanf_r+0xf20>
    36d4:	a8000426 	beq	r21,zero,36e8 <__svfscanf_r+0x11e0>
    36d8:	d880a317 	ldw	r2,652(sp)
    36dc:	ad7fffc4 	addi	r21,r21,-1
    36e0:	10800044 	addi	r2,r2,1
    36e4:	d880a315 	stw	r2,652(sp)
    36e8:	00bf1fc4 	movi	r2,-897
    36ec:	90a4703a 	and	r18,r18,r2
    36f0:	bdc00044 	addi	r23,r23,1
    36f4:	003fdb06 	br	3664 <__svfscanf_r+0x115c>
    36f8:	9080004c 	andi	r2,r18,1
    36fc:	1005003a 	cmpeq	r2,r2,zero
    3700:	10001426 	beq	r2,zero,3754 <__svfscanf_r+0x124c>
    3704:	9080008c 	andi	r2,r18,2
    3708:	10001226 	beq	r2,zero,3754 <__svfscanf_r+0x124c>
    370c:	d8c0a017 	ldw	r3,640(sp)
    3710:	00800074 	movhi	r2,1
    3714:	10ab6104 	addi	r2,r2,-21116
    3718:	18801426 	beq	r3,r2,376c <__svfscanf_r+0x1264>
    371c:	d9c0a117 	ldw	r7,644(sp)
    3720:	d940a617 	ldw	r5,664(sp)
    3724:	000d883a 	mov	r6,zero
    3728:	b009883a 	mov	r4,r22
    372c:	000aa6c0 	call	aa6c <_strtoll_r>
    3730:	100d883a 	mov	r6,r2
    3734:	180f883a 	mov	r7,r3
    3738:	d900a417 	ldw	r4,656(sp)
    373c:	20800017 	ldw	r2,0(r4)
    3740:	21000104 	addi	r4,r4,4
    3744:	d900a415 	stw	r4,656(sp)
    3748:	11c00115 	stw	r7,4(r2)
    374c:	11800015 	stw	r6,0(r2)
    3750:	003fba06 	br	363c <__svfscanf_r+0x1134>
    3754:	d900a417 	ldw	r4,656(sp)
    3758:	20800017 	ldw	r2,0(r4)
    375c:	21000104 	addi	r4,r4,4
    3760:	d900a415 	stw	r4,656(sp)
    3764:	10c00015 	stw	r3,0(r2)
    3768:	003fb406 	br	363c <__svfscanf_r+0x1134>
    376c:	d9c0a117 	ldw	r7,644(sp)
    3770:	d940a617 	ldw	r5,664(sp)
    3774:	000d883a 	mov	r6,zero
    3778:	b009883a 	mov	r4,r22
    377c:	000afd80 	call	afd8 <_strtoull_r>
    3780:	100d883a 	mov	r6,r2
    3784:	180f883a 	mov	r7,r3
    3788:	003feb06 	br	3738 <__svfscanf_r+0x1230>
    378c:	d8c0a117 	ldw	r3,644(sp)
    3790:	18c5883a 	add	r2,r3,r3
    3794:	00c00074 	movhi	r3,1
    3798:	18c64104 	addi	r3,r3,6404
    379c:	10c5883a 	add	r2,r2,r3
    37a0:	1080000f 	ldh	r2,0(r2)
    37a4:	00fd1fc4 	movi	r3,-2945
    37a8:	90e4703a 	and	r18,r18,r3
    37ac:	d880a115 	stw	r2,644(sp)
    37b0:	003faa06 	br	365c <__svfscanf_r+0x1154>
    37b4:	d900a117 	ldw	r4,644(sp)
    37b8:	00c00074 	movhi	r3,1
    37bc:	18c64104 	addi	r3,r3,6404
    37c0:	2105883a 	add	r2,r4,r4
    37c4:	10c5883a 	add	r2,r2,r3
    37c8:	1080000f 	ldh	r2,0(r2)
    37cc:	00c00204 	movi	r3,8
    37d0:	d880a115 	stw	r2,644(sp)
    37d4:	18bf140e 	bge	r3,r2,3428 <__svfscanf_r+0xf20>
    37d8:	00bd1fc4 	movi	r2,-2945
    37dc:	90a4703a 	and	r18,r18,r2
    37e0:	003f9e06 	br	365c <__svfscanf_r+0x1154>
    37e4:	d8c0a117 	ldw	r3,644(sp)
    37e8:	00800284 	movi	r2,10
    37ec:	10fffa16 	blt	r2,r3,37d8 <__svfscanf_r+0x12d0>
    37f0:	003f0d06 	br	3428 <__svfscanf_r+0xf20>
    37f4:	90c1800c 	andi	r3,r18,1536
    37f8:	00808004 	movi	r2,512
    37fc:	18bf0a1e 	bne	r3,r2,3428 <__svfscanf_r+0xf20>
    3800:	00bf7fc4 	movi	r2,-513
    3804:	9084703a 	and	r2,r18,r2
    3808:	01000404 	movi	r4,16
    380c:	14814014 	ori	r18,r2,1280
    3810:	d900a115 	stw	r4,644(sp)
    3814:	003f9106 	br	365c <__svfscanf_r+0x1154>
    3818:	d880a417 	ldw	r2,656(sp)
    381c:	dd400404 	addi	r21,sp,16
    3820:	14800017 	ldw	r18,0(r2)
    3824:	9027883a 	mov	r19,r18
    3828:	81000017 	ldw	r4,0(r16)
    382c:	20800003 	ldbu	r2,0(r4)
    3830:	a885883a 	add	r2,r21,r2
    3834:	10c00007 	ldb	r3,0(r2)
    3838:	18001426 	beq	r3,zero,388c <__svfscanf_r+0x1384>
    383c:	d8c0a317 	ldw	r3,652(sp)
    3840:	80800117 	ldw	r2,4(r16)
    3844:	21800044 	addi	r6,r4,1
    3848:	18ffffc4 	addi	r3,r3,-1
    384c:	d8c0a315 	stw	r3,652(sp)
    3850:	10ffffc4 	addi	r3,r2,-1
    3854:	80c00115 	stw	r3,4(r16)
    3858:	20800003 	ldbu	r2,0(r4)
    385c:	90800005 	stb	r2,0(r18)
    3860:	d900a317 	ldw	r4,652(sp)
    3864:	81800015 	stw	r6,0(r16)
    3868:	94800044 	addi	r18,r18,1
    386c:	20000726 	beq	r4,zero,388c <__svfscanf_r+0x1384>
    3870:	80800117 	ldw	r2,4(r16)
    3874:	00bfec16 	blt	zero,r2,3828 <__svfscanf_r+0x1320>
    3878:	b009883a 	mov	r4,r22
    387c:	800b883a 	mov	r5,r16
    3880:	0008ac00 	call	8ac0 <__srefill_r>
    3884:	103fe826 	beq	r2,zero,3828 <__svfscanf_r+0x1320>
    3888:	9cbb7426 	beq	r19,r18,265c <__svfscanf_r+0x154>
    388c:	94e7c83a 	sub	r19,r18,r19
    3890:	983b5226 	beq	r19,zero,25dc <__svfscanf_r+0xd4>
    3894:	90000005 	stb	zero,0(r18)
    3898:	d880a417 	ldw	r2,656(sp)
    389c:	d8c0a217 	ldw	r3,648(sp)
    38a0:	8ce3883a 	add	r17,r17,r19
    38a4:	10800104 	addi	r2,r2,4
    38a8:	18c00044 	addi	r3,r3,1
    38ac:	d880a415 	stw	r2,656(sp)
    38b0:	d8c0a215 	stw	r3,648(sp)
    38b4:	003b2706 	br	2554 <__svfscanf_r+0x4c>
    38b8:	9cc00414 	ori	r19,r19,16
    38bc:	003b6e06 	br	2678 <__svfscanf_r+0x170>
    38c0:	00c00404 	movi	r3,16
    38c4:	01000074 	movhi	r4,1
    38c8:	212b6104 	addi	r4,r4,-21116
    38cc:	9cc08014 	ori	r19,r19,512
    38d0:	054000c4 	movi	r21,3
    38d4:	d8c0a115 	stw	r3,644(sp)
    38d8:	d900a015 	stw	r4,640(sp)
    38dc:	003bf806 	br	28c0 <__svfscanf_r+0x3b8>
    38e0:	9880040c 	andi	r2,r19,16
    38e4:	10001926 	beq	r2,zero,394c <__svfscanf_r+0x1444>
    38e8:	0027883a 	mov	r19,zero
    38ec:	00000b06 	br	391c <__svfscanf_r+0x1414>
    38f0:	80800017 	ldw	r2,0(r16)
    38f4:	b009883a 	mov	r4,r22
    38f8:	800b883a 	mov	r5,r16
    38fc:	148d883a 	add	r6,r2,r18
    3900:	81800015 	stw	r6,0(r16)
    3904:	9ca7883a 	add	r19,r19,r18
    3908:	0008ac00 	call	8ac0 <__srefill_r>
    390c:	103c711e 	bne	r2,zero,2ad4 <__svfscanf_r+0x5cc>
    3910:	d900a317 	ldw	r4,652(sp)
    3914:	2489c83a 	sub	r4,r4,r18
    3918:	d900a315 	stw	r4,652(sp)
    391c:	84800117 	ldw	r18,4(r16)
    3920:	d8c0a317 	ldw	r3,652(sp)
    3924:	90fff216 	blt	r18,r3,38f0 <__svfscanf_r+0x13e8>
    3928:	d900a317 	ldw	r4,652(sp)
    392c:	80800017 	ldw	r2,0(r16)
    3930:	9927883a 	add	r19,r19,r4
    3934:	9107c83a 	sub	r3,r18,r4
    3938:	110d883a 	add	r6,r2,r4
    393c:	8ce3883a 	add	r17,r17,r19
    3940:	80c00115 	stw	r3,4(r16)
    3944:	81800015 	stw	r6,0(r16)
    3948:	003b0206 	br	2554 <__svfscanf_r+0x4c>
    394c:	d880a417 	ldw	r2,656(sp)
    3950:	d980a317 	ldw	r6,652(sp)
    3954:	01400044 	movi	r5,1
    3958:	11000017 	ldw	r4,0(r2)
    395c:	800f883a 	mov	r7,r16
    3960:	0005c7c0 	call	5c7c <fread>
    3964:	103b3d26 	beq	r2,zero,265c <__svfscanf_r+0x154>
    3968:	d8c0a417 	ldw	r3,656(sp)
    396c:	d900a217 	ldw	r4,648(sp)
    3970:	88a3883a 	add	r17,r17,r2
    3974:	18c00104 	addi	r3,r3,4
    3978:	21000044 	addi	r4,r4,1
    397c:	d8c0a415 	stw	r3,656(sp)
    3980:	d900a215 	stw	r4,648(sp)
    3984:	003af306 	br	2554 <__svfscanf_r+0x4c>
    3988:	8080030b 	ldhu	r2,12(r16)
    398c:	1080100c 	andi	r2,r2,64
    3990:	103b1226 	beq	r2,zero,25dc <__svfscanf_r+0xd4>
    3994:	003b3306 	br	2664 <__svfscanf_r+0x15c>
    3998:	983b1026 	beq	r19,zero,25dc <__svfscanf_r+0xd4>
    399c:	8ce3883a 	add	r17,r17,r19
    39a0:	003aec06 	br	2554 <__svfscanf_r+0x4c>
    39a4:	983c9626 	beq	r19,zero,2c00 <__svfscanf_r+0x6f8>
    39a8:	9cffffc4 	addi	r19,r19,-1
    39ac:	d8c04404 	addi	r3,sp,272
    39b0:	1cc5883a 	add	r2,r3,r19
    39b4:	11400003 	ldbu	r5,0(r2)
    39b8:	b009883a 	mov	r4,r22
    39bc:	800d883a 	mov	r6,r16
    39c0:	000b3a40 	call	b3a4 <_ungetc_r>
    39c4:	003ff706 	br	39a4 <__svfscanf_r+0x149c>
    39c8:	00bfff84 	movi	r2,-2
    39cc:	18bc7a1e 	bne	r3,r2,2bb8 <__svfscanf_r+0x6b0>
    39d0:	003c8406 	br	2be4 <__svfscanf_r+0x6dc>
    39d4:	d900a417 	ldw	r4,656(sp)
    39d8:	25400017 	ldw	r21,0(r4)
    39dc:	21000104 	addi	r4,r4,4
    39e0:	d900a415 	stw	r4,656(sp)
    39e4:	003c4a06 	br	2b10 <__svfscanf_r+0x608>
    39e8:	00bfff84 	movi	r2,-2
    39ec:	18bc0f1e 	bne	r3,r2,2a2c <__svfscanf_r+0x524>
    39f0:	003c1506 	br	2a48 <__svfscanf_r+0x540>
    39f4:	b009883a 	mov	r4,r22
    39f8:	800b883a 	mov	r5,r16
    39fc:	0008ac00 	call	8ac0 <__srefill_r>
    3a00:	103c1326 	beq	r2,zero,2a50 <__svfscanf_r+0x548>
    3a04:	903b151e 	bne	r18,zero,265c <__svfscanf_r+0x154>
    3a08:	a83ad21e 	bne	r21,zero,2554 <__svfscanf_r+0x4c>
    3a0c:	d880a217 	ldw	r2,648(sp)
    3a10:	10800044 	addi	r2,r2,1
    3a14:	d880a215 	stw	r2,648(sp)
    3a18:	003ace06 	br	2554 <__svfscanf_r+0x4c>
    3a1c:	0027883a 	mov	r19,zero
    3a20:	003bdd06 	br	2998 <__svfscanf_r+0x490>
    3a24:	9cc00114 	ori	r19,r19,4
    3a28:	003b1306 	br	2678 <__svfscanf_r+0x170>
    3a2c:	05400104 	movi	r21,4
    3a30:	003ba306 	br	28c0 <__svfscanf_r+0x3b8>
    3a34:	9cc00054 	ori	r19,r19,1
    3a38:	00800074 	movhi	r2,1
    3a3c:	10aa0104 	addi	r2,r2,-22524
    3a40:	00c00284 	movi	r3,10
    3a44:	054000c4 	movi	r21,3
    3a48:	d880a015 	stw	r2,640(sp)
    3a4c:	d8c0a115 	stw	r3,644(sp)
    3a50:	003b9b06 	br	28c0 <__svfscanf_r+0x3b8>
    3a54:	9cc01014 	ori	r19,r19,64
    3a58:	002b883a 	mov	r21,zero
    3a5c:	003b9806 	br	28c0 <__svfscanf_r+0x3b8>
    3a60:	a00b883a 	mov	r5,r20
    3a64:	d9000404 	addi	r4,sp,16
    3a68:	0008d800 	call	8d80 <__sccl>
    3a6c:	1029883a 	mov	r20,r2
    3a70:	9cc01014 	ori	r19,r19,64
    3a74:	05400044 	movi	r21,1
    3a78:	003b9106 	br	28c0 <__svfscanf_r+0x3b8>
    3a7c:	9cc00054 	ori	r19,r19,1
    3a80:	00800204 	movi	r2,8
    3a84:	00c00074 	movhi	r3,1
    3a88:	18eb6104 	addi	r3,r3,-21116
    3a8c:	054000c4 	movi	r21,3
    3a90:	d880a115 	stw	r2,644(sp)
    3a94:	d8c0a015 	stw	r3,640(sp)
    3a98:	003b8906 	br	28c0 <__svfscanf_r+0x3b8>
    3a9c:	9880040c 	andi	r2,r19,16
    3aa0:	103aac1e 	bne	r2,zero,2554 <__svfscanf_r+0x4c>
    3aa4:	9880010c 	andi	r2,r19,4
    3aa8:	10002426 	beq	r2,zero,3b3c <__svfscanf_r+0x1634>
    3aac:	d900a417 	ldw	r4,656(sp)
    3ab0:	20800017 	ldw	r2,0(r4)
    3ab4:	21000104 	addi	r4,r4,4
    3ab8:	d900a415 	stw	r4,656(sp)
    3abc:	1440000d 	sth	r17,0(r2)
    3ac0:	003aa406 	br	2554 <__svfscanf_r+0x4c>
    3ac4:	9cc00094 	ori	r19,r19,2
    3ac8:	003aeb06 	br	2678 <__svfscanf_r+0x170>
    3acc:	05400084 	movi	r21,2
    3ad0:	003b7b06 	br	28c0 <__svfscanf_r+0x3b8>
    3ad4:	00800404 	movi	r2,16
    3ad8:	00c00074 	movhi	r3,1
    3adc:	18eb6104 	addi	r3,r3,-21116
    3ae0:	9cc08814 	ori	r19,r19,544
    3ae4:	054000c4 	movi	r21,3
    3ae8:	d880a115 	stw	r2,644(sp)
    3aec:	d8c0a015 	stw	r3,640(sp)
    3af0:	003b7306 	br	28c0 <__svfscanf_r+0x3b8>
    3af4:	0009883a 	mov	r4,zero
    3af8:	0008e400 	call	8e40 <nanf>
    3afc:	b8800015 	stw	r2,0(r23)
    3b00:	003d2706 	br	2fa0 <__svfscanf_r+0xa98>
    3b04:	a0c00007 	ldb	r3,0(r20)
    3b08:	00801b04 	movi	r2,108
    3b0c:	18800826 	beq	r3,r2,3b30 <__svfscanf_r+0x1628>
    3b10:	9cc00054 	ori	r19,r19,1
    3b14:	003ad806 	br	2678 <__svfscanf_r+0x170>
    3b18:	01000074 	movhi	r4,1
    3b1c:	212a0104 	addi	r4,r4,-22524
    3b20:	054000c4 	movi	r21,3
    3b24:	d900a015 	stw	r4,640(sp)
    3b28:	d800a115 	stw	zero,644(sp)
    3b2c:	003b6406 	br	28c0 <__svfscanf_r+0x3b8>
    3b30:	a5000044 	addi	r20,r20,1
    3b34:	9cc00094 	ori	r19,r19,2
    3b38:	003acf06 	br	2678 <__svfscanf_r+0x170>
    3b3c:	9880004c 	andi	r2,r19,1
    3b40:	1005003a 	cmpeq	r2,r2,zero
    3b44:	10000a26 	beq	r2,zero,3b70 <__svfscanf_r+0x1668>
    3b48:	9880008c 	andi	r2,r19,2
    3b4c:	10000826 	beq	r2,zero,3b70 <__svfscanf_r+0x1668>
    3b50:	d900a417 	ldw	r4,656(sp)
    3b54:	8807d7fa 	srai	r3,r17,31
    3b58:	20800017 	ldw	r2,0(r4)
    3b5c:	21000104 	addi	r4,r4,4
    3b60:	d900a415 	stw	r4,656(sp)
    3b64:	14400015 	stw	r17,0(r2)
    3b68:	10c00115 	stw	r3,4(r2)
    3b6c:	003a7906 	br	2554 <__svfscanf_r+0x4c>
    3b70:	d8c0a417 	ldw	r3,656(sp)
    3b74:	18800017 	ldw	r2,0(r3)
    3b78:	18c00104 	addi	r3,r3,4
    3b7c:	d8c0a415 	stw	r3,656(sp)
    3b80:	14400015 	stw	r17,0(r2)
    3b84:	003a7306 	br	2554 <__svfscanf_r+0x4c>

00003b88 <__svfscanf>:
    3b88:	00800074 	movhi	r2,1
    3b8c:	108e7f04 	addi	r2,r2,14844
    3b90:	2013883a 	mov	r9,r4
    3b94:	11000017 	ldw	r4,0(r2)
    3b98:	2805883a 	mov	r2,r5
    3b9c:	300f883a 	mov	r7,r6
    3ba0:	480b883a 	mov	r5,r9
    3ba4:	100d883a 	mov	r6,r2
    3ba8:	00025081 	jmpi	2508 <__svfscanf_r>

00003bac <_vfscanf_r>:
    3bac:	defffb04 	addi	sp,sp,-20
    3bb0:	dcc00315 	stw	r19,12(sp)
    3bb4:	dc800215 	stw	r18,8(sp)
    3bb8:	dc400115 	stw	r17,4(sp)
    3bbc:	dc000015 	stw	r16,0(sp)
    3bc0:	dfc00415 	stw	ra,16(sp)
    3bc4:	2021883a 	mov	r16,r4
    3bc8:	2823883a 	mov	r17,r5
    3bcc:	3025883a 	mov	r18,r6
    3bd0:	3827883a 	mov	r19,r7
    3bd4:	20000226 	beq	r4,zero,3be0 <_vfscanf_r+0x34>
    3bd8:	20800e17 	ldw	r2,56(r4)
    3bdc:	10000b26 	beq	r2,zero,3c0c <_vfscanf_r+0x60>
    3be0:	8009883a 	mov	r4,r16
    3be4:	880b883a 	mov	r5,r17
    3be8:	900d883a 	mov	r6,r18
    3bec:	980f883a 	mov	r7,r19
    3bf0:	dfc00417 	ldw	ra,16(sp)
    3bf4:	dcc00317 	ldw	r19,12(sp)
    3bf8:	dc800217 	ldw	r18,8(sp)
    3bfc:	dc400117 	ldw	r17,4(sp)
    3c00:	dc000017 	ldw	r16,0(sp)
    3c04:	dec00504 	addi	sp,sp,20
    3c08:	00025081 	jmpi	2508 <__svfscanf_r>
    3c0c:	00058280 	call	5828 <__sinit>
    3c10:	003ff306 	br	3be0 <_vfscanf_r+0x34>

00003c14 <vfscanf>:
    3c14:	defffb04 	addi	sp,sp,-20
    3c18:	dcc00315 	stw	r19,12(sp)
    3c1c:	04c00074 	movhi	r19,1
    3c20:	9cce7f04 	addi	r19,r19,14844
    3c24:	98c00017 	ldw	r3,0(r19)
    3c28:	dc800215 	stw	r18,8(sp)
    3c2c:	dc400115 	stw	r17,4(sp)
    3c30:	dc000015 	stw	r16,0(sp)
    3c34:	dfc00415 	stw	ra,16(sp)
    3c38:	2021883a 	mov	r16,r4
    3c3c:	2823883a 	mov	r17,r5
    3c40:	3025883a 	mov	r18,r6
    3c44:	18000326 	beq	r3,zero,3c54 <vfscanf+0x40>
    3c48:	18800e17 	ldw	r2,56(r3)
    3c4c:	1809883a 	mov	r4,r3
    3c50:	10000b26 	beq	r2,zero,3c80 <vfscanf+0x6c>
    3c54:	99000017 	ldw	r4,0(r19)
    3c58:	800b883a 	mov	r5,r16
    3c5c:	880d883a 	mov	r6,r17
    3c60:	900f883a 	mov	r7,r18
    3c64:	dfc00417 	ldw	ra,16(sp)
    3c68:	dcc00317 	ldw	r19,12(sp)
    3c6c:	dc800217 	ldw	r18,8(sp)
    3c70:	dc400117 	ldw	r17,4(sp)
    3c74:	dc000017 	ldw	r16,0(sp)
    3c78:	dec00504 	addi	sp,sp,20
    3c7c:	00025081 	jmpi	2508 <__svfscanf_r>
    3c80:	00058280 	call	5828 <__sinit>
    3c84:	003ff306 	br	3c54 <vfscanf+0x40>

00003c88 <__swsetup_r>:
    3c88:	00800074 	movhi	r2,1
    3c8c:	108e7f04 	addi	r2,r2,14844
    3c90:	10c00017 	ldw	r3,0(r2)
    3c94:	defffd04 	addi	sp,sp,-12
    3c98:	dc400115 	stw	r17,4(sp)
    3c9c:	dc000015 	stw	r16,0(sp)
    3ca0:	dfc00215 	stw	ra,8(sp)
    3ca4:	2023883a 	mov	r17,r4
    3ca8:	2821883a 	mov	r16,r5
    3cac:	18000226 	beq	r3,zero,3cb8 <__swsetup_r+0x30>
    3cb0:	18800e17 	ldw	r2,56(r3)
    3cb4:	10001f26 	beq	r2,zero,3d34 <__swsetup_r+0xac>
    3cb8:	8100030b 	ldhu	r4,12(r16)
    3cbc:	2080020c 	andi	r2,r4,8
    3cc0:	10002826 	beq	r2,zero,3d64 <__swsetup_r+0xdc>
    3cc4:	81400417 	ldw	r5,16(r16)
    3cc8:	28001d26 	beq	r5,zero,3d40 <__swsetup_r+0xb8>
    3ccc:	2080004c 	andi	r2,r4,1
    3cd0:	1005003a 	cmpeq	r2,r2,zero
    3cd4:	10000b26 	beq	r2,zero,3d04 <__swsetup_r+0x7c>
    3cd8:	2080008c 	andi	r2,r4,2
    3cdc:	10001226 	beq	r2,zero,3d28 <__swsetup_r+0xa0>
    3ce0:	0005883a 	mov	r2,zero
    3ce4:	80800215 	stw	r2,8(r16)
    3ce8:	28000b26 	beq	r5,zero,3d18 <__swsetup_r+0x90>
    3cec:	0005883a 	mov	r2,zero
    3cf0:	dfc00217 	ldw	ra,8(sp)
    3cf4:	dc400117 	ldw	r17,4(sp)
    3cf8:	dc000017 	ldw	r16,0(sp)
    3cfc:	dec00304 	addi	sp,sp,12
    3d00:	f800283a 	ret
    3d04:	80800517 	ldw	r2,20(r16)
    3d08:	80000215 	stw	zero,8(r16)
    3d0c:	0085c83a 	sub	r2,zero,r2
    3d10:	80800615 	stw	r2,24(r16)
    3d14:	283ff51e 	bne	r5,zero,3cec <__swsetup_r+0x64>
    3d18:	2080200c 	andi	r2,r4,128
    3d1c:	103ff326 	beq	r2,zero,3cec <__swsetup_r+0x64>
    3d20:	00bfffc4 	movi	r2,-1
    3d24:	003ff206 	br	3cf0 <__swsetup_r+0x68>
    3d28:	80800517 	ldw	r2,20(r16)
    3d2c:	80800215 	stw	r2,8(r16)
    3d30:	003fed06 	br	3ce8 <__swsetup_r+0x60>
    3d34:	1809883a 	mov	r4,r3
    3d38:	00058280 	call	5828 <__sinit>
    3d3c:	003fde06 	br	3cb8 <__swsetup_r+0x30>
    3d40:	20c0a00c 	andi	r3,r4,640
    3d44:	00808004 	movi	r2,512
    3d48:	18bfe026 	beq	r3,r2,3ccc <__swsetup_r+0x44>
    3d4c:	8809883a 	mov	r4,r17
    3d50:	800b883a 	mov	r5,r16
    3d54:	00068080 	call	6808 <__smakebuf_r>
    3d58:	8100030b 	ldhu	r4,12(r16)
    3d5c:	81400417 	ldw	r5,16(r16)
    3d60:	003fda06 	br	3ccc <__swsetup_r+0x44>
    3d64:	2080040c 	andi	r2,r4,16
    3d68:	103fed26 	beq	r2,zero,3d20 <__swsetup_r+0x98>
    3d6c:	2080010c 	andi	r2,r4,4
    3d70:	10001226 	beq	r2,zero,3dbc <__swsetup_r+0x134>
    3d74:	81400c17 	ldw	r5,48(r16)
    3d78:	28000526 	beq	r5,zero,3d90 <__swsetup_r+0x108>
    3d7c:	80801004 	addi	r2,r16,64
    3d80:	28800226 	beq	r5,r2,3d8c <__swsetup_r+0x104>
    3d84:	8809883a 	mov	r4,r17
    3d88:	0005de80 	call	5de8 <_free_r>
    3d8c:	80000c15 	stw	zero,48(r16)
    3d90:	8080030b 	ldhu	r2,12(r16)
    3d94:	81400417 	ldw	r5,16(r16)
    3d98:	80000115 	stw	zero,4(r16)
    3d9c:	10bff6cc 	andi	r2,r2,65499
    3da0:	8080030d 	sth	r2,12(r16)
    3da4:	81400015 	stw	r5,0(r16)
    3da8:	8080030b 	ldhu	r2,12(r16)
    3dac:	10800214 	ori	r2,r2,8
    3db0:	113fffcc 	andi	r4,r2,65535
    3db4:	8080030d 	sth	r2,12(r16)
    3db8:	003fc306 	br	3cc8 <__swsetup_r+0x40>
    3dbc:	81400417 	ldw	r5,16(r16)
    3dc0:	003ff906 	br	3da8 <__swsetup_r+0x120>

00003dc4 <quorem>:
    3dc4:	28c00417 	ldw	r3,16(r5)
    3dc8:	20800417 	ldw	r2,16(r4)
    3dcc:	defff604 	addi	sp,sp,-40
    3dd0:	ddc00715 	stw	r23,28(sp)
    3dd4:	dd400515 	stw	r21,20(sp)
    3dd8:	dfc00915 	stw	ra,36(sp)
    3ddc:	df000815 	stw	fp,32(sp)
    3de0:	dd800615 	stw	r22,24(sp)
    3de4:	dd000415 	stw	r20,16(sp)
    3de8:	dcc00315 	stw	r19,12(sp)
    3dec:	dc800215 	stw	r18,8(sp)
    3df0:	dc400115 	stw	r17,4(sp)
    3df4:	dc000015 	stw	r16,0(sp)
    3df8:	202f883a 	mov	r23,r4
    3dfc:	282b883a 	mov	r21,r5
    3e00:	10c07416 	blt	r2,r3,3fd4 <quorem+0x210>
    3e04:	1c7fffc4 	addi	r17,r3,-1
    3e08:	8c45883a 	add	r2,r17,r17
    3e0c:	1085883a 	add	r2,r2,r2
    3e10:	2c000504 	addi	r16,r5,20
    3e14:	24c00504 	addi	r19,r4,20
    3e18:	14ed883a 	add	r22,r2,r19
    3e1c:	80a5883a 	add	r18,r16,r2
    3e20:	b7000017 	ldw	fp,0(r22)
    3e24:	91400017 	ldw	r5,0(r18)
    3e28:	e009883a 	mov	r4,fp
    3e2c:	29400044 	addi	r5,r5,1
    3e30:	000e70c0 	call	e70c <__udivsi3>
    3e34:	1029883a 	mov	r20,r2
    3e38:	10003c1e 	bne	r2,zero,3f2c <quorem+0x168>
    3e3c:	a80b883a 	mov	r5,r21
    3e40:	b809883a 	mov	r4,r23
    3e44:	00076340 	call	7634 <__mcmp>
    3e48:	10002b16 	blt	r2,zero,3ef8 <quorem+0x134>
    3e4c:	a5000044 	addi	r20,r20,1
    3e50:	980f883a 	mov	r7,r19
    3e54:	0011883a 	mov	r8,zero
    3e58:	0009883a 	mov	r4,zero
    3e5c:	81400017 	ldw	r5,0(r16)
    3e60:	38c00017 	ldw	r3,0(r7)
    3e64:	84000104 	addi	r16,r16,4
    3e68:	28bfffcc 	andi	r2,r5,65535
    3e6c:	2085883a 	add	r2,r4,r2
    3e70:	11bfffcc 	andi	r6,r2,65535
    3e74:	193fffcc 	andi	r4,r3,65535
    3e78:	1004d43a 	srli	r2,r2,16
    3e7c:	280ad43a 	srli	r5,r5,16
    3e80:	2189c83a 	sub	r4,r4,r6
    3e84:	2209883a 	add	r4,r4,r8
    3e88:	1806d43a 	srli	r3,r3,16
    3e8c:	288b883a 	add	r5,r5,r2
    3e90:	200dd43a 	srai	r6,r4,16
    3e94:	28bfffcc 	andi	r2,r5,65535
    3e98:	1887c83a 	sub	r3,r3,r2
    3e9c:	1987883a 	add	r3,r3,r6
    3ea0:	3900000d 	sth	r4,0(r7)
    3ea4:	38c0008d 	sth	r3,2(r7)
    3ea8:	2808d43a 	srli	r4,r5,16
    3eac:	39c00104 	addi	r7,r7,4
    3eb0:	1811d43a 	srai	r8,r3,16
    3eb4:	943fe92e 	bgeu	r18,r16,3e5c <quorem+0x98>
    3eb8:	8c45883a 	add	r2,r17,r17
    3ebc:	1085883a 	add	r2,r2,r2
    3ec0:	9885883a 	add	r2,r19,r2
    3ec4:	10c00017 	ldw	r3,0(r2)
    3ec8:	18000b1e 	bne	r3,zero,3ef8 <quorem+0x134>
    3ecc:	113fff04 	addi	r4,r2,-4
    3ed0:	9900082e 	bgeu	r19,r4,3ef4 <quorem+0x130>
    3ed4:	10bfff17 	ldw	r2,-4(r2)
    3ed8:	10000326 	beq	r2,zero,3ee8 <quorem+0x124>
    3edc:	00000506 	br	3ef4 <quorem+0x130>
    3ee0:	20800017 	ldw	r2,0(r4)
    3ee4:	1000031e 	bne	r2,zero,3ef4 <quorem+0x130>
    3ee8:	213fff04 	addi	r4,r4,-4
    3eec:	8c7fffc4 	addi	r17,r17,-1
    3ef0:	993ffb36 	bltu	r19,r4,3ee0 <quorem+0x11c>
    3ef4:	bc400415 	stw	r17,16(r23)
    3ef8:	a005883a 	mov	r2,r20
    3efc:	dfc00917 	ldw	ra,36(sp)
    3f00:	df000817 	ldw	fp,32(sp)
    3f04:	ddc00717 	ldw	r23,28(sp)
    3f08:	dd800617 	ldw	r22,24(sp)
    3f0c:	dd400517 	ldw	r21,20(sp)
    3f10:	dd000417 	ldw	r20,16(sp)
    3f14:	dcc00317 	ldw	r19,12(sp)
    3f18:	dc800217 	ldw	r18,8(sp)
    3f1c:	dc400117 	ldw	r17,4(sp)
    3f20:	dc000017 	ldw	r16,0(sp)
    3f24:	dec00a04 	addi	sp,sp,40
    3f28:	f800283a 	ret
    3f2c:	980f883a 	mov	r7,r19
    3f30:	8011883a 	mov	r8,r16
    3f34:	0013883a 	mov	r9,zero
    3f38:	000d883a 	mov	r6,zero
    3f3c:	40c00017 	ldw	r3,0(r8)
    3f40:	39000017 	ldw	r4,0(r7)
    3f44:	42000104 	addi	r8,r8,4
    3f48:	18bfffcc 	andi	r2,r3,65535
    3f4c:	a085383a 	mul	r2,r20,r2
    3f50:	1806d43a 	srli	r3,r3,16
    3f54:	217fffcc 	andi	r5,r4,65535
    3f58:	3085883a 	add	r2,r6,r2
    3f5c:	11bfffcc 	andi	r6,r2,65535
    3f60:	a0c7383a 	mul	r3,r20,r3
    3f64:	1004d43a 	srli	r2,r2,16
    3f68:	298bc83a 	sub	r5,r5,r6
    3f6c:	2a4b883a 	add	r5,r5,r9
    3f70:	2008d43a 	srli	r4,r4,16
    3f74:	1887883a 	add	r3,r3,r2
    3f78:	280dd43a 	srai	r6,r5,16
    3f7c:	18bfffcc 	andi	r2,r3,65535
    3f80:	2089c83a 	sub	r4,r4,r2
    3f84:	2189883a 	add	r4,r4,r6
    3f88:	3900008d 	sth	r4,2(r7)
    3f8c:	3940000d 	sth	r5,0(r7)
    3f90:	180cd43a 	srli	r6,r3,16
    3f94:	39c00104 	addi	r7,r7,4
    3f98:	2013d43a 	srai	r9,r4,16
    3f9c:	923fe72e 	bgeu	r18,r8,3f3c <quorem+0x178>
    3fa0:	e03fa61e 	bne	fp,zero,3e3c <quorem+0x78>
    3fa4:	b0ffff04 	addi	r3,r22,-4
    3fa8:	98c0082e 	bgeu	r19,r3,3fcc <quorem+0x208>
    3fac:	b0bfff17 	ldw	r2,-4(r22)
    3fb0:	10000326 	beq	r2,zero,3fc0 <quorem+0x1fc>
    3fb4:	00000506 	br	3fcc <quorem+0x208>
    3fb8:	18800017 	ldw	r2,0(r3)
    3fbc:	1000031e 	bne	r2,zero,3fcc <quorem+0x208>
    3fc0:	18ffff04 	addi	r3,r3,-4
    3fc4:	8c7fffc4 	addi	r17,r17,-1
    3fc8:	98fffb36 	bltu	r19,r3,3fb8 <quorem+0x1f4>
    3fcc:	bc400415 	stw	r17,16(r23)
    3fd0:	003f9a06 	br	3e3c <quorem+0x78>
    3fd4:	0005883a 	mov	r2,zero
    3fd8:	003fc806 	br	3efc <quorem+0x138>

00003fdc <_dtoa_r>:
    3fdc:	22001017 	ldw	r8,64(r4)
    3fe0:	deffda04 	addi	sp,sp,-152
    3fe4:	dd402115 	stw	r21,132(sp)
    3fe8:	dd002015 	stw	r20,128(sp)
    3fec:	dc801e15 	stw	r18,120(sp)
    3ff0:	dc401d15 	stw	r17,116(sp)
    3ff4:	dfc02515 	stw	ra,148(sp)
    3ff8:	df002415 	stw	fp,144(sp)
    3ffc:	ddc02315 	stw	r23,140(sp)
    4000:	dd802215 	stw	r22,136(sp)
    4004:	dcc01f15 	stw	r19,124(sp)
    4008:	dc001c15 	stw	r16,112(sp)
    400c:	d9001615 	stw	r4,88(sp)
    4010:	3023883a 	mov	r17,r6
    4014:	2829883a 	mov	r20,r5
    4018:	d9c01715 	stw	r7,92(sp)
    401c:	dc802817 	ldw	r18,160(sp)
    4020:	302b883a 	mov	r21,r6
    4024:	40000a26 	beq	r8,zero,4050 <_dtoa_r+0x74>
    4028:	20801117 	ldw	r2,68(r4)
    402c:	400b883a 	mov	r5,r8
    4030:	40800115 	stw	r2,4(r8)
    4034:	20c01117 	ldw	r3,68(r4)
    4038:	00800044 	movi	r2,1
    403c:	10c4983a 	sll	r2,r2,r3
    4040:	40800215 	stw	r2,8(r8)
    4044:	00074d80 	call	74d8 <_Bfree>
    4048:	d8c01617 	ldw	r3,88(sp)
    404c:	18001015 	stw	zero,64(r3)
    4050:	8800a316 	blt	r17,zero,42e0 <_dtoa_r+0x304>
    4054:	90000015 	stw	zero,0(r18)
    4058:	a8dffc2c 	andhi	r3,r21,32752
    405c:	009ffc34 	movhi	r2,32752
    4060:	18809126 	beq	r3,r2,42a8 <_dtoa_r+0x2cc>
    4064:	000d883a 	mov	r6,zero
    4068:	000f883a 	mov	r7,zero
    406c:	a009883a 	mov	r4,r20
    4070:	a80b883a 	mov	r5,r21
    4074:	dd001215 	stw	r20,72(sp)
    4078:	dd401315 	stw	r21,76(sp)
    407c:	000df500 	call	df50 <__nedf2>
    4080:	1000171e 	bne	r2,zero,40e0 <_dtoa_r+0x104>
    4084:	d9802717 	ldw	r6,156(sp)
    4088:	00800044 	movi	r2,1
    408c:	30800015 	stw	r2,0(r6)
    4090:	d8802917 	ldw	r2,164(sp)
    4094:	10029b26 	beq	r2,zero,4b04 <_dtoa_r+0xb28>
    4098:	d9002917 	ldw	r4,164(sp)
    409c:	00800074 	movhi	r2,1
    40a0:	10863644 	addi	r2,r2,6361
    40a4:	10ffffc4 	addi	r3,r2,-1
    40a8:	20800015 	stw	r2,0(r4)
    40ac:	1805883a 	mov	r2,r3
    40b0:	dfc02517 	ldw	ra,148(sp)
    40b4:	df002417 	ldw	fp,144(sp)
    40b8:	ddc02317 	ldw	r23,140(sp)
    40bc:	dd802217 	ldw	r22,136(sp)
    40c0:	dd402117 	ldw	r21,132(sp)
    40c4:	dd002017 	ldw	r20,128(sp)
    40c8:	dcc01f17 	ldw	r19,124(sp)
    40cc:	dc801e17 	ldw	r18,120(sp)
    40d0:	dc401d17 	ldw	r17,116(sp)
    40d4:	dc001c17 	ldw	r16,112(sp)
    40d8:	dec02604 	addi	sp,sp,152
    40dc:	f800283a 	ret
    40e0:	d9001617 	ldw	r4,88(sp)
    40e4:	d9401217 	ldw	r5,72(sp)
    40e8:	d8800104 	addi	r2,sp,4
    40ec:	a80d883a 	mov	r6,r21
    40f0:	d9c00204 	addi	r7,sp,8
    40f4:	d8800015 	stw	r2,0(sp)
    40f8:	0007b140 	call	7b14 <__d2b>
    40fc:	d8800715 	stw	r2,28(sp)
    4100:	a804d53a 	srli	r2,r21,20
    4104:	1101ffcc 	andi	r4,r2,2047
    4108:	20008626 	beq	r4,zero,4324 <_dtoa_r+0x348>
    410c:	d8c01217 	ldw	r3,72(sp)
    4110:	00800434 	movhi	r2,16
    4114:	10bfffc4 	addi	r2,r2,-1
    4118:	ddc00117 	ldw	r23,4(sp)
    411c:	a884703a 	and	r2,r21,r2
    4120:	1811883a 	mov	r8,r3
    4124:	124ffc34 	orhi	r9,r2,16368
    4128:	25bf0044 	addi	r22,r4,-1023
    412c:	d8000815 	stw	zero,32(sp)
    4130:	0005883a 	mov	r2,zero
    4134:	00cffe34 	movhi	r3,16376
    4138:	480b883a 	mov	r5,r9
    413c:	4009883a 	mov	r4,r8
    4140:	180f883a 	mov	r7,r3
    4144:	100d883a 	mov	r6,r2
    4148:	000d7b80 	call	d7b8 <__subdf3>
    414c:	0218dbf4 	movhi	r8,25455
    4150:	4210d844 	addi	r8,r8,17249
    4154:	024ff4f4 	movhi	r9,16339
    4158:	4a61e9c4 	addi	r9,r9,-30809
    415c:	480f883a 	mov	r7,r9
    4160:	400d883a 	mov	r6,r8
    4164:	180b883a 	mov	r5,r3
    4168:	1009883a 	mov	r4,r2
    416c:	000d8ac0 	call	d8ac <__muldf3>
    4170:	0222d874 	movhi	r8,35681
    4174:	42322cc4 	addi	r8,r8,-14157
    4178:	024ff1f4 	movhi	r9,16327
    417c:	4a628a04 	addi	r9,r9,-30168
    4180:	480f883a 	mov	r7,r9
    4184:	400d883a 	mov	r6,r8
    4188:	180b883a 	mov	r5,r3
    418c:	1009883a 	mov	r4,r2
    4190:	000d8380 	call	d838 <__adddf3>
    4194:	b009883a 	mov	r4,r22
    4198:	1021883a 	mov	r16,r2
    419c:	1823883a 	mov	r17,r3
    41a0:	000e1f80 	call	e1f8 <__floatsidf>
    41a4:	021427f4 	movhi	r8,20639
    41a8:	421e7ec4 	addi	r8,r8,31227
    41ac:	024ff4f4 	movhi	r9,16339
    41b0:	4a5104c4 	addi	r9,r9,17427
    41b4:	480f883a 	mov	r7,r9
    41b8:	400d883a 	mov	r6,r8
    41bc:	180b883a 	mov	r5,r3
    41c0:	1009883a 	mov	r4,r2
    41c4:	000d8ac0 	call	d8ac <__muldf3>
    41c8:	180f883a 	mov	r7,r3
    41cc:	880b883a 	mov	r5,r17
    41d0:	100d883a 	mov	r6,r2
    41d4:	8009883a 	mov	r4,r16
    41d8:	000d8380 	call	d838 <__adddf3>
    41dc:	1009883a 	mov	r4,r2
    41e0:	180b883a 	mov	r5,r3
    41e4:	1021883a 	mov	r16,r2
    41e8:	1823883a 	mov	r17,r3
    41ec:	000e2f00 	call	e2f0 <__fixdfsi>
    41f0:	000d883a 	mov	r6,zero
    41f4:	000f883a 	mov	r7,zero
    41f8:	8009883a 	mov	r4,r16
    41fc:	880b883a 	mov	r5,r17
    4200:	d8800d15 	stw	r2,52(sp)
    4204:	000e0e80 	call	e0e8 <__ltdf2>
    4208:	10031716 	blt	r2,zero,4e68 <_dtoa_r+0xe8c>
    420c:	d8c00d17 	ldw	r3,52(sp)
    4210:	00800584 	movi	r2,22
    4214:	10c1482e 	bgeu	r2,r3,4738 <_dtoa_r+0x75c>
    4218:	01000044 	movi	r4,1
    421c:	d9000c15 	stw	r4,48(sp)
    4220:	bd85c83a 	sub	r2,r23,r22
    4224:	11bfffc4 	addi	r6,r2,-1
    4228:	30030b16 	blt	r6,zero,4e58 <_dtoa_r+0xe7c>
    422c:	d9800a15 	stw	r6,40(sp)
    4230:	d8001115 	stw	zero,68(sp)
    4234:	d8c00d17 	ldw	r3,52(sp)
    4238:	1802ff16 	blt	r3,zero,4e38 <_dtoa_r+0xe5c>
    423c:	d9000a17 	ldw	r4,40(sp)
    4240:	d8c00915 	stw	r3,36(sp)
    4244:	d8001015 	stw	zero,64(sp)
    4248:	20c9883a 	add	r4,r4,r3
    424c:	d9000a15 	stw	r4,40(sp)
    4250:	d9001717 	ldw	r4,92(sp)
    4254:	00800244 	movi	r2,9
    4258:	11004636 	bltu	r2,r4,4374 <_dtoa_r+0x398>
    425c:	00800144 	movi	r2,5
    4260:	11020416 	blt	r2,r4,4a74 <_dtoa_r+0xa98>
    4264:	04400044 	movi	r17,1
    4268:	d8c01717 	ldw	r3,92(sp)
    426c:	00800144 	movi	r2,5
    4270:	10c1ed36 	bltu	r2,r3,4a28 <_dtoa_r+0xa4c>
    4274:	18c5883a 	add	r2,r3,r3
    4278:	1085883a 	add	r2,r2,r2
    427c:	00c00034 	movhi	r3,0
    4280:	18d0a404 	addi	r3,r3,17040
    4284:	10c5883a 	add	r2,r2,r3
    4288:	11000017 	ldw	r4,0(r2)
    428c:	2000683a 	jmp	r4
    4290:	0000437c 	xorhi	zero,zero,269
    4294:	0000437c 	xorhi	zero,zero,269
    4298:	00004d7c 	xorhi	zero,zero,309
    429c:	00004d54 	movui	zero,309
    42a0:	00004d98 	cmpnei	zero,zero,310
    42a4:	00004da4 	muli	zero,zero,310
    42a8:	d9002717 	ldw	r4,156(sp)
    42ac:	0089c3c4 	movi	r2,9999
    42b0:	20800015 	stw	r2,0(r4)
    42b4:	a0001026 	beq	r20,zero,42f8 <_dtoa_r+0x31c>
    42b8:	00c00074 	movhi	r3,1
    42bc:	18c6ee04 	addi	r3,r3,7096
    42c0:	d9802917 	ldw	r6,164(sp)
    42c4:	303f7926 	beq	r6,zero,40ac <_dtoa_r+0xd0>
    42c8:	188000c7 	ldb	r2,3(r3)
    42cc:	190000c4 	addi	r4,r3,3
    42d0:	1000101e 	bne	r2,zero,4314 <_dtoa_r+0x338>
    42d4:	d8802917 	ldw	r2,164(sp)
    42d8:	11000015 	stw	r4,0(r2)
    42dc:	003f7306 	br	40ac <_dtoa_r+0xd0>
    42e0:	00a00034 	movhi	r2,32768
    42e4:	10bfffc4 	addi	r2,r2,-1
    42e8:	00c00044 	movi	r3,1
    42ec:	88aa703a 	and	r21,r17,r2
    42f0:	90c00015 	stw	r3,0(r18)
    42f4:	003f5806 	br	4058 <_dtoa_r+0x7c>
    42f8:	00800434 	movhi	r2,16
    42fc:	10bfffc4 	addi	r2,r2,-1
    4300:	a884703a 	and	r2,r21,r2
    4304:	103fec1e 	bne	r2,zero,42b8 <_dtoa_r+0x2dc>
    4308:	00c00074 	movhi	r3,1
    430c:	18c6eb04 	addi	r3,r3,7084
    4310:	003feb06 	br	42c0 <_dtoa_r+0x2e4>
    4314:	d8802917 	ldw	r2,164(sp)
    4318:	19000204 	addi	r4,r3,8
    431c:	11000015 	stw	r4,0(r2)
    4320:	003f6206 	br	40ac <_dtoa_r+0xd0>
    4324:	ddc00117 	ldw	r23,4(sp)
    4328:	d8800217 	ldw	r2,8(sp)
    432c:	01000804 	movi	r4,32
    4330:	b8c10c84 	addi	r3,r23,1074
    4334:	18a3883a 	add	r17,r3,r2
    4338:	2441b80e 	bge	r4,r17,4a1c <_dtoa_r+0xa40>
    433c:	00c01004 	movi	r3,64
    4340:	1c47c83a 	sub	r3,r3,r17
    4344:	88bff804 	addi	r2,r17,-32
    4348:	a8c6983a 	sll	r3,r21,r3
    434c:	a084d83a 	srl	r2,r20,r2
    4350:	1888b03a 	or	r4,r3,r2
    4354:	000e43c0 	call	e43c <__floatunsidf>
    4358:	1011883a 	mov	r8,r2
    435c:	00bf8434 	movhi	r2,65040
    4360:	01000044 	movi	r4,1
    4364:	10d3883a 	add	r9,r2,r3
    4368:	8dbef344 	addi	r22,r17,-1075
    436c:	d9000815 	stw	r4,32(sp)
    4370:	003f6f06 	br	4130 <_dtoa_r+0x154>
    4374:	d8001715 	stw	zero,92(sp)
    4378:	04400044 	movi	r17,1
    437c:	00bfffc4 	movi	r2,-1
    4380:	00c00044 	movi	r3,1
    4384:	d8800e15 	stw	r2,56(sp)
    4388:	d8002615 	stw	zero,152(sp)
    438c:	d8800f15 	stw	r2,60(sp)
    4390:	d8c00b15 	stw	r3,44(sp)
    4394:	1021883a 	mov	r16,r2
    4398:	d8801617 	ldw	r2,88(sp)
    439c:	10001115 	stw	zero,68(r2)
    43a0:	d8801617 	ldw	r2,88(sp)
    43a4:	11401117 	ldw	r5,68(r2)
    43a8:	1009883a 	mov	r4,r2
    43ac:	0007a580 	call	7a58 <_Balloc>
    43b0:	d8c01617 	ldw	r3,88(sp)
    43b4:	d8800515 	stw	r2,20(sp)
    43b8:	18801015 	stw	r2,64(r3)
    43bc:	00800384 	movi	r2,14
    43c0:	14006836 	bltu	r2,r16,4564 <_dtoa_r+0x588>
    43c4:	8805003a 	cmpeq	r2,r17,zero
    43c8:	1000661e 	bne	r2,zero,4564 <_dtoa_r+0x588>
    43cc:	d9000d17 	ldw	r4,52(sp)
    43d0:	0102300e 	bge	zero,r4,4c94 <_dtoa_r+0xcb8>
    43d4:	208003cc 	andi	r2,r4,15
    43d8:	100490fa 	slli	r2,r2,3
    43dc:	2025d13a 	srai	r18,r4,4
    43e0:	00c00074 	movhi	r3,1
    43e4:	18c70004 	addi	r3,r3,7168
    43e8:	10c5883a 	add	r2,r2,r3
    43ec:	90c0040c 	andi	r3,r18,16
    43f0:	14000017 	ldw	r16,0(r2)
    43f4:	14400117 	ldw	r17,4(r2)
    43f8:	18036a1e 	bne	r3,zero,51a4 <_dtoa_r+0x11c8>
    43fc:	05800084 	movi	r22,2
    4400:	90001026 	beq	r18,zero,4444 <_dtoa_r+0x468>
    4404:	04c00074 	movhi	r19,1
    4408:	9cc73204 	addi	r19,r19,7368
    440c:	9080004c 	andi	r2,r18,1
    4410:	1005003a 	cmpeq	r2,r2,zero
    4414:	1000081e 	bne	r2,zero,4438 <_dtoa_r+0x45c>
    4418:	99800017 	ldw	r6,0(r19)
    441c:	99c00117 	ldw	r7,4(r19)
    4420:	880b883a 	mov	r5,r17
    4424:	8009883a 	mov	r4,r16
    4428:	000d8ac0 	call	d8ac <__muldf3>
    442c:	1021883a 	mov	r16,r2
    4430:	b5800044 	addi	r22,r22,1
    4434:	1823883a 	mov	r17,r3
    4438:	9025d07a 	srai	r18,r18,1
    443c:	9cc00204 	addi	r19,r19,8
    4440:	903ff21e 	bne	r18,zero,440c <_dtoa_r+0x430>
    4444:	a80b883a 	mov	r5,r21
    4448:	a009883a 	mov	r4,r20
    444c:	880f883a 	mov	r7,r17
    4450:	800d883a 	mov	r6,r16
    4454:	000dc700 	call	dc70 <__divdf3>
    4458:	1029883a 	mov	r20,r2
    445c:	182b883a 	mov	r21,r3
    4460:	d8c00c17 	ldw	r3,48(sp)
    4464:	1805003a 	cmpeq	r2,r3,zero
    4468:	1000081e 	bne	r2,zero,448c <_dtoa_r+0x4b0>
    446c:	0005883a 	mov	r2,zero
    4470:	00cffc34 	movhi	r3,16368
    4474:	180f883a 	mov	r7,r3
    4478:	a009883a 	mov	r4,r20
    447c:	a80b883a 	mov	r5,r21
    4480:	100d883a 	mov	r6,r2
    4484:	000e0e80 	call	e0e8 <__ltdf2>
    4488:	1003fe16 	blt	r2,zero,5484 <_dtoa_r+0x14a8>
    448c:	b009883a 	mov	r4,r22
    4490:	000e1f80 	call	e1f8 <__floatsidf>
    4494:	180b883a 	mov	r5,r3
    4498:	1009883a 	mov	r4,r2
    449c:	a00d883a 	mov	r6,r20
    44a0:	a80f883a 	mov	r7,r21
    44a4:	000d8ac0 	call	d8ac <__muldf3>
    44a8:	0011883a 	mov	r8,zero
    44ac:	02500734 	movhi	r9,16412
    44b0:	1009883a 	mov	r4,r2
    44b4:	180b883a 	mov	r5,r3
    44b8:	480f883a 	mov	r7,r9
    44bc:	400d883a 	mov	r6,r8
    44c0:	000d8380 	call	d838 <__adddf3>
    44c4:	d9000f17 	ldw	r4,60(sp)
    44c8:	102d883a 	mov	r22,r2
    44cc:	00bf3034 	movhi	r2,64704
    44d0:	18b9883a 	add	fp,r3,r2
    44d4:	e02f883a 	mov	r23,fp
    44d8:	20028f1e 	bne	r4,zero,4f18 <_dtoa_r+0xf3c>
    44dc:	0005883a 	mov	r2,zero
    44e0:	00d00534 	movhi	r3,16404
    44e4:	a009883a 	mov	r4,r20
    44e8:	a80b883a 	mov	r5,r21
    44ec:	180f883a 	mov	r7,r3
    44f0:	100d883a 	mov	r6,r2
    44f4:	000d7b80 	call	d7b8 <__subdf3>
    44f8:	1009883a 	mov	r4,r2
    44fc:	e00f883a 	mov	r7,fp
    4500:	180b883a 	mov	r5,r3
    4504:	b00d883a 	mov	r6,r22
    4508:	1025883a 	mov	r18,r2
    450c:	1827883a 	mov	r19,r3
    4510:	000dfd80 	call	dfd8 <__gtdf2>
    4514:	00834f16 	blt	zero,r2,5254 <_dtoa_r+0x1278>
    4518:	e0e0003c 	xorhi	r3,fp,32768
    451c:	9009883a 	mov	r4,r18
    4520:	980b883a 	mov	r5,r19
    4524:	180f883a 	mov	r7,r3
    4528:	b00d883a 	mov	r6,r22
    452c:	000e0e80 	call	e0e8 <__ltdf2>
    4530:	1000080e 	bge	r2,zero,4554 <_dtoa_r+0x578>
    4534:	0027883a 	mov	r19,zero
    4538:	0025883a 	mov	r18,zero
    453c:	d8802617 	ldw	r2,152(sp)
    4540:	df000517 	ldw	fp,20(sp)
    4544:	d8000615 	stw	zero,24(sp)
    4548:	0084303a 	nor	r2,zero,r2
    454c:	d8800d15 	stw	r2,52(sp)
    4550:	00019b06 	br	4bc0 <_dtoa_r+0xbe4>
    4554:	d9801217 	ldw	r6,72(sp)
    4558:	d8801317 	ldw	r2,76(sp)
    455c:	3029883a 	mov	r20,r6
    4560:	102b883a 	mov	r21,r2
    4564:	d8c00217 	ldw	r3,8(sp)
    4568:	18008516 	blt	r3,zero,4780 <_dtoa_r+0x7a4>
    456c:	d9000d17 	ldw	r4,52(sp)
    4570:	00800384 	movi	r2,14
    4574:	11008216 	blt	r2,r4,4780 <_dtoa_r+0x7a4>
    4578:	200490fa 	slli	r2,r4,3
    457c:	d9802617 	ldw	r6,152(sp)
    4580:	00c00074 	movhi	r3,1
    4584:	18c70004 	addi	r3,r3,7168
    4588:	10c5883a 	add	r2,r2,r3
    458c:	14800017 	ldw	r18,0(r2)
    4590:	14c00117 	ldw	r19,4(r2)
    4594:	30031e16 	blt	r6,zero,5210 <_dtoa_r+0x1234>
    4598:	d9000517 	ldw	r4,20(sp)
    459c:	d8c00f17 	ldw	r3,60(sp)
    45a0:	a823883a 	mov	r17,r21
    45a4:	a021883a 	mov	r16,r20
    45a8:	192b883a 	add	r21,r3,r4
    45ac:	2039883a 	mov	fp,r4
    45b0:	00000f06 	br	45f0 <_dtoa_r+0x614>
    45b4:	0005883a 	mov	r2,zero
    45b8:	00d00934 	movhi	r3,16420
    45bc:	5009883a 	mov	r4,r10
    45c0:	580b883a 	mov	r5,r11
    45c4:	180f883a 	mov	r7,r3
    45c8:	100d883a 	mov	r6,r2
    45cc:	000d8ac0 	call	d8ac <__muldf3>
    45d0:	180b883a 	mov	r5,r3
    45d4:	000d883a 	mov	r6,zero
    45d8:	000f883a 	mov	r7,zero
    45dc:	1009883a 	mov	r4,r2
    45e0:	1021883a 	mov	r16,r2
    45e4:	1823883a 	mov	r17,r3
    45e8:	000df500 	call	df50 <__nedf2>
    45ec:	10004526 	beq	r2,zero,4704 <_dtoa_r+0x728>
    45f0:	900d883a 	mov	r6,r18
    45f4:	980f883a 	mov	r7,r19
    45f8:	8009883a 	mov	r4,r16
    45fc:	880b883a 	mov	r5,r17
    4600:	000dc700 	call	dc70 <__divdf3>
    4604:	180b883a 	mov	r5,r3
    4608:	1009883a 	mov	r4,r2
    460c:	000e2f00 	call	e2f0 <__fixdfsi>
    4610:	1009883a 	mov	r4,r2
    4614:	1029883a 	mov	r20,r2
    4618:	000e1f80 	call	e1f8 <__floatsidf>
    461c:	180f883a 	mov	r7,r3
    4620:	9009883a 	mov	r4,r18
    4624:	980b883a 	mov	r5,r19
    4628:	100d883a 	mov	r6,r2
    462c:	000d8ac0 	call	d8ac <__muldf3>
    4630:	180f883a 	mov	r7,r3
    4634:	880b883a 	mov	r5,r17
    4638:	8009883a 	mov	r4,r16
    463c:	100d883a 	mov	r6,r2
    4640:	000d7b80 	call	d7b8 <__subdf3>
    4644:	1015883a 	mov	r10,r2
    4648:	a0800c04 	addi	r2,r20,48
    464c:	e0800005 	stb	r2,0(fp)
    4650:	e7000044 	addi	fp,fp,1
    4654:	1817883a 	mov	r11,r3
    4658:	e57fd61e 	bne	fp,r21,45b4 <_dtoa_r+0x5d8>
    465c:	500d883a 	mov	r6,r10
    4660:	180f883a 	mov	r7,r3
    4664:	5009883a 	mov	r4,r10
    4668:	180b883a 	mov	r5,r3
    466c:	000d8380 	call	d838 <__adddf3>
    4670:	100d883a 	mov	r6,r2
    4674:	9009883a 	mov	r4,r18
    4678:	980b883a 	mov	r5,r19
    467c:	180f883a 	mov	r7,r3
    4680:	1021883a 	mov	r16,r2
    4684:	1823883a 	mov	r17,r3
    4688:	000e0e80 	call	e0e8 <__ltdf2>
    468c:	10000816 	blt	r2,zero,46b0 <_dtoa_r+0x6d4>
    4690:	980b883a 	mov	r5,r19
    4694:	800d883a 	mov	r6,r16
    4698:	880f883a 	mov	r7,r17
    469c:	9009883a 	mov	r4,r18
    46a0:	000dec80 	call	dec8 <__eqdf2>
    46a4:	1000171e 	bne	r2,zero,4704 <_dtoa_r+0x728>
    46a8:	a080004c 	andi	r2,r20,1
    46ac:	10001526 	beq	r2,zero,4704 <_dtoa_r+0x728>
    46b0:	d8800d17 	ldw	r2,52(sp)
    46b4:	d8800415 	stw	r2,16(sp)
    46b8:	e009883a 	mov	r4,fp
    46bc:	213fffc4 	addi	r4,r4,-1
    46c0:	20c00007 	ldb	r3,0(r4)
    46c4:	00800e44 	movi	r2,57
    46c8:	1880081e 	bne	r3,r2,46ec <_dtoa_r+0x710>
    46cc:	d8800517 	ldw	r2,20(sp)
    46d0:	113ffa1e 	bne	r2,r4,46bc <_dtoa_r+0x6e0>
    46d4:	d8c00417 	ldw	r3,16(sp)
    46d8:	d9800517 	ldw	r6,20(sp)
    46dc:	00800c04 	movi	r2,48
    46e0:	18c00044 	addi	r3,r3,1
    46e4:	d8c00415 	stw	r3,16(sp)
    46e8:	30800005 	stb	r2,0(r6)
    46ec:	20800003 	ldbu	r2,0(r4)
    46f0:	d8c00417 	ldw	r3,16(sp)
    46f4:	27000044 	addi	fp,r4,1
    46f8:	10800044 	addi	r2,r2,1
    46fc:	d8c00d15 	stw	r3,52(sp)
    4700:	20800005 	stb	r2,0(r4)
    4704:	d9001617 	ldw	r4,88(sp)
    4708:	d9400717 	ldw	r5,28(sp)
    470c:	00074d80 	call	74d8 <_Bfree>
    4710:	e0000005 	stb	zero,0(fp)
    4714:	d9800d17 	ldw	r6,52(sp)
    4718:	d8c02717 	ldw	r3,156(sp)
    471c:	d9002917 	ldw	r4,164(sp)
    4720:	30800044 	addi	r2,r6,1
    4724:	18800015 	stw	r2,0(r3)
    4728:	20029c26 	beq	r4,zero,519c <_dtoa_r+0x11c0>
    472c:	d8c00517 	ldw	r3,20(sp)
    4730:	27000015 	stw	fp,0(r4)
    4734:	003e5d06 	br	40ac <_dtoa_r+0xd0>
    4738:	d9800d17 	ldw	r6,52(sp)
    473c:	00c00074 	movhi	r3,1
    4740:	18c70004 	addi	r3,r3,7168
    4744:	d9001217 	ldw	r4,72(sp)
    4748:	300490fa 	slli	r2,r6,3
    474c:	d9401317 	ldw	r5,76(sp)
    4750:	10c5883a 	add	r2,r2,r3
    4754:	12000017 	ldw	r8,0(r2)
    4758:	12400117 	ldw	r9,4(r2)
    475c:	400d883a 	mov	r6,r8
    4760:	480f883a 	mov	r7,r9
    4764:	000e0e80 	call	e0e8 <__ltdf2>
    4768:	1000030e 	bge	r2,zero,4778 <_dtoa_r+0x79c>
    476c:	d8800d17 	ldw	r2,52(sp)
    4770:	10bfffc4 	addi	r2,r2,-1
    4774:	d8800d15 	stw	r2,52(sp)
    4778:	d8000c15 	stw	zero,48(sp)
    477c:	003ea806 	br	4220 <_dtoa_r+0x244>
    4780:	d9000b17 	ldw	r4,44(sp)
    4784:	202cc03a 	cmpne	r22,r4,zero
    4788:	b000c71e 	bne	r22,zero,4aa8 <_dtoa_r+0xacc>
    478c:	dc001117 	ldw	r16,68(sp)
    4790:	dc801017 	ldw	r18,64(sp)
    4794:	0027883a 	mov	r19,zero
    4798:	04000b0e 	bge	zero,r16,47c8 <_dtoa_r+0x7ec>
    479c:	d8c00a17 	ldw	r3,40(sp)
    47a0:	00c0090e 	bge	zero,r3,47c8 <_dtoa_r+0x7ec>
    47a4:	8005883a 	mov	r2,r16
    47a8:	1c011316 	blt	r3,r16,4bf8 <_dtoa_r+0xc1c>
    47ac:	d9000a17 	ldw	r4,40(sp)
    47b0:	d9801117 	ldw	r6,68(sp)
    47b4:	80a1c83a 	sub	r16,r16,r2
    47b8:	2089c83a 	sub	r4,r4,r2
    47bc:	308dc83a 	sub	r6,r6,r2
    47c0:	d9000a15 	stw	r4,40(sp)
    47c4:	d9801115 	stw	r6,68(sp)
    47c8:	d8801017 	ldw	r2,64(sp)
    47cc:	0080150e 	bge	zero,r2,4824 <_dtoa_r+0x848>
    47d0:	d8c00b17 	ldw	r3,44(sp)
    47d4:	1805003a 	cmpeq	r2,r3,zero
    47d8:	1001c91e 	bne	r2,zero,4f00 <_dtoa_r+0xf24>
    47dc:	04800e0e 	bge	zero,r18,4818 <_dtoa_r+0x83c>
    47e0:	d9001617 	ldw	r4,88(sp)
    47e4:	980b883a 	mov	r5,r19
    47e8:	900d883a 	mov	r6,r18
    47ec:	000828c0 	call	828c <__pow5mult>
    47f0:	d9001617 	ldw	r4,88(sp)
    47f4:	d9800717 	ldw	r6,28(sp)
    47f8:	100b883a 	mov	r5,r2
    47fc:	1027883a 	mov	r19,r2
    4800:	0007f680 	call	7f68 <__multiply>
    4804:	d9001617 	ldw	r4,88(sp)
    4808:	d9400717 	ldw	r5,28(sp)
    480c:	1023883a 	mov	r17,r2
    4810:	00074d80 	call	74d8 <_Bfree>
    4814:	dc400715 	stw	r17,28(sp)
    4818:	d9001017 	ldw	r4,64(sp)
    481c:	248dc83a 	sub	r6,r4,r18
    4820:	30010e1e 	bne	r6,zero,4c5c <_dtoa_r+0xc80>
    4824:	d9001617 	ldw	r4,88(sp)
    4828:	04400044 	movi	r17,1
    482c:	880b883a 	mov	r5,r17
    4830:	00081500 	call	8150 <__i2b>
    4834:	d9800917 	ldw	r6,36(sp)
    4838:	1025883a 	mov	r18,r2
    483c:	0180040e 	bge	zero,r6,4850 <_dtoa_r+0x874>
    4840:	d9001617 	ldw	r4,88(sp)
    4844:	100b883a 	mov	r5,r2
    4848:	000828c0 	call	828c <__pow5mult>
    484c:	1025883a 	mov	r18,r2
    4850:	d8801717 	ldw	r2,92(sp)
    4854:	8880f30e 	bge	r17,r2,4c24 <_dtoa_r+0xc48>
    4858:	0023883a 	mov	r17,zero
    485c:	d9800917 	ldw	r6,36(sp)
    4860:	30019e1e 	bne	r6,zero,4edc <_dtoa_r+0xf00>
    4864:	00c00044 	movi	r3,1
    4868:	d9000a17 	ldw	r4,40(sp)
    486c:	20c5883a 	add	r2,r4,r3
    4870:	10c007cc 	andi	r3,r2,31
    4874:	1800841e 	bne	r3,zero,4a88 <_dtoa_r+0xaac>
    4878:	00800704 	movi	r2,28
    487c:	d9000a17 	ldw	r4,40(sp)
    4880:	d9801117 	ldw	r6,68(sp)
    4884:	80a1883a 	add	r16,r16,r2
    4888:	2089883a 	add	r4,r4,r2
    488c:	308d883a 	add	r6,r6,r2
    4890:	d9000a15 	stw	r4,40(sp)
    4894:	d9801115 	stw	r6,68(sp)
    4898:	d8801117 	ldw	r2,68(sp)
    489c:	0080050e 	bge	zero,r2,48b4 <_dtoa_r+0x8d8>
    48a0:	d9400717 	ldw	r5,28(sp)
    48a4:	d9001617 	ldw	r4,88(sp)
    48a8:	100d883a 	mov	r6,r2
    48ac:	0007e1c0 	call	7e1c <__lshift>
    48b0:	d8800715 	stw	r2,28(sp)
    48b4:	d8c00a17 	ldw	r3,40(sp)
    48b8:	00c0050e 	bge	zero,r3,48d0 <_dtoa_r+0x8f4>
    48bc:	d9001617 	ldw	r4,88(sp)
    48c0:	900b883a 	mov	r5,r18
    48c4:	180d883a 	mov	r6,r3
    48c8:	0007e1c0 	call	7e1c <__lshift>
    48cc:	1025883a 	mov	r18,r2
    48d0:	d9000c17 	ldw	r4,48(sp)
    48d4:	2005003a 	cmpeq	r2,r4,zero
    48d8:	10016f26 	beq	r2,zero,4e98 <_dtoa_r+0xebc>
    48dc:	d9000f17 	ldw	r4,60(sp)
    48e0:	0102170e 	bge	zero,r4,5140 <_dtoa_r+0x1164>
    48e4:	d9800b17 	ldw	r6,44(sp)
    48e8:	3005003a 	cmpeq	r2,r6,zero
    48ec:	1000881e 	bne	r2,zero,4b10 <_dtoa_r+0xb34>
    48f0:	0400050e 	bge	zero,r16,4908 <_dtoa_r+0x92c>
    48f4:	d9001617 	ldw	r4,88(sp)
    48f8:	980b883a 	mov	r5,r19
    48fc:	800d883a 	mov	r6,r16
    4900:	0007e1c0 	call	7e1c <__lshift>
    4904:	1027883a 	mov	r19,r2
    4908:	8804c03a 	cmpne	r2,r17,zero
    490c:	1002541e 	bne	r2,zero,5260 <_dtoa_r+0x1284>
    4910:	980b883a 	mov	r5,r19
    4914:	dd800517 	ldw	r22,20(sp)
    4918:	dcc00615 	stw	r19,24(sp)
    491c:	a700004c 	andi	fp,r20,1
    4920:	2827883a 	mov	r19,r5
    4924:	d9000717 	ldw	r4,28(sp)
    4928:	900b883a 	mov	r5,r18
    492c:	0003dc40 	call	3dc4 <quorem>
    4930:	d9000717 	ldw	r4,28(sp)
    4934:	d9400617 	ldw	r5,24(sp)
    4938:	1023883a 	mov	r17,r2
    493c:	8dc00c04 	addi	r23,r17,48
    4940:	00076340 	call	7634 <__mcmp>
    4944:	d9001617 	ldw	r4,88(sp)
    4948:	900b883a 	mov	r5,r18
    494c:	980d883a 	mov	r6,r19
    4950:	1029883a 	mov	r20,r2
    4954:	0007c900 	call	7c90 <__mdiff>
    4958:	102b883a 	mov	r21,r2
    495c:	10800317 	ldw	r2,12(r2)
    4960:	1001281e 	bne	r2,zero,4e04 <_dtoa_r+0xe28>
    4964:	d9000717 	ldw	r4,28(sp)
    4968:	a80b883a 	mov	r5,r21
    496c:	00076340 	call	7634 <__mcmp>
    4970:	d9001617 	ldw	r4,88(sp)
    4974:	1021883a 	mov	r16,r2
    4978:	a80b883a 	mov	r5,r21
    497c:	00074d80 	call	74d8 <_Bfree>
    4980:	8000041e 	bne	r16,zero,4994 <_dtoa_r+0x9b8>
    4984:	d8801717 	ldw	r2,92(sp)
    4988:	1000021e 	bne	r2,zero,4994 <_dtoa_r+0x9b8>
    498c:	e004c03a 	cmpne	r2,fp,zero
    4990:	10011726 	beq	r2,zero,4df0 <_dtoa_r+0xe14>
    4994:	a0010616 	blt	r20,zero,4db0 <_dtoa_r+0xdd4>
    4998:	a000041e 	bne	r20,zero,49ac <_dtoa_r+0x9d0>
    499c:	d8c01717 	ldw	r3,92(sp)
    49a0:	1800021e 	bne	r3,zero,49ac <_dtoa_r+0x9d0>
    49a4:	e004c03a 	cmpne	r2,fp,zero
    49a8:	10010126 	beq	r2,zero,4db0 <_dtoa_r+0xdd4>
    49ac:	04023d16 	blt	zero,r16,52a4 <_dtoa_r+0x12c8>
    49b0:	b5c00005 	stb	r23,0(r22)
    49b4:	d9800517 	ldw	r6,20(sp)
    49b8:	d9000f17 	ldw	r4,60(sp)
    49bc:	b5800044 	addi	r22,r22,1
    49c0:	3105883a 	add	r2,r6,r4
    49c4:	b0806526 	beq	r22,r2,4b5c <_dtoa_r+0xb80>
    49c8:	d9400717 	ldw	r5,28(sp)
    49cc:	d9001617 	ldw	r4,88(sp)
    49d0:	01800284 	movi	r6,10
    49d4:	000f883a 	mov	r7,zero
    49d8:	000818c0 	call	818c <__multadd>
    49dc:	d8800715 	stw	r2,28(sp)
    49e0:	d8800617 	ldw	r2,24(sp)
    49e4:	14c10c26 	beq	r2,r19,4e18 <_dtoa_r+0xe3c>
    49e8:	d9400617 	ldw	r5,24(sp)
    49ec:	d9001617 	ldw	r4,88(sp)
    49f0:	01800284 	movi	r6,10
    49f4:	000f883a 	mov	r7,zero
    49f8:	000818c0 	call	818c <__multadd>
    49fc:	d9001617 	ldw	r4,88(sp)
    4a00:	980b883a 	mov	r5,r19
    4a04:	01800284 	movi	r6,10
    4a08:	000f883a 	mov	r7,zero
    4a0c:	d8800615 	stw	r2,24(sp)
    4a10:	000818c0 	call	818c <__multadd>
    4a14:	1027883a 	mov	r19,r2
    4a18:	003fc206 	br	4924 <_dtoa_r+0x948>
    4a1c:	2445c83a 	sub	r2,r4,r17
    4a20:	a088983a 	sll	r4,r20,r2
    4a24:	003e4b06 	br	4354 <_dtoa_r+0x378>
    4a28:	01bfffc4 	movi	r6,-1
    4a2c:	00800044 	movi	r2,1
    4a30:	d9800e15 	stw	r6,56(sp)
    4a34:	d9800f15 	stw	r6,60(sp)
    4a38:	d8800b15 	stw	r2,44(sp)
    4a3c:	d8c01617 	ldw	r3,88(sp)
    4a40:	008005c4 	movi	r2,23
    4a44:	18001115 	stw	zero,68(r3)
    4a48:	1580082e 	bgeu	r2,r22,4a6c <_dtoa_r+0xa90>
    4a4c:	00c00104 	movi	r3,4
    4a50:	0009883a 	mov	r4,zero
    4a54:	18c7883a 	add	r3,r3,r3
    4a58:	18800504 	addi	r2,r3,20
    4a5c:	21000044 	addi	r4,r4,1
    4a60:	b0bffc2e 	bgeu	r22,r2,4a54 <_dtoa_r+0xa78>
    4a64:	d9801617 	ldw	r6,88(sp)
    4a68:	31001115 	stw	r4,68(r6)
    4a6c:	dc000f17 	ldw	r16,60(sp)
    4a70:	003e4b06 	br	43a0 <_dtoa_r+0x3c4>
    4a74:	d9801717 	ldw	r6,92(sp)
    4a78:	0023883a 	mov	r17,zero
    4a7c:	31bfff04 	addi	r6,r6,-4
    4a80:	d9801715 	stw	r6,92(sp)
    4a84:	003df806 	br	4268 <_dtoa_r+0x28c>
    4a88:	00800804 	movi	r2,32
    4a8c:	10c9c83a 	sub	r4,r2,r3
    4a90:	00c00104 	movi	r3,4
    4a94:	19005a16 	blt	r3,r4,4c00 <_dtoa_r+0xc24>
    4a98:	008000c4 	movi	r2,3
    4a9c:	113f7e16 	blt	r2,r4,4898 <_dtoa_r+0x8bc>
    4aa0:	20800704 	addi	r2,r4,28
    4aa4:	003f7506 	br	487c <_dtoa_r+0x8a0>
    4aa8:	d9801717 	ldw	r6,92(sp)
    4aac:	00800044 	movi	r2,1
    4ab0:	1180a10e 	bge	r2,r6,4d38 <_dtoa_r+0xd5c>
    4ab4:	d9800f17 	ldw	r6,60(sp)
    4ab8:	d8c01017 	ldw	r3,64(sp)
    4abc:	30bfffc4 	addi	r2,r6,-1
    4ac0:	1881c616 	blt	r3,r2,51dc <_dtoa_r+0x1200>
    4ac4:	18a5c83a 	sub	r18,r3,r2
    4ac8:	d8800f17 	ldw	r2,60(sp)
    4acc:	10026216 	blt	r2,zero,5458 <_dtoa_r+0x147c>
    4ad0:	dc001117 	ldw	r16,68(sp)
    4ad4:	1007883a 	mov	r3,r2
    4ad8:	d9800a17 	ldw	r6,40(sp)
    4adc:	d8801117 	ldw	r2,68(sp)
    4ae0:	d9001617 	ldw	r4,88(sp)
    4ae4:	30cd883a 	add	r6,r6,r3
    4ae8:	10c5883a 	add	r2,r2,r3
    4aec:	01400044 	movi	r5,1
    4af0:	d9800a15 	stw	r6,40(sp)
    4af4:	d8801115 	stw	r2,68(sp)
    4af8:	00081500 	call	8150 <__i2b>
    4afc:	1027883a 	mov	r19,r2
    4b00:	003f2506 	br	4798 <_dtoa_r+0x7bc>
    4b04:	00c00074 	movhi	r3,1
    4b08:	18c63604 	addi	r3,r3,6360
    4b0c:	003d6706 	br	40ac <_dtoa_r+0xd0>
    4b10:	dd800517 	ldw	r22,20(sp)
    4b14:	04000044 	movi	r16,1
    4b18:	00000706 	br	4b38 <_dtoa_r+0xb5c>
    4b1c:	d9400717 	ldw	r5,28(sp)
    4b20:	d9001617 	ldw	r4,88(sp)
    4b24:	01800284 	movi	r6,10
    4b28:	000f883a 	mov	r7,zero
    4b2c:	000818c0 	call	818c <__multadd>
    4b30:	d8800715 	stw	r2,28(sp)
    4b34:	84000044 	addi	r16,r16,1
    4b38:	d9000717 	ldw	r4,28(sp)
    4b3c:	900b883a 	mov	r5,r18
    4b40:	0003dc40 	call	3dc4 <quorem>
    4b44:	15c00c04 	addi	r23,r2,48
    4b48:	b5c00005 	stb	r23,0(r22)
    4b4c:	d8c00f17 	ldw	r3,60(sp)
    4b50:	b5800044 	addi	r22,r22,1
    4b54:	80fff116 	blt	r16,r3,4b1c <_dtoa_r+0xb40>
    4b58:	d8000615 	stw	zero,24(sp)
    4b5c:	d9400717 	ldw	r5,28(sp)
    4b60:	d9001617 	ldw	r4,88(sp)
    4b64:	01800044 	movi	r6,1
    4b68:	0007e1c0 	call	7e1c <__lshift>
    4b6c:	1009883a 	mov	r4,r2
    4b70:	900b883a 	mov	r5,r18
    4b74:	d8800715 	stw	r2,28(sp)
    4b78:	00076340 	call	7634 <__mcmp>
    4b7c:	00803c0e 	bge	zero,r2,4c70 <_dtoa_r+0xc94>
    4b80:	b009883a 	mov	r4,r22
    4b84:	213fffc4 	addi	r4,r4,-1
    4b88:	21400003 	ldbu	r5,0(r4)
    4b8c:	00800e44 	movi	r2,57
    4b90:	28c03fcc 	andi	r3,r5,255
    4b94:	18c0201c 	xori	r3,r3,128
    4b98:	18ffe004 	addi	r3,r3,-128
    4b9c:	1881981e 	bne	r3,r2,5200 <_dtoa_r+0x1224>
    4ba0:	d9800517 	ldw	r6,20(sp)
    4ba4:	21bff71e 	bne	r4,r6,4b84 <_dtoa_r+0xba8>
    4ba8:	d8800d17 	ldw	r2,52(sp)
    4bac:	37000044 	addi	fp,r6,1
    4bb0:	10800044 	addi	r2,r2,1
    4bb4:	d8800d15 	stw	r2,52(sp)
    4bb8:	00800c44 	movi	r2,49
    4bbc:	30800005 	stb	r2,0(r6)
    4bc0:	d9001617 	ldw	r4,88(sp)
    4bc4:	900b883a 	mov	r5,r18
    4bc8:	00074d80 	call	74d8 <_Bfree>
    4bcc:	983ecd26 	beq	r19,zero,4704 <_dtoa_r+0x728>
    4bd0:	d8c00617 	ldw	r3,24(sp)
    4bd4:	18000426 	beq	r3,zero,4be8 <_dtoa_r+0xc0c>
    4bd8:	1cc00326 	beq	r3,r19,4be8 <_dtoa_r+0xc0c>
    4bdc:	d9001617 	ldw	r4,88(sp)
    4be0:	180b883a 	mov	r5,r3
    4be4:	00074d80 	call	74d8 <_Bfree>
    4be8:	d9001617 	ldw	r4,88(sp)
    4bec:	980b883a 	mov	r5,r19
    4bf0:	00074d80 	call	74d8 <_Bfree>
    4bf4:	003ec306 	br	4704 <_dtoa_r+0x728>
    4bf8:	1805883a 	mov	r2,r3
    4bfc:	003eeb06 	br	47ac <_dtoa_r+0x7d0>
    4c00:	d9800a17 	ldw	r6,40(sp)
    4c04:	d8c01117 	ldw	r3,68(sp)
    4c08:	20bfff04 	addi	r2,r4,-4
    4c0c:	308d883a 	add	r6,r6,r2
    4c10:	1887883a 	add	r3,r3,r2
    4c14:	80a1883a 	add	r16,r16,r2
    4c18:	d9800a15 	stw	r6,40(sp)
    4c1c:	d8c01115 	stw	r3,68(sp)
    4c20:	003f1d06 	br	4898 <_dtoa_r+0x8bc>
    4c24:	a03f0c1e 	bne	r20,zero,4858 <_dtoa_r+0x87c>
    4c28:	00800434 	movhi	r2,16
    4c2c:	10bfffc4 	addi	r2,r2,-1
    4c30:	a884703a 	and	r2,r21,r2
    4c34:	103f081e 	bne	r2,zero,4858 <_dtoa_r+0x87c>
    4c38:	a89ffc2c 	andhi	r2,r21,32752
    4c3c:	103f0626 	beq	r2,zero,4858 <_dtoa_r+0x87c>
    4c40:	d8c01117 	ldw	r3,68(sp)
    4c44:	d9000a17 	ldw	r4,40(sp)
    4c48:	18c00044 	addi	r3,r3,1
    4c4c:	21000044 	addi	r4,r4,1
    4c50:	d8c01115 	stw	r3,68(sp)
    4c54:	d9000a15 	stw	r4,40(sp)
    4c58:	003f0006 	br	485c <_dtoa_r+0x880>
    4c5c:	d9400717 	ldw	r5,28(sp)
    4c60:	d9001617 	ldw	r4,88(sp)
    4c64:	000828c0 	call	828c <__pow5mult>
    4c68:	d8800715 	stw	r2,28(sp)
    4c6c:	003eed06 	br	4824 <_dtoa_r+0x848>
    4c70:	1000021e 	bne	r2,zero,4c7c <_dtoa_r+0xca0>
    4c74:	b880004c 	andi	r2,r23,1
    4c78:	103fc11e 	bne	r2,zero,4b80 <_dtoa_r+0xba4>
    4c7c:	b5bfffc4 	addi	r22,r22,-1
    4c80:	b0c00007 	ldb	r3,0(r22)
    4c84:	00800c04 	movi	r2,48
    4c88:	18bffc26 	beq	r3,r2,4c7c <_dtoa_r+0xca0>
    4c8c:	b7000044 	addi	fp,r22,1
    4c90:	003fcb06 	br	4bc0 <_dtoa_r+0xbe4>
    4c94:	d9800d17 	ldw	r6,52(sp)
    4c98:	018fc83a 	sub	r7,zero,r6
    4c9c:	3801f726 	beq	r7,zero,547c <_dtoa_r+0x14a0>
    4ca0:	398003cc 	andi	r6,r7,15
    4ca4:	300c90fa 	slli	r6,r6,3
    4ca8:	01400074 	movhi	r5,1
    4cac:	29470004 	addi	r5,r5,7168
    4cb0:	d9001217 	ldw	r4,72(sp)
    4cb4:	314d883a 	add	r6,r6,r5
    4cb8:	30c00117 	ldw	r3,4(r6)
    4cbc:	30800017 	ldw	r2,0(r6)
    4cc0:	d9401317 	ldw	r5,76(sp)
    4cc4:	3821d13a 	srai	r16,r7,4
    4cc8:	100d883a 	mov	r6,r2
    4ccc:	180f883a 	mov	r7,r3
    4cd0:	000d8ac0 	call	d8ac <__muldf3>
    4cd4:	1011883a 	mov	r8,r2
    4cd8:	1813883a 	mov	r9,r3
    4cdc:	1029883a 	mov	r20,r2
    4ce0:	182b883a 	mov	r21,r3
    4ce4:	8001e526 	beq	r16,zero,547c <_dtoa_r+0x14a0>
    4ce8:	05800084 	movi	r22,2
    4cec:	04400074 	movhi	r17,1
    4cf0:	8c473204 	addi	r17,r17,7368
    4cf4:	8080004c 	andi	r2,r16,1
    4cf8:	1005003a 	cmpeq	r2,r2,zero
    4cfc:	1000081e 	bne	r2,zero,4d20 <_dtoa_r+0xd44>
    4d00:	89800017 	ldw	r6,0(r17)
    4d04:	89c00117 	ldw	r7,4(r17)
    4d08:	480b883a 	mov	r5,r9
    4d0c:	4009883a 	mov	r4,r8
    4d10:	000d8ac0 	call	d8ac <__muldf3>
    4d14:	1011883a 	mov	r8,r2
    4d18:	b5800044 	addi	r22,r22,1
    4d1c:	1813883a 	mov	r9,r3
    4d20:	8021d07a 	srai	r16,r16,1
    4d24:	8c400204 	addi	r17,r17,8
    4d28:	803ff21e 	bne	r16,zero,4cf4 <_dtoa_r+0xd18>
    4d2c:	4029883a 	mov	r20,r8
    4d30:	482b883a 	mov	r21,r9
    4d34:	003dca06 	br	4460 <_dtoa_r+0x484>
    4d38:	d9000817 	ldw	r4,32(sp)
    4d3c:	2005003a 	cmpeq	r2,r4,zero
    4d40:	1001f61e 	bne	r2,zero,551c <_dtoa_r+0x1540>
    4d44:	dc001117 	ldw	r16,68(sp)
    4d48:	dc801017 	ldw	r18,64(sp)
    4d4c:	18c10cc4 	addi	r3,r3,1075
    4d50:	003f6106 	br	4ad8 <_dtoa_r+0xafc>
    4d54:	d8000b15 	stw	zero,44(sp)
    4d58:	d9802617 	ldw	r6,152(sp)
    4d5c:	d8c00d17 	ldw	r3,52(sp)
    4d60:	30800044 	addi	r2,r6,1
    4d64:	18ad883a 	add	r22,r3,r2
    4d68:	b13fffc4 	addi	r4,r22,-1
    4d6c:	d9000e15 	stw	r4,56(sp)
    4d70:	0581f60e 	bge	zero,r22,554c <_dtoa_r+0x1570>
    4d74:	dd800f15 	stw	r22,60(sp)
    4d78:	003f3006 	br	4a3c <_dtoa_r+0xa60>
    4d7c:	d8000b15 	stw	zero,44(sp)
    4d80:	d9002617 	ldw	r4,152(sp)
    4d84:	0101eb0e 	bge	zero,r4,5534 <_dtoa_r+0x1558>
    4d88:	202d883a 	mov	r22,r4
    4d8c:	d9000e15 	stw	r4,56(sp)
    4d90:	d9000f15 	stw	r4,60(sp)
    4d94:	003f2906 	br	4a3c <_dtoa_r+0xa60>
    4d98:	01800044 	movi	r6,1
    4d9c:	d9800b15 	stw	r6,44(sp)
    4da0:	003ff706 	br	4d80 <_dtoa_r+0xda4>
    4da4:	01000044 	movi	r4,1
    4da8:	d9000b15 	stw	r4,44(sp)
    4dac:	003fea06 	br	4d58 <_dtoa_r+0xd7c>
    4db0:	04000c0e 	bge	zero,r16,4de4 <_dtoa_r+0xe08>
    4db4:	d9400717 	ldw	r5,28(sp)
    4db8:	d9001617 	ldw	r4,88(sp)
    4dbc:	01800044 	movi	r6,1
    4dc0:	0007e1c0 	call	7e1c <__lshift>
    4dc4:	1009883a 	mov	r4,r2
    4dc8:	900b883a 	mov	r5,r18
    4dcc:	d8800715 	stw	r2,28(sp)
    4dd0:	00076340 	call	7634 <__mcmp>
    4dd4:	0081e00e 	bge	zero,r2,5558 <_dtoa_r+0x157c>
    4dd8:	bdc00044 	addi	r23,r23,1
    4ddc:	00800e84 	movi	r2,58
    4de0:	b881a226 	beq	r23,r2,546c <_dtoa_r+0x1490>
    4de4:	b7000044 	addi	fp,r22,1
    4de8:	b5c00005 	stb	r23,0(r22)
    4dec:	003f7406 	br	4bc0 <_dtoa_r+0xbe4>
    4df0:	00800e44 	movi	r2,57
    4df4:	b8819d26 	beq	r23,r2,546c <_dtoa_r+0x1490>
    4df8:	053ffa0e 	bge	zero,r20,4de4 <_dtoa_r+0xe08>
    4dfc:	8dc00c44 	addi	r23,r17,49
    4e00:	003ff806 	br	4de4 <_dtoa_r+0xe08>
    4e04:	d9001617 	ldw	r4,88(sp)
    4e08:	a80b883a 	mov	r5,r21
    4e0c:	04000044 	movi	r16,1
    4e10:	00074d80 	call	74d8 <_Bfree>
    4e14:	003edf06 	br	4994 <_dtoa_r+0x9b8>
    4e18:	d9001617 	ldw	r4,88(sp)
    4e1c:	980b883a 	mov	r5,r19
    4e20:	01800284 	movi	r6,10
    4e24:	000f883a 	mov	r7,zero
    4e28:	000818c0 	call	818c <__multadd>
    4e2c:	1027883a 	mov	r19,r2
    4e30:	d8800615 	stw	r2,24(sp)
    4e34:	003ebb06 	br	4924 <_dtoa_r+0x948>
    4e38:	d9801117 	ldw	r6,68(sp)
    4e3c:	d8800d17 	ldw	r2,52(sp)
    4e40:	d8000915 	stw	zero,36(sp)
    4e44:	308dc83a 	sub	r6,r6,r2
    4e48:	0087c83a 	sub	r3,zero,r2
    4e4c:	d9801115 	stw	r6,68(sp)
    4e50:	d8c01015 	stw	r3,64(sp)
    4e54:	003cfe06 	br	4250 <_dtoa_r+0x274>
    4e58:	018dc83a 	sub	r6,zero,r6
    4e5c:	d9801115 	stw	r6,68(sp)
    4e60:	d8000a15 	stw	zero,40(sp)
    4e64:	003cf306 	br	4234 <_dtoa_r+0x258>
    4e68:	d9000d17 	ldw	r4,52(sp)
    4e6c:	000e1f80 	call	e1f8 <__floatsidf>
    4e70:	880b883a 	mov	r5,r17
    4e74:	8009883a 	mov	r4,r16
    4e78:	180f883a 	mov	r7,r3
    4e7c:	100d883a 	mov	r6,r2
    4e80:	000df500 	call	df50 <__nedf2>
    4e84:	103ce126 	beq	r2,zero,420c <_dtoa_r+0x230>
    4e88:	d9800d17 	ldw	r6,52(sp)
    4e8c:	31bfffc4 	addi	r6,r6,-1
    4e90:	d9800d15 	stw	r6,52(sp)
    4e94:	003cdd06 	br	420c <_dtoa_r+0x230>
    4e98:	d9000717 	ldw	r4,28(sp)
    4e9c:	900b883a 	mov	r5,r18
    4ea0:	00076340 	call	7634 <__mcmp>
    4ea4:	103e8d0e 	bge	r2,zero,48dc <_dtoa_r+0x900>
    4ea8:	d9400717 	ldw	r5,28(sp)
    4eac:	d9001617 	ldw	r4,88(sp)
    4eb0:	01800284 	movi	r6,10
    4eb4:	000f883a 	mov	r7,zero
    4eb8:	000818c0 	call	818c <__multadd>
    4ebc:	d9800d17 	ldw	r6,52(sp)
    4ec0:	d8800715 	stw	r2,28(sp)
    4ec4:	31bfffc4 	addi	r6,r6,-1
    4ec8:	d9800d15 	stw	r6,52(sp)
    4ecc:	b001a71e 	bne	r22,zero,556c <_dtoa_r+0x1590>
    4ed0:	d8800e17 	ldw	r2,56(sp)
    4ed4:	d8800f15 	stw	r2,60(sp)
    4ed8:	003e8006 	br	48dc <_dtoa_r+0x900>
    4edc:	90800417 	ldw	r2,16(r18)
    4ee0:	1085883a 	add	r2,r2,r2
    4ee4:	1085883a 	add	r2,r2,r2
    4ee8:	1485883a 	add	r2,r2,r18
    4eec:	11000417 	ldw	r4,16(r2)
    4ef0:	00075000 	call	7500 <__hi0bits>
    4ef4:	00c00804 	movi	r3,32
    4ef8:	1887c83a 	sub	r3,r3,r2
    4efc:	003e5a06 	br	4868 <_dtoa_r+0x88c>
    4f00:	d9400717 	ldw	r5,28(sp)
    4f04:	d9801017 	ldw	r6,64(sp)
    4f08:	d9001617 	ldw	r4,88(sp)
    4f0c:	000828c0 	call	828c <__pow5mult>
    4f10:	d8800715 	stw	r2,28(sp)
    4f14:	003e4306 	br	4824 <_dtoa_r+0x848>
    4f18:	d9800f17 	ldw	r6,60(sp)
    4f1c:	d8800d17 	ldw	r2,52(sp)
    4f20:	d9800315 	stw	r6,12(sp)
    4f24:	d8800415 	stw	r2,16(sp)
    4f28:	d8c00b17 	ldw	r3,44(sp)
    4f2c:	1805003a 	cmpeq	r2,r3,zero
    4f30:	1000e21e 	bne	r2,zero,52bc <_dtoa_r+0x12e0>
    4f34:	d9000317 	ldw	r4,12(sp)
    4f38:	0005883a 	mov	r2,zero
    4f3c:	00cff834 	movhi	r3,16352
    4f40:	200c90fa 	slli	r6,r4,3
    4f44:	01000074 	movhi	r4,1
    4f48:	21070004 	addi	r4,r4,7168
    4f4c:	180b883a 	mov	r5,r3
    4f50:	310d883a 	add	r6,r6,r4
    4f54:	327fff17 	ldw	r9,-4(r6)
    4f58:	323ffe17 	ldw	r8,-8(r6)
    4f5c:	1009883a 	mov	r4,r2
    4f60:	480f883a 	mov	r7,r9
    4f64:	400d883a 	mov	r6,r8
    4f68:	000dc700 	call	dc70 <__divdf3>
    4f6c:	180b883a 	mov	r5,r3
    4f70:	b00d883a 	mov	r6,r22
    4f74:	b80f883a 	mov	r7,r23
    4f78:	1009883a 	mov	r4,r2
    4f7c:	000d7b80 	call	d7b8 <__subdf3>
    4f80:	a80b883a 	mov	r5,r21
    4f84:	a009883a 	mov	r4,r20
    4f88:	d8c01915 	stw	r3,100(sp)
    4f8c:	d8801815 	stw	r2,96(sp)
    4f90:	000e2f00 	call	e2f0 <__fixdfsi>
    4f94:	1009883a 	mov	r4,r2
    4f98:	1027883a 	mov	r19,r2
    4f9c:	000e1f80 	call	e1f8 <__floatsidf>
    4fa0:	a80b883a 	mov	r5,r21
    4fa4:	a009883a 	mov	r4,r20
    4fa8:	180f883a 	mov	r7,r3
    4fac:	100d883a 	mov	r6,r2
    4fb0:	000d7b80 	call	d7b8 <__subdf3>
    4fb4:	d9801817 	ldw	r6,96(sp)
    4fb8:	1823883a 	mov	r17,r3
    4fbc:	d8801415 	stw	r2,80(sp)
    4fc0:	302d883a 	mov	r22,r6
    4fc4:	d9800517 	ldw	r6,20(sp)
    4fc8:	9cc00c04 	addi	r19,r19,48
    4fcc:	dc401515 	stw	r17,84(sp)
    4fd0:	d8c01917 	ldw	r3,100(sp)
    4fd4:	34c00005 	stb	r19,0(r6)
    4fd8:	d8800517 	ldw	r2,20(sp)
    4fdc:	d9401917 	ldw	r5,100(sp)
    4fe0:	d9801417 	ldw	r6,80(sp)
    4fe4:	b009883a 	mov	r4,r22
    4fe8:	880f883a 	mov	r7,r17
    4fec:	182f883a 	mov	r23,r3
    4ff0:	17000044 	addi	fp,r2,1
    4ff4:	000dfd80 	call	dfd8 <__gtdf2>
    4ff8:	00804e16 	blt	zero,r2,5134 <_dtoa_r+0x1158>
    4ffc:	d9801417 	ldw	r6,80(sp)
    5000:	0005883a 	mov	r2,zero
    5004:	00cffc34 	movhi	r3,16368
    5008:	180b883a 	mov	r5,r3
    500c:	880f883a 	mov	r7,r17
    5010:	1009883a 	mov	r4,r2
    5014:	000d7b80 	call	d7b8 <__subdf3>
    5018:	d9401917 	ldw	r5,100(sp)
    501c:	180f883a 	mov	r7,r3
    5020:	b009883a 	mov	r4,r22
    5024:	100d883a 	mov	r6,r2
    5028:	000dfd80 	call	dfd8 <__gtdf2>
    502c:	00bda216 	blt	zero,r2,46b8 <_dtoa_r+0x6dc>
    5030:	d8c00317 	ldw	r3,12(sp)
    5034:	00800044 	movi	r2,1
    5038:	10c01216 	blt	r2,r3,5084 <_dtoa_r+0x10a8>
    503c:	003d4506 	br	4554 <_dtoa_r+0x578>
    5040:	d9801417 	ldw	r6,80(sp)
    5044:	0005883a 	mov	r2,zero
    5048:	00cffc34 	movhi	r3,16368
    504c:	180b883a 	mov	r5,r3
    5050:	880f883a 	mov	r7,r17
    5054:	1009883a 	mov	r4,r2
    5058:	000d7b80 	call	d7b8 <__subdf3>
    505c:	d9c01b17 	ldw	r7,108(sp)
    5060:	180b883a 	mov	r5,r3
    5064:	1009883a 	mov	r4,r2
    5068:	b00d883a 	mov	r6,r22
    506c:	000e0e80 	call	e0e8 <__ltdf2>
    5070:	103d9116 	blt	r2,zero,46b8 <_dtoa_r+0x6dc>
    5074:	d9800517 	ldw	r6,20(sp)
    5078:	d9000317 	ldw	r4,12(sp)
    507c:	3105883a 	add	r2,r6,r4
    5080:	e0bd3426 	beq	fp,r2,4554 <_dtoa_r+0x578>
    5084:	04500934 	movhi	r17,16420
    5088:	0021883a 	mov	r16,zero
    508c:	b80b883a 	mov	r5,r23
    5090:	b009883a 	mov	r4,r22
    5094:	800d883a 	mov	r6,r16
    5098:	880f883a 	mov	r7,r17
    509c:	000d8ac0 	call	d8ac <__muldf3>
    50a0:	d9401517 	ldw	r5,84(sp)
    50a4:	d9001417 	ldw	r4,80(sp)
    50a8:	880f883a 	mov	r7,r17
    50ac:	000d883a 	mov	r6,zero
    50b0:	d8801a15 	stw	r2,104(sp)
    50b4:	d8c01b15 	stw	r3,108(sp)
    50b8:	000d8ac0 	call	d8ac <__muldf3>
    50bc:	180b883a 	mov	r5,r3
    50c0:	1009883a 	mov	r4,r2
    50c4:	1823883a 	mov	r17,r3
    50c8:	1021883a 	mov	r16,r2
    50cc:	000e2f00 	call	e2f0 <__fixdfsi>
    50d0:	1009883a 	mov	r4,r2
    50d4:	102b883a 	mov	r21,r2
    50d8:	000e1f80 	call	e1f8 <__floatsidf>
    50dc:	880b883a 	mov	r5,r17
    50e0:	8009883a 	mov	r4,r16
    50e4:	180f883a 	mov	r7,r3
    50e8:	100d883a 	mov	r6,r2
    50ec:	000d7b80 	call	d7b8 <__subdf3>
    50f0:	1021883a 	mov	r16,r2
    50f4:	d9001b17 	ldw	r4,108(sp)
    50f8:	1823883a 	mov	r17,r3
    50fc:	dc001415 	stw	r16,80(sp)
    5100:	ad400c04 	addi	r21,r21,48
    5104:	dc401515 	stw	r17,84(sp)
    5108:	d8801a17 	ldw	r2,104(sp)
    510c:	e5400005 	stb	r21,0(fp)
    5110:	202f883a 	mov	r23,r4
    5114:	d9c01b17 	ldw	r7,108(sp)
    5118:	d9001417 	ldw	r4,80(sp)
    511c:	880b883a 	mov	r5,r17
    5120:	100d883a 	mov	r6,r2
    5124:	102d883a 	mov	r22,r2
    5128:	e7000044 	addi	fp,fp,1
    512c:	000e0e80 	call	e0e8 <__ltdf2>
    5130:	103fc30e 	bge	r2,zero,5040 <_dtoa_r+0x1064>
    5134:	d9000417 	ldw	r4,16(sp)
    5138:	d9000d15 	stw	r4,52(sp)
    513c:	003d7106 	br	4704 <_dtoa_r+0x728>
    5140:	d9801717 	ldw	r6,92(sp)
    5144:	00800084 	movi	r2,2
    5148:	11bde60e 	bge	r2,r6,48e4 <_dtoa_r+0x908>
    514c:	203cfb1e 	bne	r4,zero,453c <_dtoa_r+0x560>
    5150:	d9001617 	ldw	r4,88(sp)
    5154:	900b883a 	mov	r5,r18
    5158:	01800144 	movi	r6,5
    515c:	000f883a 	mov	r7,zero
    5160:	000818c0 	call	818c <__multadd>
    5164:	d9000717 	ldw	r4,28(sp)
    5168:	100b883a 	mov	r5,r2
    516c:	1025883a 	mov	r18,r2
    5170:	00076340 	call	7634 <__mcmp>
    5174:	00bcf10e 	bge	zero,r2,453c <_dtoa_r+0x560>
    5178:	d8c00d17 	ldw	r3,52(sp)
    517c:	d9000517 	ldw	r4,20(sp)
    5180:	d8000615 	stw	zero,24(sp)
    5184:	18c00044 	addi	r3,r3,1
    5188:	d8c00d15 	stw	r3,52(sp)
    518c:	00800c44 	movi	r2,49
    5190:	27000044 	addi	fp,r4,1
    5194:	20800005 	stb	r2,0(r4)
    5198:	003e8906 	br	4bc0 <_dtoa_r+0xbe4>
    519c:	d8c00517 	ldw	r3,20(sp)
    51a0:	003bc206 	br	40ac <_dtoa_r+0xd0>
    51a4:	01800074 	movhi	r6,1
    51a8:	31873204 	addi	r6,r6,7368
    51ac:	30c00917 	ldw	r3,36(r6)
    51b0:	30800817 	ldw	r2,32(r6)
    51b4:	d9001217 	ldw	r4,72(sp)
    51b8:	d9401317 	ldw	r5,76(sp)
    51bc:	180f883a 	mov	r7,r3
    51c0:	100d883a 	mov	r6,r2
    51c4:	000dc700 	call	dc70 <__divdf3>
    51c8:	948003cc 	andi	r18,r18,15
    51cc:	058000c4 	movi	r22,3
    51d0:	1029883a 	mov	r20,r2
    51d4:	182b883a 	mov	r21,r3
    51d8:	003c8906 	br	4400 <_dtoa_r+0x424>
    51dc:	d9001017 	ldw	r4,64(sp)
    51e0:	d9800917 	ldw	r6,36(sp)
    51e4:	0025883a 	mov	r18,zero
    51e8:	1105c83a 	sub	r2,r2,r4
    51ec:	2089883a 	add	r4,r4,r2
    51f0:	308d883a 	add	r6,r6,r2
    51f4:	d9001015 	stw	r4,64(sp)
    51f8:	d9800915 	stw	r6,36(sp)
    51fc:	003e3206 	br	4ac8 <_dtoa_r+0xaec>
    5200:	28800044 	addi	r2,r5,1
    5204:	27000044 	addi	fp,r4,1
    5208:	20800005 	stb	r2,0(r4)
    520c:	003e6c06 	br	4bc0 <_dtoa_r+0xbe4>
    5210:	d8800f17 	ldw	r2,60(sp)
    5214:	00bce016 	blt	zero,r2,4598 <_dtoa_r+0x5bc>
    5218:	d9800f17 	ldw	r6,60(sp)
    521c:	303cc51e 	bne	r6,zero,4534 <_dtoa_r+0x558>
    5220:	0005883a 	mov	r2,zero
    5224:	00d00534 	movhi	r3,16404
    5228:	980b883a 	mov	r5,r19
    522c:	180f883a 	mov	r7,r3
    5230:	9009883a 	mov	r4,r18
    5234:	100d883a 	mov	r6,r2
    5238:	000d8ac0 	call	d8ac <__muldf3>
    523c:	180b883a 	mov	r5,r3
    5240:	a80f883a 	mov	r7,r21
    5244:	1009883a 	mov	r4,r2
    5248:	a00d883a 	mov	r6,r20
    524c:	000e0600 	call	e060 <__gedf2>
    5250:	103cb80e 	bge	r2,zero,4534 <_dtoa_r+0x558>
    5254:	0027883a 	mov	r19,zero
    5258:	0025883a 	mov	r18,zero
    525c:	003fc606 	br	5178 <_dtoa_r+0x119c>
    5260:	99400117 	ldw	r5,4(r19)
    5264:	d9001617 	ldw	r4,88(sp)
    5268:	0007a580 	call	7a58 <_Balloc>
    526c:	99800417 	ldw	r6,16(r19)
    5270:	11000304 	addi	r4,r2,12
    5274:	99400304 	addi	r5,r19,12
    5278:	318d883a 	add	r6,r6,r6
    527c:	318d883a 	add	r6,r6,r6
    5280:	31800204 	addi	r6,r6,8
    5284:	1023883a 	mov	r17,r2
    5288:	00072c00 	call	72c0 <memcpy>
    528c:	d9001617 	ldw	r4,88(sp)
    5290:	880b883a 	mov	r5,r17
    5294:	01800044 	movi	r6,1
    5298:	0007e1c0 	call	7e1c <__lshift>
    529c:	100b883a 	mov	r5,r2
    52a0:	003d9c06 	br	4914 <_dtoa_r+0x938>
    52a4:	00800e44 	movi	r2,57
    52a8:	b8807026 	beq	r23,r2,546c <_dtoa_r+0x1490>
    52ac:	b8800044 	addi	r2,r23,1
    52b0:	b7000044 	addi	fp,r22,1
    52b4:	b0800005 	stb	r2,0(r22)
    52b8:	003e4106 	br	4bc0 <_dtoa_r+0xbe4>
    52bc:	d8800317 	ldw	r2,12(sp)
    52c0:	01800074 	movhi	r6,1
    52c4:	31870004 	addi	r6,r6,7168
    52c8:	b009883a 	mov	r4,r22
    52cc:	100e90fa 	slli	r7,r2,3
    52d0:	b80b883a 	mov	r5,r23
    52d4:	398f883a 	add	r7,r7,r6
    52d8:	38bffe17 	ldw	r2,-8(r7)
    52dc:	d9800517 	ldw	r6,20(sp)
    52e0:	38ffff17 	ldw	r3,-4(r7)
    52e4:	37000044 	addi	fp,r6,1
    52e8:	180f883a 	mov	r7,r3
    52ec:	100d883a 	mov	r6,r2
    52f0:	000d8ac0 	call	d8ac <__muldf3>
    52f4:	a80b883a 	mov	r5,r21
    52f8:	a009883a 	mov	r4,r20
    52fc:	182f883a 	mov	r23,r3
    5300:	102d883a 	mov	r22,r2
    5304:	000e2f00 	call	e2f0 <__fixdfsi>
    5308:	1009883a 	mov	r4,r2
    530c:	1027883a 	mov	r19,r2
    5310:	000e1f80 	call	e1f8 <__floatsidf>
    5314:	a80b883a 	mov	r5,r21
    5318:	a009883a 	mov	r4,r20
    531c:	180f883a 	mov	r7,r3
    5320:	100d883a 	mov	r6,r2
    5324:	000d7b80 	call	d7b8 <__subdf3>
    5328:	180b883a 	mov	r5,r3
    532c:	d8c00517 	ldw	r3,20(sp)
    5330:	9cc00c04 	addi	r19,r19,48
    5334:	1009883a 	mov	r4,r2
    5338:	1cc00005 	stb	r19,0(r3)
    533c:	2021883a 	mov	r16,r4
    5340:	d9000317 	ldw	r4,12(sp)
    5344:	00800044 	movi	r2,1
    5348:	2823883a 	mov	r17,r5
    534c:	20802226 	beq	r4,r2,53d8 <_dtoa_r+0x13fc>
    5350:	1029883a 	mov	r20,r2
    5354:	0005883a 	mov	r2,zero
    5358:	00d00934 	movhi	r3,16420
    535c:	180f883a 	mov	r7,r3
    5360:	100d883a 	mov	r6,r2
    5364:	880b883a 	mov	r5,r17
    5368:	8009883a 	mov	r4,r16
    536c:	000d8ac0 	call	d8ac <__muldf3>
    5370:	180b883a 	mov	r5,r3
    5374:	1009883a 	mov	r4,r2
    5378:	1823883a 	mov	r17,r3
    537c:	1021883a 	mov	r16,r2
    5380:	000e2f00 	call	e2f0 <__fixdfsi>
    5384:	1009883a 	mov	r4,r2
    5388:	102b883a 	mov	r21,r2
    538c:	000e1f80 	call	e1f8 <__floatsidf>
    5390:	880b883a 	mov	r5,r17
    5394:	8009883a 	mov	r4,r16
    5398:	180f883a 	mov	r7,r3
    539c:	100d883a 	mov	r6,r2
    53a0:	000d7b80 	call	d7b8 <__subdf3>
    53a4:	180b883a 	mov	r5,r3
    53a8:	d8c00517 	ldw	r3,20(sp)
    53ac:	1009883a 	mov	r4,r2
    53b0:	ad400c04 	addi	r21,r21,48
    53b4:	1d05883a 	add	r2,r3,r20
    53b8:	15400005 	stb	r21,0(r2)
    53bc:	2021883a 	mov	r16,r4
    53c0:	d9000317 	ldw	r4,12(sp)
    53c4:	a5000044 	addi	r20,r20,1
    53c8:	2823883a 	mov	r17,r5
    53cc:	a13fe11e 	bne	r20,r4,5354 <_dtoa_r+0x1378>
    53d0:	e505883a 	add	r2,fp,r20
    53d4:	173fffc4 	addi	fp,r2,-1
    53d8:	0025883a 	mov	r18,zero
    53dc:	04cff834 	movhi	r19,16352
    53e0:	b009883a 	mov	r4,r22
    53e4:	b80b883a 	mov	r5,r23
    53e8:	900d883a 	mov	r6,r18
    53ec:	980f883a 	mov	r7,r19
    53f0:	000d8380 	call	d838 <__adddf3>
    53f4:	180b883a 	mov	r5,r3
    53f8:	1009883a 	mov	r4,r2
    53fc:	800d883a 	mov	r6,r16
    5400:	880f883a 	mov	r7,r17
    5404:	000e0e80 	call	e0e8 <__ltdf2>
    5408:	103cab16 	blt	r2,zero,46b8 <_dtoa_r+0x6dc>
    540c:	0009883a 	mov	r4,zero
    5410:	980b883a 	mov	r5,r19
    5414:	b80f883a 	mov	r7,r23
    5418:	b00d883a 	mov	r6,r22
    541c:	000d7b80 	call	d7b8 <__subdf3>
    5420:	180b883a 	mov	r5,r3
    5424:	880f883a 	mov	r7,r17
    5428:	1009883a 	mov	r4,r2
    542c:	800d883a 	mov	r6,r16
    5430:	000dfd80 	call	dfd8 <__gtdf2>
    5434:	00bc470e 	bge	zero,r2,4554 <_dtoa_r+0x578>
    5438:	00c00c04 	movi	r3,48
    543c:	e73fffc4 	addi	fp,fp,-1
    5440:	e0800007 	ldb	r2,0(fp)
    5444:	10fffd26 	beq	r2,r3,543c <_dtoa_r+0x1460>
    5448:	d9800417 	ldw	r6,16(sp)
    544c:	e7000044 	addi	fp,fp,1
    5450:	d9800d15 	stw	r6,52(sp)
    5454:	003cab06 	br	4704 <_dtoa_r+0x728>
    5458:	d8c00f17 	ldw	r3,60(sp)
    545c:	d9001117 	ldw	r4,68(sp)
    5460:	20e1c83a 	sub	r16,r4,r3
    5464:	0007883a 	mov	r3,zero
    5468:	003d9b06 	br	4ad8 <_dtoa_r+0xafc>
    546c:	00800e44 	movi	r2,57
    5470:	b0800005 	stb	r2,0(r22)
    5474:	b5800044 	addi	r22,r22,1
    5478:	003dc106 	br	4b80 <_dtoa_r+0xba4>
    547c:	05800084 	movi	r22,2
    5480:	003bf706 	br	4460 <_dtoa_r+0x484>
    5484:	d9000f17 	ldw	r4,60(sp)
    5488:	013c000e 	bge	zero,r4,448c <_dtoa_r+0x4b0>
    548c:	d9800e17 	ldw	r6,56(sp)
    5490:	01bc300e 	bge	zero,r6,4554 <_dtoa_r+0x578>
    5494:	0005883a 	mov	r2,zero
    5498:	00d00934 	movhi	r3,16420
    549c:	a80b883a 	mov	r5,r21
    54a0:	180f883a 	mov	r7,r3
    54a4:	a009883a 	mov	r4,r20
    54a8:	100d883a 	mov	r6,r2
    54ac:	000d8ac0 	call	d8ac <__muldf3>
    54b0:	b1000044 	addi	r4,r22,1
    54b4:	1021883a 	mov	r16,r2
    54b8:	1823883a 	mov	r17,r3
    54bc:	000e1f80 	call	e1f8 <__floatsidf>
    54c0:	880b883a 	mov	r5,r17
    54c4:	8009883a 	mov	r4,r16
    54c8:	180f883a 	mov	r7,r3
    54cc:	100d883a 	mov	r6,r2
    54d0:	000d8ac0 	call	d8ac <__muldf3>
    54d4:	0011883a 	mov	r8,zero
    54d8:	02500734 	movhi	r9,16412
    54dc:	180b883a 	mov	r5,r3
    54e0:	480f883a 	mov	r7,r9
    54e4:	1009883a 	mov	r4,r2
    54e8:	400d883a 	mov	r6,r8
    54ec:	000d8380 	call	d838 <__adddf3>
    54f0:	102d883a 	mov	r22,r2
    54f4:	00bf3034 	movhi	r2,64704
    54f8:	10ef883a 	add	r23,r2,r3
    54fc:	d8800d17 	ldw	r2,52(sp)
    5500:	d8c00e17 	ldw	r3,56(sp)
    5504:	8029883a 	mov	r20,r16
    5508:	10bfffc4 	addi	r2,r2,-1
    550c:	882b883a 	mov	r21,r17
    5510:	d8800415 	stw	r2,16(sp)
    5514:	d8c00315 	stw	r3,12(sp)
    5518:	003e8306 	br	4f28 <_dtoa_r+0xf4c>
    551c:	d8800117 	ldw	r2,4(sp)
    5520:	dc001117 	ldw	r16,68(sp)
    5524:	dc801017 	ldw	r18,64(sp)
    5528:	00c00d84 	movi	r3,54
    552c:	1887c83a 	sub	r3,r3,r2
    5530:	003d6906 	br	4ad8 <_dtoa_r+0xafc>
    5534:	01800044 	movi	r6,1
    5538:	3021883a 	mov	r16,r6
    553c:	d9800f15 	stw	r6,60(sp)
    5540:	d9802615 	stw	r6,152(sp)
    5544:	d9800e15 	stw	r6,56(sp)
    5548:	003b9306 	br	4398 <_dtoa_r+0x3bc>
    554c:	b021883a 	mov	r16,r22
    5550:	dd800f15 	stw	r22,60(sp)
    5554:	003b9006 	br	4398 <_dtoa_r+0x3bc>
    5558:	103e221e 	bne	r2,zero,4de4 <_dtoa_r+0xe08>
    555c:	b880004c 	andi	r2,r23,1
    5560:	1005003a 	cmpeq	r2,r2,zero
    5564:	103e1f1e 	bne	r2,zero,4de4 <_dtoa_r+0xe08>
    5568:	003e1b06 	br	4dd8 <_dtoa_r+0xdfc>
    556c:	d9001617 	ldw	r4,88(sp)
    5570:	980b883a 	mov	r5,r19
    5574:	01800284 	movi	r6,10
    5578:	000f883a 	mov	r7,zero
    557c:	000818c0 	call	818c <__multadd>
    5580:	d8c00e17 	ldw	r3,56(sp)
    5584:	1027883a 	mov	r19,r2
    5588:	d8c00f15 	stw	r3,60(sp)
    558c:	003cd306 	br	48dc <_dtoa_r+0x900>

00005590 <_fflush_r>:
    5590:	defffb04 	addi	sp,sp,-20
    5594:	dcc00315 	stw	r19,12(sp)
    5598:	dc800215 	stw	r18,8(sp)
    559c:	dfc00415 	stw	ra,16(sp)
    55a0:	dc400115 	stw	r17,4(sp)
    55a4:	dc000015 	stw	r16,0(sp)
    55a8:	2027883a 	mov	r19,r4
    55ac:	2825883a 	mov	r18,r5
    55b0:	20000226 	beq	r4,zero,55bc <_fflush_r+0x2c>
    55b4:	20800e17 	ldw	r2,56(r4)
    55b8:	10005626 	beq	r2,zero,5714 <_fflush_r+0x184>
    55bc:	9100030b 	ldhu	r4,12(r18)
    55c0:	20ffffcc 	andi	r3,r4,65535
    55c4:	18e0001c 	xori	r3,r3,32768
    55c8:	18e00004 	addi	r3,r3,-32768
    55cc:	1880020c 	andi	r2,r3,8
    55d0:	1000261e 	bne	r2,zero,566c <_fflush_r+0xdc>
    55d4:	90c00117 	ldw	r3,4(r18)
    55d8:	20820014 	ori	r2,r4,2048
    55dc:	9080030d 	sth	r2,12(r18)
    55e0:	1009883a 	mov	r4,r2
    55e4:	00c0400e 	bge	zero,r3,56e8 <_fflush_r+0x158>
    55e8:	92000a17 	ldw	r8,40(r18)
    55ec:	40004026 	beq	r8,zero,56f0 <_fflush_r+0x160>
    55f0:	2084000c 	andi	r2,r4,4096
    55f4:	10005326 	beq	r2,zero,5744 <_fflush_r+0x1b4>
    55f8:	94001417 	ldw	r16,80(r18)
    55fc:	9080030b 	ldhu	r2,12(r18)
    5600:	1080010c 	andi	r2,r2,4
    5604:	1000481e 	bne	r2,zero,5728 <_fflush_r+0x198>
    5608:	91400717 	ldw	r5,28(r18)
    560c:	9809883a 	mov	r4,r19
    5610:	800d883a 	mov	r6,r16
    5614:	000f883a 	mov	r7,zero
    5618:	403ee83a 	callr	r8
    561c:	8080261e 	bne	r16,r2,56b8 <_fflush_r+0x128>
    5620:	9080030b 	ldhu	r2,12(r18)
    5624:	91000417 	ldw	r4,16(r18)
    5628:	90000115 	stw	zero,4(r18)
    562c:	10bdffcc 	andi	r2,r2,63487
    5630:	10ffffcc 	andi	r3,r2,65535
    5634:	18c4000c 	andi	r3,r3,4096
    5638:	9080030d 	sth	r2,12(r18)
    563c:	91000015 	stw	r4,0(r18)
    5640:	18002b26 	beq	r3,zero,56f0 <_fflush_r+0x160>
    5644:	0007883a 	mov	r3,zero
    5648:	1805883a 	mov	r2,r3
    564c:	94001415 	stw	r16,80(r18)
    5650:	dfc00417 	ldw	ra,16(sp)
    5654:	dcc00317 	ldw	r19,12(sp)
    5658:	dc800217 	ldw	r18,8(sp)
    565c:	dc400117 	ldw	r17,4(sp)
    5660:	dc000017 	ldw	r16,0(sp)
    5664:	dec00504 	addi	sp,sp,20
    5668:	f800283a 	ret
    566c:	94400417 	ldw	r17,16(r18)
    5670:	88001f26 	beq	r17,zero,56f0 <_fflush_r+0x160>
    5674:	90800017 	ldw	r2,0(r18)
    5678:	18c000cc 	andi	r3,r3,3
    567c:	94400015 	stw	r17,0(r18)
    5680:	1461c83a 	sub	r16,r2,r17
    5684:	18002526 	beq	r3,zero,571c <_fflush_r+0x18c>
    5688:	0005883a 	mov	r2,zero
    568c:	90800215 	stw	r2,8(r18)
    5690:	0400170e 	bge	zero,r16,56f0 <_fflush_r+0x160>
    5694:	90c00917 	ldw	r3,36(r18)
    5698:	91400717 	ldw	r5,28(r18)
    569c:	880d883a 	mov	r6,r17
    56a0:	800f883a 	mov	r7,r16
    56a4:	9809883a 	mov	r4,r19
    56a8:	183ee83a 	callr	r3
    56ac:	88a3883a 	add	r17,r17,r2
    56b0:	80a1c83a 	sub	r16,r16,r2
    56b4:	00bff616 	blt	zero,r2,5690 <_fflush_r+0x100>
    56b8:	9080030b 	ldhu	r2,12(r18)
    56bc:	00ffffc4 	movi	r3,-1
    56c0:	10801014 	ori	r2,r2,64
    56c4:	9080030d 	sth	r2,12(r18)
    56c8:	1805883a 	mov	r2,r3
    56cc:	dfc00417 	ldw	ra,16(sp)
    56d0:	dcc00317 	ldw	r19,12(sp)
    56d4:	dc800217 	ldw	r18,8(sp)
    56d8:	dc400117 	ldw	r17,4(sp)
    56dc:	dc000017 	ldw	r16,0(sp)
    56e0:	dec00504 	addi	sp,sp,20
    56e4:	f800283a 	ret
    56e8:	90800f17 	ldw	r2,60(r18)
    56ec:	00bfbe16 	blt	zero,r2,55e8 <_fflush_r+0x58>
    56f0:	0007883a 	mov	r3,zero
    56f4:	1805883a 	mov	r2,r3
    56f8:	dfc00417 	ldw	ra,16(sp)
    56fc:	dcc00317 	ldw	r19,12(sp)
    5700:	dc800217 	ldw	r18,8(sp)
    5704:	dc400117 	ldw	r17,4(sp)
    5708:	dc000017 	ldw	r16,0(sp)
    570c:	dec00504 	addi	sp,sp,20
    5710:	f800283a 	ret
    5714:	00058280 	call	5828 <__sinit>
    5718:	003fa806 	br	55bc <_fflush_r+0x2c>
    571c:	90800517 	ldw	r2,20(r18)
    5720:	90800215 	stw	r2,8(r18)
    5724:	003fda06 	br	5690 <_fflush_r+0x100>
    5728:	90800117 	ldw	r2,4(r18)
    572c:	90c00c17 	ldw	r3,48(r18)
    5730:	80a1c83a 	sub	r16,r16,r2
    5734:	183fb426 	beq	r3,zero,5608 <_fflush_r+0x78>
    5738:	90800f17 	ldw	r2,60(r18)
    573c:	80a1c83a 	sub	r16,r16,r2
    5740:	003fb106 	br	5608 <_fflush_r+0x78>
    5744:	91400717 	ldw	r5,28(r18)
    5748:	9809883a 	mov	r4,r19
    574c:	000d883a 	mov	r6,zero
    5750:	01c00044 	movi	r7,1
    5754:	403ee83a 	callr	r8
    5758:	1021883a 	mov	r16,r2
    575c:	00bfffc4 	movi	r2,-1
    5760:	80800226 	beq	r16,r2,576c <_fflush_r+0x1dc>
    5764:	92000a17 	ldw	r8,40(r18)
    5768:	003fa406 	br	55fc <_fflush_r+0x6c>
    576c:	98c00017 	ldw	r3,0(r19)
    5770:	00800744 	movi	r2,29
    5774:	18bfde26 	beq	r3,r2,56f0 <_fflush_r+0x160>
    5778:	9080030b 	ldhu	r2,12(r18)
    577c:	8007883a 	mov	r3,r16
    5780:	10801014 	ori	r2,r2,64
    5784:	9080030d 	sth	r2,12(r18)
    5788:	003fcf06 	br	56c8 <_fflush_r+0x138>

0000578c <fflush>:
    578c:	01400034 	movhi	r5,0
    5790:	29556404 	addi	r5,r5,21904
    5794:	2007883a 	mov	r3,r4
    5798:	20000526 	beq	r4,zero,57b0 <fflush+0x24>
    579c:	00800074 	movhi	r2,1
    57a0:	108e7f04 	addi	r2,r2,14844
    57a4:	11000017 	ldw	r4,0(r2)
    57a8:	180b883a 	mov	r5,r3
    57ac:	00055901 	jmpi	5590 <_fflush_r>
    57b0:	00800074 	movhi	r2,1
    57b4:	108e8004 	addi	r2,r2,14848
    57b8:	11000017 	ldw	r4,0(r2)
    57bc:	00065981 	jmpi	6598 <_fwalk_reent>

000057c0 <std>:
    57c0:	00800074 	movhi	r2,1
    57c4:	10a3c704 	addi	r2,r2,-28900
    57c8:	20800b15 	stw	r2,44(r4)
    57cc:	00800074 	movhi	r2,1
    57d0:	10a40204 	addi	r2,r2,-28664
    57d4:	20800815 	stw	r2,32(r4)
    57d8:	00c00074 	movhi	r3,1
    57dc:	18e3e304 	addi	r3,r3,-28788
    57e0:	00800074 	movhi	r2,1
    57e4:	10a3c904 	addi	r2,r2,-28892
    57e8:	2140030d 	sth	r5,12(r4)
    57ec:	2180038d 	sth	r6,14(r4)
    57f0:	20c00915 	stw	r3,36(r4)
    57f4:	20800a15 	stw	r2,40(r4)
    57f8:	20000015 	stw	zero,0(r4)
    57fc:	20000115 	stw	zero,4(r4)
    5800:	20000215 	stw	zero,8(r4)
    5804:	20000415 	stw	zero,16(r4)
    5808:	20000515 	stw	zero,20(r4)
    580c:	20000615 	stw	zero,24(r4)
    5810:	21000715 	stw	r4,28(r4)
    5814:	f800283a 	ret

00005818 <__sfp_lock_acquire>:
    5818:	f800283a 	ret

0000581c <__sfp_lock_release>:
    581c:	f800283a 	ret

00005820 <__sinit_lock_acquire>:
    5820:	f800283a 	ret

00005824 <__sinit_lock_release>:
    5824:	f800283a 	ret

00005828 <__sinit>:
    5828:	20800e17 	ldw	r2,56(r4)
    582c:	defffd04 	addi	sp,sp,-12
    5830:	dc400115 	stw	r17,4(sp)
    5834:	dc000015 	stw	r16,0(sp)
    5838:	dfc00215 	stw	ra,8(sp)
    583c:	04400044 	movi	r17,1
    5840:	01400104 	movi	r5,4
    5844:	000d883a 	mov	r6,zero
    5848:	2021883a 	mov	r16,r4
    584c:	2200bb04 	addi	r8,r4,748
    5850:	200f883a 	mov	r7,r4
    5854:	10000526 	beq	r2,zero,586c <__sinit+0x44>
    5858:	dfc00217 	ldw	ra,8(sp)
    585c:	dc400117 	ldw	r17,4(sp)
    5860:	dc000017 	ldw	r16,0(sp)
    5864:	dec00304 	addi	sp,sp,12
    5868:	f800283a 	ret
    586c:	21000117 	ldw	r4,4(r4)
    5870:	00800034 	movhi	r2,0
    5874:	10964304 	addi	r2,r2,22796
    5878:	00c000c4 	movi	r3,3
    587c:	80800f15 	stw	r2,60(r16)
    5880:	80c0b915 	stw	r3,740(r16)
    5884:	8200ba15 	stw	r8,744(r16)
    5888:	84400e15 	stw	r17,56(r16)
    588c:	8000b815 	stw	zero,736(r16)
    5890:	00057c00 	call	57c0 <std>
    5894:	81000217 	ldw	r4,8(r16)
    5898:	880d883a 	mov	r6,r17
    589c:	800f883a 	mov	r7,r16
    58a0:	01400284 	movi	r5,10
    58a4:	00057c00 	call	57c0 <std>
    58a8:	81000317 	ldw	r4,12(r16)
    58ac:	800f883a 	mov	r7,r16
    58b0:	01400484 	movi	r5,18
    58b4:	01800084 	movi	r6,2
    58b8:	dfc00217 	ldw	ra,8(sp)
    58bc:	dc400117 	ldw	r17,4(sp)
    58c0:	dc000017 	ldw	r16,0(sp)
    58c4:	dec00304 	addi	sp,sp,12
    58c8:	00057c01 	jmpi	57c0 <std>

000058cc <__fp_lock>:
    58cc:	0005883a 	mov	r2,zero
    58d0:	f800283a 	ret

000058d4 <__fp_unlock>:
    58d4:	0005883a 	mov	r2,zero
    58d8:	f800283a 	ret

000058dc <__fp_unlock_all>:
    58dc:	00800074 	movhi	r2,1
    58e0:	108e7f04 	addi	r2,r2,14844
    58e4:	11000017 	ldw	r4,0(r2)
    58e8:	01400034 	movhi	r5,0
    58ec:	29563504 	addi	r5,r5,22740
    58f0:	00066601 	jmpi	6660 <_fwalk>

000058f4 <__fp_lock_all>:
    58f4:	00800074 	movhi	r2,1
    58f8:	108e7f04 	addi	r2,r2,14844
    58fc:	11000017 	ldw	r4,0(r2)
    5900:	01400034 	movhi	r5,0
    5904:	29563304 	addi	r5,r5,22732
    5908:	00066601 	jmpi	6660 <_fwalk>

0000590c <_cleanup_r>:
    590c:	01400074 	movhi	r5,1
    5910:	296e0204 	addi	r5,r5,-18424
    5914:	00066601 	jmpi	6660 <_fwalk>

00005918 <_cleanup>:
    5918:	00800074 	movhi	r2,1
    591c:	108e8004 	addi	r2,r2,14848
    5920:	11000017 	ldw	r4,0(r2)
    5924:	000590c1 	jmpi	590c <_cleanup_r>

00005928 <__sfmoreglue>:
    5928:	defffc04 	addi	sp,sp,-16
    592c:	dc400115 	stw	r17,4(sp)
    5930:	2c401724 	muli	r17,r5,92
    5934:	dc800215 	stw	r18,8(sp)
    5938:	2825883a 	mov	r18,r5
    593c:	89400304 	addi	r5,r17,12
    5940:	dc000015 	stw	r16,0(sp)
    5944:	dfc00315 	stw	ra,12(sp)
    5948:	000699c0 	call	699c <_malloc_r>
    594c:	0021883a 	mov	r16,zero
    5950:	880d883a 	mov	r6,r17
    5954:	000b883a 	mov	r5,zero
    5958:	10000626 	beq	r2,zero,5974 <__sfmoreglue+0x4c>
    595c:	11000304 	addi	r4,r2,12
    5960:	14800115 	stw	r18,4(r2)
    5964:	10000015 	stw	zero,0(r2)
    5968:	11000215 	stw	r4,8(r2)
    596c:	1021883a 	mov	r16,r2
    5970:	00074400 	call	7440 <memset>
    5974:	8005883a 	mov	r2,r16
    5978:	dfc00317 	ldw	ra,12(sp)
    597c:	dc800217 	ldw	r18,8(sp)
    5980:	dc400117 	ldw	r17,4(sp)
    5984:	dc000017 	ldw	r16,0(sp)
    5988:	dec00404 	addi	sp,sp,16
    598c:	f800283a 	ret

00005990 <__sfp>:
    5990:	defffd04 	addi	sp,sp,-12
    5994:	00800074 	movhi	r2,1
    5998:	108e8004 	addi	r2,r2,14848
    599c:	dc000015 	stw	r16,0(sp)
    59a0:	14000017 	ldw	r16,0(r2)
    59a4:	dc400115 	stw	r17,4(sp)
    59a8:	dfc00215 	stw	ra,8(sp)
    59ac:	80800e17 	ldw	r2,56(r16)
    59b0:	2023883a 	mov	r17,r4
    59b4:	10002626 	beq	r2,zero,5a50 <__sfp+0xc0>
    59b8:	8400b804 	addi	r16,r16,736
    59bc:	80800117 	ldw	r2,4(r16)
    59c0:	81000217 	ldw	r4,8(r16)
    59c4:	10ffffc4 	addi	r3,r2,-1
    59c8:	18000916 	blt	r3,zero,59f0 <__sfp+0x60>
    59cc:	2080030f 	ldh	r2,12(r4)
    59d0:	10000b26 	beq	r2,zero,5a00 <__sfp+0x70>
    59d4:	017fffc4 	movi	r5,-1
    59d8:	00000206 	br	59e4 <__sfp+0x54>
    59dc:	2080030f 	ldh	r2,12(r4)
    59e0:	10000726 	beq	r2,zero,5a00 <__sfp+0x70>
    59e4:	18ffffc4 	addi	r3,r3,-1
    59e8:	21001704 	addi	r4,r4,92
    59ec:	197ffb1e 	bne	r3,r5,59dc <__sfp+0x4c>
    59f0:	80800017 	ldw	r2,0(r16)
    59f4:	10001926 	beq	r2,zero,5a5c <__sfp+0xcc>
    59f8:	1021883a 	mov	r16,r2
    59fc:	003fef06 	br	59bc <__sfp+0x2c>
    5a00:	00bfffc4 	movi	r2,-1
    5a04:	00c00044 	movi	r3,1
    5a08:	2080038d 	sth	r2,14(r4)
    5a0c:	20c0030d 	sth	r3,12(r4)
    5a10:	20000015 	stw	zero,0(r4)
    5a14:	20000215 	stw	zero,8(r4)
    5a18:	20000115 	stw	zero,4(r4)
    5a1c:	20000415 	stw	zero,16(r4)
    5a20:	20000515 	stw	zero,20(r4)
    5a24:	20000615 	stw	zero,24(r4)
    5a28:	20000c15 	stw	zero,48(r4)
    5a2c:	20000d15 	stw	zero,52(r4)
    5a30:	20001115 	stw	zero,68(r4)
    5a34:	20001215 	stw	zero,72(r4)
    5a38:	2005883a 	mov	r2,r4
    5a3c:	dfc00217 	ldw	ra,8(sp)
    5a40:	dc400117 	ldw	r17,4(sp)
    5a44:	dc000017 	ldw	r16,0(sp)
    5a48:	dec00304 	addi	sp,sp,12
    5a4c:	f800283a 	ret
    5a50:	8009883a 	mov	r4,r16
    5a54:	00058280 	call	5828 <__sinit>
    5a58:	003fd706 	br	59b8 <__sfp+0x28>
    5a5c:	8809883a 	mov	r4,r17
    5a60:	01400104 	movi	r5,4
    5a64:	00059280 	call	5928 <__sfmoreglue>
    5a68:	80800015 	stw	r2,0(r16)
    5a6c:	103fe21e 	bne	r2,zero,59f8 <__sfp+0x68>
    5a70:	00800304 	movi	r2,12
    5a74:	0009883a 	mov	r4,zero
    5a78:	88800015 	stw	r2,0(r17)
    5a7c:	003fee06 	br	5a38 <__sfp+0xa8>

00005a80 <_fread_r>:
    5a80:	defff504 	addi	sp,sp,-44
    5a84:	ddc00815 	stw	r23,32(sp)
    5a88:	39af383a 	mul	r23,r7,r6
    5a8c:	df000915 	stw	fp,36(sp)
    5a90:	dd800715 	stw	r22,28(sp)
    5a94:	dcc00415 	stw	r19,16(sp)
    5a98:	dc000115 	stw	r16,4(sp)
    5a9c:	dfc00a15 	stw	ra,40(sp)
    5aa0:	dd400615 	stw	r21,24(sp)
    5aa4:	dd000515 	stw	r20,20(sp)
    5aa8:	dc800315 	stw	r18,12(sp)
    5aac:	dc400215 	stw	r17,8(sp)
    5ab0:	d9800015 	stw	r6,0(sp)
    5ab4:	3839883a 	mov	fp,r7
    5ab8:	2821883a 	mov	r16,r5
    5abc:	202d883a 	mov	r22,r4
    5ac0:	dcc00b17 	ldw	r19,44(sp)
    5ac4:	b8005926 	beq	r23,zero,5c2c <_fread_r+0x1ac>
    5ac8:	20000226 	beq	r4,zero,5ad4 <_fread_r+0x54>
    5acc:	20800e17 	ldw	r2,56(r4)
    5ad0:	10005826 	beq	r2,zero,5c34 <_fread_r+0x1b4>
    5ad4:	9c400117 	ldw	r17,4(r19)
    5ad8:	88005916 	blt	r17,zero,5c40 <_fread_r+0x1c0>
    5adc:	9880030b 	ldhu	r2,12(r19)
    5ae0:	8029883a 	mov	r20,r16
    5ae4:	1080008c 	andi	r2,r2,2
    5ae8:	1000221e 	bne	r2,zero,5b74 <_fread_r+0xf4>
    5aec:	b825883a 	mov	r18,r23
    5af0:	00000106 	br	5af8 <_fread_r+0x78>
    5af4:	9c400117 	ldw	r17,4(r19)
    5af8:	a009883a 	mov	r4,r20
    5afc:	880d883a 	mov	r6,r17
    5b00:	8c80542e 	bgeu	r17,r18,5c54 <_fread_r+0x1d4>
    5b04:	99400017 	ldw	r5,0(r19)
    5b08:	a469883a 	add	r20,r20,r17
    5b0c:	9465c83a 	sub	r18,r18,r17
    5b10:	00072c00 	call	72c0 <memcpy>
    5b14:	98800017 	ldw	r2,0(r19)
    5b18:	b009883a 	mov	r4,r22
    5b1c:	980b883a 	mov	r5,r19
    5b20:	1461883a 	add	r16,r2,r17
    5b24:	9c000015 	stw	r16,0(r19)
    5b28:	0008ac00 	call	8ac0 <__srefill_r>
    5b2c:	103ff126 	beq	r2,zero,5af4 <_fread_r+0x74>
    5b30:	d9400017 	ldw	r5,0(sp)
    5b34:	bc89c83a 	sub	r4,r23,r18
    5b38:	000e70c0 	call	e70c <__udivsi3>
    5b3c:	1039883a 	mov	fp,r2
    5b40:	e005883a 	mov	r2,fp
    5b44:	dfc00a17 	ldw	ra,40(sp)
    5b48:	df000917 	ldw	fp,36(sp)
    5b4c:	ddc00817 	ldw	r23,32(sp)
    5b50:	dd800717 	ldw	r22,28(sp)
    5b54:	dd400617 	ldw	r21,24(sp)
    5b58:	dd000517 	ldw	r20,20(sp)
    5b5c:	dcc00417 	ldw	r19,16(sp)
    5b60:	dc800317 	ldw	r18,12(sp)
    5b64:	dc400217 	ldw	r17,8(sp)
    5b68:	dc000117 	ldw	r16,4(sp)
    5b6c:	dec00b04 	addi	sp,sp,44
    5b70:	f800283a 	ret
    5b74:	b825883a 	mov	r18,r23
    5b78:	8dc03436 	bltu	r17,r23,5c4c <_fread_r+0x1cc>
    5b7c:	99400017 	ldw	r5,0(r19)
    5b80:	a009883a 	mov	r4,r20
    5b84:	900d883a 	mov	r6,r18
    5b88:	00072c00 	call	72c0 <memcpy>
    5b8c:	9c000017 	ldw	r16,0(r19)
    5b90:	98800117 	ldw	r2,4(r19)
    5b94:	99400c17 	ldw	r5,48(r19)
    5b98:	84a1883a 	add	r16,r16,r18
    5b9c:	14a3c83a 	sub	r17,r2,r18
    5ba0:	a4ab883a 	add	r21,r20,r18
    5ba4:	9c400115 	stw	r17,4(r19)
    5ba8:	9c000015 	stw	r16,0(r19)
    5bac:	bca9c83a 	sub	r20,r23,r18
    5bb0:	28000826 	beq	r5,zero,5bd4 <_fread_r+0x154>
    5bb4:	a03fe226 	beq	r20,zero,5b40 <_fread_r+0xc0>
    5bb8:	98801004 	addi	r2,r19,64
    5bbc:	28800326 	beq	r5,r2,5bcc <_fread_r+0x14c>
    5bc0:	b009883a 	mov	r4,r22
    5bc4:	0005de80 	call	5de8 <_free_r>
    5bc8:	9c000017 	ldw	r16,0(r19)
    5bcc:	98000c15 	stw	zero,48(r19)
    5bd0:	00000106 	br	5bd8 <_fread_r+0x158>
    5bd4:	a03fda26 	beq	r20,zero,5b40 <_fread_r+0xc0>
    5bd8:	9c800417 	ldw	r18,16(r19)
    5bdc:	9c400517 	ldw	r17,20(r19)
    5be0:	9d400015 	stw	r21,0(r19)
    5be4:	9d400415 	stw	r21,16(r19)
    5be8:	9d000515 	stw	r20,20(r19)
    5bec:	b009883a 	mov	r4,r22
    5bf0:	980b883a 	mov	r5,r19
    5bf4:	0008ac00 	call	8ac0 <__srefill_r>
    5bf8:	98c00117 	ldw	r3,4(r19)
    5bfc:	9c800415 	stw	r18,16(r19)
    5c00:	9c400515 	stw	r17,20(r19)
    5c04:	a8eb883a 	add	r21,r21,r3
    5c08:	9c000015 	stw	r16,0(r19)
    5c0c:	a0e9c83a 	sub	r20,r20,r3
    5c10:	98000115 	stw	zero,4(r19)
    5c14:	103fef26 	beq	r2,zero,5bd4 <_fread_r+0x154>
    5c18:	d9400017 	ldw	r5,0(sp)
    5c1c:	bd09c83a 	sub	r4,r23,r20
    5c20:	000e70c0 	call	e70c <__udivsi3>
    5c24:	1039883a 	mov	fp,r2
    5c28:	003fc506 	br	5b40 <_fread_r+0xc0>
    5c2c:	0039883a 	mov	fp,zero
    5c30:	003fc306 	br	5b40 <_fread_r+0xc0>
    5c34:	00058280 	call	5828 <__sinit>
    5c38:	9c400117 	ldw	r17,4(r19)
    5c3c:	883fa70e 	bge	r17,zero,5adc <_fread_r+0x5c>
    5c40:	0023883a 	mov	r17,zero
    5c44:	98000115 	stw	zero,4(r19)
    5c48:	003fa406 	br	5adc <_fread_r+0x5c>
    5c4c:	8825883a 	mov	r18,r17
    5c50:	003fca06 	br	5b7c <_fread_r+0xfc>
    5c54:	99400017 	ldw	r5,0(r19)
    5c58:	900d883a 	mov	r6,r18
    5c5c:	00072c00 	call	72c0 <memcpy>
    5c60:	98c00117 	ldw	r3,4(r19)
    5c64:	98800017 	ldw	r2,0(r19)
    5c68:	1c87c83a 	sub	r3,r3,r18
    5c6c:	1485883a 	add	r2,r2,r18
    5c70:	98800015 	stw	r2,0(r19)
    5c74:	98c00115 	stw	r3,4(r19)
    5c78:	003fb106 	br	5b40 <_fread_r+0xc0>

00005c7c <fread>:
    5c7c:	00800074 	movhi	r2,1
    5c80:	108e7f04 	addi	r2,r2,14844
    5c84:	2017883a 	mov	r11,r4
    5c88:	11000017 	ldw	r4,0(r2)
    5c8c:	defffe04 	addi	sp,sp,-8
    5c90:	3013883a 	mov	r9,r6
    5c94:	2805883a 	mov	r2,r5
    5c98:	d9c00015 	stw	r7,0(sp)
    5c9c:	580b883a 	mov	r5,r11
    5ca0:	100d883a 	mov	r6,r2
    5ca4:	480f883a 	mov	r7,r9
    5ca8:	dfc00115 	stw	ra,4(sp)
    5cac:	0005a800 	call	5a80 <_fread_r>
    5cb0:	dfc00117 	ldw	ra,4(sp)
    5cb4:	dec00204 	addi	sp,sp,8
    5cb8:	f800283a 	ret

00005cbc <_malloc_trim_r>:
    5cbc:	defffb04 	addi	sp,sp,-20
    5cc0:	dcc00315 	stw	r19,12(sp)
    5cc4:	04c00074 	movhi	r19,1
    5cc8:	9cc8bd04 	addi	r19,r19,8948
    5ccc:	dc800215 	stw	r18,8(sp)
    5cd0:	dc400115 	stw	r17,4(sp)
    5cd4:	dc000015 	stw	r16,0(sp)
    5cd8:	2823883a 	mov	r17,r5
    5cdc:	2025883a 	mov	r18,r4
    5ce0:	dfc00415 	stw	ra,16(sp)
    5ce4:	000f2780 	call	f278 <__malloc_lock>
    5ce8:	98800217 	ldw	r2,8(r19)
    5cec:	9009883a 	mov	r4,r18
    5cf0:	000b883a 	mov	r5,zero
    5cf4:	10c00117 	ldw	r3,4(r2)
    5cf8:	00bfff04 	movi	r2,-4
    5cfc:	18a0703a 	and	r16,r3,r2
    5d00:	8463c83a 	sub	r17,r16,r17
    5d04:	8c43fbc4 	addi	r17,r17,4079
    5d08:	8822d33a 	srli	r17,r17,12
    5d0c:	0083ffc4 	movi	r2,4095
    5d10:	8c7fffc4 	addi	r17,r17,-1
    5d14:	8822933a 	slli	r17,r17,12
    5d18:	1440060e 	bge	r2,r17,5d34 <_malloc_trim_r+0x78>
    5d1c:	0008d100 	call	8d10 <_sbrk_r>
    5d20:	98c00217 	ldw	r3,8(r19)
    5d24:	9009883a 	mov	r4,r18
    5d28:	044bc83a 	sub	r5,zero,r17
    5d2c:	80c7883a 	add	r3,r16,r3
    5d30:	10c00926 	beq	r2,r3,5d58 <_malloc_trim_r+0x9c>
    5d34:	000f27c0 	call	f27c <__malloc_unlock>
    5d38:	0005883a 	mov	r2,zero
    5d3c:	dfc00417 	ldw	ra,16(sp)
    5d40:	dcc00317 	ldw	r19,12(sp)
    5d44:	dc800217 	ldw	r18,8(sp)
    5d48:	dc400117 	ldw	r17,4(sp)
    5d4c:	dc000017 	ldw	r16,0(sp)
    5d50:	dec00504 	addi	sp,sp,20
    5d54:	f800283a 	ret
    5d58:	9009883a 	mov	r4,r18
    5d5c:	0008d100 	call	8d10 <_sbrk_r>
    5d60:	844dc83a 	sub	r6,r16,r17
    5d64:	00ffffc4 	movi	r3,-1
    5d68:	9009883a 	mov	r4,r18
    5d6c:	000b883a 	mov	r5,zero
    5d70:	01c00074 	movhi	r7,1
    5d74:	39d57104 	addi	r7,r7,21956
    5d78:	31800054 	ori	r6,r6,1
    5d7c:	10c00926 	beq	r2,r3,5da4 <_malloc_trim_r+0xe8>
    5d80:	38800017 	ldw	r2,0(r7)
    5d84:	98c00217 	ldw	r3,8(r19)
    5d88:	9009883a 	mov	r4,r18
    5d8c:	1445c83a 	sub	r2,r2,r17
    5d90:	38800015 	stw	r2,0(r7)
    5d94:	19800115 	stw	r6,4(r3)
    5d98:	000f27c0 	call	f27c <__malloc_unlock>
    5d9c:	00800044 	movi	r2,1
    5da0:	003fe606 	br	5d3c <_malloc_trim_r+0x80>
    5da4:	0008d100 	call	8d10 <_sbrk_r>
    5da8:	99800217 	ldw	r6,8(r19)
    5dac:	100f883a 	mov	r7,r2
    5db0:	9009883a 	mov	r4,r18
    5db4:	1187c83a 	sub	r3,r2,r6
    5db8:	008003c4 	movi	r2,15
    5dbc:	19400054 	ori	r5,r3,1
    5dc0:	10ffdc0e 	bge	r2,r3,5d34 <_malloc_trim_r+0x78>
    5dc4:	00800074 	movhi	r2,1
    5dc8:	108e8404 	addi	r2,r2,14864
    5dcc:	10c00017 	ldw	r3,0(r2)
    5dd0:	00800074 	movhi	r2,1
    5dd4:	10957104 	addi	r2,r2,21956
    5dd8:	31400115 	stw	r5,4(r6)
    5ddc:	38c7c83a 	sub	r3,r7,r3
    5de0:	10c00015 	stw	r3,0(r2)
    5de4:	003fd306 	br	5d34 <_malloc_trim_r+0x78>

00005de8 <_free_r>:
    5de8:	defffd04 	addi	sp,sp,-12
    5dec:	dc400115 	stw	r17,4(sp)
    5df0:	dc000015 	stw	r16,0(sp)
    5df4:	dfc00215 	stw	ra,8(sp)
    5df8:	2821883a 	mov	r16,r5
    5dfc:	2023883a 	mov	r17,r4
    5e00:	28005a26 	beq	r5,zero,5f6c <_free_r+0x184>
    5e04:	000f2780 	call	f278 <__malloc_lock>
    5e08:	823ffe04 	addi	r8,r16,-8
    5e0c:	41400117 	ldw	r5,4(r8)
    5e10:	00bfff84 	movi	r2,-2
    5e14:	02800074 	movhi	r10,1
    5e18:	5288bd04 	addi	r10,r10,8948
    5e1c:	288e703a 	and	r7,r5,r2
    5e20:	41cd883a 	add	r6,r8,r7
    5e24:	30c00117 	ldw	r3,4(r6)
    5e28:	51000217 	ldw	r4,8(r10)
    5e2c:	00bfff04 	movi	r2,-4
    5e30:	1892703a 	and	r9,r3,r2
    5e34:	5017883a 	mov	r11,r10
    5e38:	31006726 	beq	r6,r4,5fd8 <_free_r+0x1f0>
    5e3c:	2880004c 	andi	r2,r5,1
    5e40:	1005003a 	cmpeq	r2,r2,zero
    5e44:	32400115 	stw	r9,4(r6)
    5e48:	10001a1e 	bne	r2,zero,5eb4 <_free_r+0xcc>
    5e4c:	000b883a 	mov	r5,zero
    5e50:	3247883a 	add	r3,r6,r9
    5e54:	18800117 	ldw	r2,4(r3)
    5e58:	1080004c 	andi	r2,r2,1
    5e5c:	1000231e 	bne	r2,zero,5eec <_free_r+0x104>
    5e60:	280ac03a 	cmpne	r5,r5,zero
    5e64:	3a4f883a 	add	r7,r7,r9
    5e68:	2800451e 	bne	r5,zero,5f80 <_free_r+0x198>
    5e6c:	31000217 	ldw	r4,8(r6)
    5e70:	00800074 	movhi	r2,1
    5e74:	1088bf04 	addi	r2,r2,8956
    5e78:	20807b26 	beq	r4,r2,6068 <_free_r+0x280>
    5e7c:	30800317 	ldw	r2,12(r6)
    5e80:	3a07883a 	add	r3,r7,r8
    5e84:	19c00015 	stw	r7,0(r3)
    5e88:	11000215 	stw	r4,8(r2)
    5e8c:	20800315 	stw	r2,12(r4)
    5e90:	38800054 	ori	r2,r7,1
    5e94:	40800115 	stw	r2,4(r8)
    5e98:	28001a26 	beq	r5,zero,5f04 <_free_r+0x11c>
    5e9c:	8809883a 	mov	r4,r17
    5ea0:	dfc00217 	ldw	ra,8(sp)
    5ea4:	dc400117 	ldw	r17,4(sp)
    5ea8:	dc000017 	ldw	r16,0(sp)
    5eac:	dec00304 	addi	sp,sp,12
    5eb0:	000f27c1 	jmpi	f27c <__malloc_unlock>
    5eb4:	80bffe17 	ldw	r2,-8(r16)
    5eb8:	50c00204 	addi	r3,r10,8
    5ebc:	4091c83a 	sub	r8,r8,r2
    5ec0:	41000217 	ldw	r4,8(r8)
    5ec4:	388f883a 	add	r7,r7,r2
    5ec8:	20c06126 	beq	r4,r3,6050 <_free_r+0x268>
    5ecc:	40800317 	ldw	r2,12(r8)
    5ed0:	3247883a 	add	r3,r6,r9
    5ed4:	000b883a 	mov	r5,zero
    5ed8:	11000215 	stw	r4,8(r2)
    5edc:	20800315 	stw	r2,12(r4)
    5ee0:	18800117 	ldw	r2,4(r3)
    5ee4:	1080004c 	andi	r2,r2,1
    5ee8:	103fdd26 	beq	r2,zero,5e60 <_free_r+0x78>
    5eec:	38800054 	ori	r2,r7,1
    5ef0:	3a07883a 	add	r3,r7,r8
    5ef4:	280ac03a 	cmpne	r5,r5,zero
    5ef8:	40800115 	stw	r2,4(r8)
    5efc:	19c00015 	stw	r7,0(r3)
    5f00:	283fe61e 	bne	r5,zero,5e9c <_free_r+0xb4>
    5f04:	00807fc4 	movi	r2,511
    5f08:	11c01f2e 	bgeu	r2,r7,5f88 <_free_r+0x1a0>
    5f0c:	3806d27a 	srli	r3,r7,9
    5f10:	1800481e 	bne	r3,zero,6034 <_free_r+0x24c>
    5f14:	3804d0fa 	srli	r2,r7,3
    5f18:	100690fa 	slli	r3,r2,3
    5f1c:	1acd883a 	add	r6,r3,r11
    5f20:	31400217 	ldw	r5,8(r6)
    5f24:	31405926 	beq	r6,r5,608c <_free_r+0x2a4>
    5f28:	28800117 	ldw	r2,4(r5)
    5f2c:	00ffff04 	movi	r3,-4
    5f30:	10c4703a 	and	r2,r2,r3
    5f34:	3880022e 	bgeu	r7,r2,5f40 <_free_r+0x158>
    5f38:	29400217 	ldw	r5,8(r5)
    5f3c:	317ffa1e 	bne	r6,r5,5f28 <_free_r+0x140>
    5f40:	29800317 	ldw	r6,12(r5)
    5f44:	41800315 	stw	r6,12(r8)
    5f48:	41400215 	stw	r5,8(r8)
    5f4c:	8809883a 	mov	r4,r17
    5f50:	2a000315 	stw	r8,12(r5)
    5f54:	32000215 	stw	r8,8(r6)
    5f58:	dfc00217 	ldw	ra,8(sp)
    5f5c:	dc400117 	ldw	r17,4(sp)
    5f60:	dc000017 	ldw	r16,0(sp)
    5f64:	dec00304 	addi	sp,sp,12
    5f68:	000f27c1 	jmpi	f27c <__malloc_unlock>
    5f6c:	dfc00217 	ldw	ra,8(sp)
    5f70:	dc400117 	ldw	r17,4(sp)
    5f74:	dc000017 	ldw	r16,0(sp)
    5f78:	dec00304 	addi	sp,sp,12
    5f7c:	f800283a 	ret
    5f80:	31000217 	ldw	r4,8(r6)
    5f84:	003fbd06 	br	5e7c <_free_r+0x94>
    5f88:	3806d0fa 	srli	r3,r7,3
    5f8c:	00800044 	movi	r2,1
    5f90:	51400117 	ldw	r5,4(r10)
    5f94:	180890fa 	slli	r4,r3,3
    5f98:	1807d0ba 	srai	r3,r3,2
    5f9c:	22c9883a 	add	r4,r4,r11
    5fa0:	21800217 	ldw	r6,8(r4)
    5fa4:	10c4983a 	sll	r2,r2,r3
    5fa8:	41000315 	stw	r4,12(r8)
    5fac:	41800215 	stw	r6,8(r8)
    5fb0:	288ab03a 	or	r5,r5,r2
    5fb4:	22000215 	stw	r8,8(r4)
    5fb8:	8809883a 	mov	r4,r17
    5fbc:	51400115 	stw	r5,4(r10)
    5fc0:	32000315 	stw	r8,12(r6)
    5fc4:	dfc00217 	ldw	ra,8(sp)
    5fc8:	dc400117 	ldw	r17,4(sp)
    5fcc:	dc000017 	ldw	r16,0(sp)
    5fd0:	dec00304 	addi	sp,sp,12
    5fd4:	000f27c1 	jmpi	f27c <__malloc_unlock>
    5fd8:	2880004c 	andi	r2,r5,1
    5fdc:	3a4d883a 	add	r6,r7,r9
    5fe0:	1000071e 	bne	r2,zero,6000 <_free_r+0x218>
    5fe4:	80bffe17 	ldw	r2,-8(r16)
    5fe8:	4091c83a 	sub	r8,r8,r2
    5fec:	41000317 	ldw	r4,12(r8)
    5ff0:	40c00217 	ldw	r3,8(r8)
    5ff4:	308d883a 	add	r6,r6,r2
    5ff8:	20c00215 	stw	r3,8(r4)
    5ffc:	19000315 	stw	r4,12(r3)
    6000:	00800074 	movhi	r2,1
    6004:	108e8304 	addi	r2,r2,14860
    6008:	11000017 	ldw	r4,0(r2)
    600c:	30c00054 	ori	r3,r6,1
    6010:	52000215 	stw	r8,8(r10)
    6014:	40c00115 	stw	r3,4(r8)
    6018:	313fa036 	bltu	r6,r4,5e9c <_free_r+0xb4>
    601c:	00800074 	movhi	r2,1
    6020:	10956704 	addi	r2,r2,21916
    6024:	11400017 	ldw	r5,0(r2)
    6028:	8809883a 	mov	r4,r17
    602c:	0005cbc0 	call	5cbc <_malloc_trim_r>
    6030:	003f9a06 	br	5e9c <_free_r+0xb4>
    6034:	00800104 	movi	r2,4
    6038:	10c0072e 	bgeu	r2,r3,6058 <_free_r+0x270>
    603c:	00800504 	movi	r2,20
    6040:	10c01936 	bltu	r2,r3,60a8 <_free_r+0x2c0>
    6044:	188016c4 	addi	r2,r3,91
    6048:	100690fa 	slli	r3,r2,3
    604c:	003fb306 	br	5f1c <_free_r+0x134>
    6050:	01400044 	movi	r5,1
    6054:	003f7e06 	br	5e50 <_free_r+0x68>
    6058:	3804d1ba 	srli	r2,r7,6
    605c:	10800e04 	addi	r2,r2,56
    6060:	100690fa 	slli	r3,r2,3
    6064:	003fad06 	br	5f1c <_free_r+0x134>
    6068:	22000315 	stw	r8,12(r4)
    606c:	22000215 	stw	r8,8(r4)
    6070:	3a05883a 	add	r2,r7,r8
    6074:	38c00054 	ori	r3,r7,1
    6078:	11c00015 	stw	r7,0(r2)
    607c:	41000215 	stw	r4,8(r8)
    6080:	40c00115 	stw	r3,4(r8)
    6084:	41000315 	stw	r4,12(r8)
    6088:	003f8406 	br	5e9c <_free_r+0xb4>
    608c:	1005d0ba 	srai	r2,r2,2
    6090:	00c00044 	movi	r3,1
    6094:	51000117 	ldw	r4,4(r10)
    6098:	1886983a 	sll	r3,r3,r2
    609c:	20c8b03a 	or	r4,r4,r3
    60a0:	51000115 	stw	r4,4(r10)
    60a4:	003fa706 	br	5f44 <_free_r+0x15c>
    60a8:	00801504 	movi	r2,84
    60ac:	10c00436 	bltu	r2,r3,60c0 <_free_r+0x2d8>
    60b0:	3804d33a 	srli	r2,r7,12
    60b4:	10801b84 	addi	r2,r2,110
    60b8:	100690fa 	slli	r3,r2,3
    60bc:	003f9706 	br	5f1c <_free_r+0x134>
    60c0:	00805504 	movi	r2,340
    60c4:	10c00436 	bltu	r2,r3,60d8 <_free_r+0x2f0>
    60c8:	3804d3fa 	srli	r2,r7,15
    60cc:	10801dc4 	addi	r2,r2,119
    60d0:	100690fa 	slli	r3,r2,3
    60d4:	003f9106 	br	5f1c <_free_r+0x134>
    60d8:	00815504 	movi	r2,1364
    60dc:	10c0032e 	bgeu	r2,r3,60ec <_free_r+0x304>
    60e0:	00801f84 	movi	r2,126
    60e4:	00c0fc04 	movi	r3,1008
    60e8:	003f8c06 	br	5f1c <_free_r+0x134>
    60ec:	3804d4ba 	srli	r2,r7,18
    60f0:	10801f04 	addi	r2,r2,124
    60f4:	100690fa 	slli	r3,r2,3
    60f8:	003f8806 	br	5f1c <_free_r+0x134>

000060fc <__sfvwrite_r>:
    60fc:	30800217 	ldw	r2,8(r6)
    6100:	defff504 	addi	sp,sp,-44
    6104:	df000915 	stw	fp,36(sp)
    6108:	dd800715 	stw	r22,28(sp)
    610c:	dc800315 	stw	r18,12(sp)
    6110:	dfc00a15 	stw	ra,40(sp)
    6114:	ddc00815 	stw	r23,32(sp)
    6118:	dd400615 	stw	r21,24(sp)
    611c:	dd000515 	stw	r20,20(sp)
    6120:	dcc00415 	stw	r19,16(sp)
    6124:	dc400215 	stw	r17,8(sp)
    6128:	dc000115 	stw	r16,4(sp)
    612c:	302d883a 	mov	r22,r6
    6130:	2039883a 	mov	fp,r4
    6134:	2825883a 	mov	r18,r5
    6138:	10001c26 	beq	r2,zero,61ac <__sfvwrite_r+0xb0>
    613c:	29c0030b 	ldhu	r7,12(r5)
    6140:	3880020c 	andi	r2,r7,8
    6144:	10002726 	beq	r2,zero,61e4 <__sfvwrite_r+0xe8>
    6148:	28800417 	ldw	r2,16(r5)
    614c:	10002526 	beq	r2,zero,61e4 <__sfvwrite_r+0xe8>
    6150:	3880008c 	andi	r2,r7,2
    6154:	b5400017 	ldw	r21,0(r22)
    6158:	10002826 	beq	r2,zero,61fc <__sfvwrite_r+0x100>
    615c:	0021883a 	mov	r16,zero
    6160:	0023883a 	mov	r17,zero
    6164:	880d883a 	mov	r6,r17
    6168:	e009883a 	mov	r4,fp
    616c:	00810004 	movi	r2,1024
    6170:	80006e26 	beq	r16,zero,632c <__sfvwrite_r+0x230>
    6174:	800f883a 	mov	r7,r16
    6178:	91400717 	ldw	r5,28(r18)
    617c:	1400012e 	bgeu	r2,r16,6184 <__sfvwrite_r+0x88>
    6180:	100f883a 	mov	r7,r2
    6184:	90c00917 	ldw	r3,36(r18)
    6188:	183ee83a 	callr	r3
    618c:	1007883a 	mov	r3,r2
    6190:	80a1c83a 	sub	r16,r16,r2
    6194:	88a3883a 	add	r17,r17,r2
    6198:	00806d0e 	bge	zero,r2,6350 <__sfvwrite_r+0x254>
    619c:	b0800217 	ldw	r2,8(r22)
    61a0:	10c5c83a 	sub	r2,r2,r3
    61a4:	b0800215 	stw	r2,8(r22)
    61a8:	103fee1e 	bne	r2,zero,6164 <__sfvwrite_r+0x68>
    61ac:	0009883a 	mov	r4,zero
    61b0:	2005883a 	mov	r2,r4
    61b4:	dfc00a17 	ldw	ra,40(sp)
    61b8:	df000917 	ldw	fp,36(sp)
    61bc:	ddc00817 	ldw	r23,32(sp)
    61c0:	dd800717 	ldw	r22,28(sp)
    61c4:	dd400617 	ldw	r21,24(sp)
    61c8:	dd000517 	ldw	r20,20(sp)
    61cc:	dcc00417 	ldw	r19,16(sp)
    61d0:	dc800317 	ldw	r18,12(sp)
    61d4:	dc400217 	ldw	r17,8(sp)
    61d8:	dc000117 	ldw	r16,4(sp)
    61dc:	dec00b04 	addi	sp,sp,44
    61e0:	f800283a 	ret
    61e4:	0003c880 	call	3c88 <__swsetup_r>
    61e8:	1000e41e 	bne	r2,zero,657c <__sfvwrite_r+0x480>
    61ec:	91c0030b 	ldhu	r7,12(r18)
    61f0:	b5400017 	ldw	r21,0(r22)
    61f4:	3880008c 	andi	r2,r7,2
    61f8:	103fd81e 	bne	r2,zero,615c <__sfvwrite_r+0x60>
    61fc:	3880004c 	andi	r2,r7,1
    6200:	1005003a 	cmpeq	r2,r2,zero
    6204:	10005726 	beq	r2,zero,6364 <__sfvwrite_r+0x268>
    6208:	0029883a 	mov	r20,zero
    620c:	002f883a 	mov	r23,zero
    6210:	a0004226 	beq	r20,zero,631c <__sfvwrite_r+0x220>
    6214:	3880800c 	andi	r2,r7,512
    6218:	94000217 	ldw	r16,8(r18)
    621c:	10008b26 	beq	r2,zero,644c <__sfvwrite_r+0x350>
    6220:	800d883a 	mov	r6,r16
    6224:	a400a536 	bltu	r20,r16,64bc <__sfvwrite_r+0x3c0>
    6228:	3881200c 	andi	r2,r7,1152
    622c:	10002726 	beq	r2,zero,62cc <__sfvwrite_r+0x1d0>
    6230:	90800517 	ldw	r2,20(r18)
    6234:	92000417 	ldw	r8,16(r18)
    6238:	91400017 	ldw	r5,0(r18)
    623c:	1087883a 	add	r3,r2,r2
    6240:	1887883a 	add	r3,r3,r2
    6244:	1808d7fa 	srli	r4,r3,31
    6248:	2a21c83a 	sub	r16,r5,r8
    624c:	80800044 	addi	r2,r16,1
    6250:	20c9883a 	add	r4,r4,r3
    6254:	2027d07a 	srai	r19,r4,1
    6258:	a085883a 	add	r2,r20,r2
    625c:	980d883a 	mov	r6,r19
    6260:	9880022e 	bgeu	r19,r2,626c <__sfvwrite_r+0x170>
    6264:	1027883a 	mov	r19,r2
    6268:	100d883a 	mov	r6,r2
    626c:	3881000c 	andi	r2,r7,1024
    6270:	1000b826 	beq	r2,zero,6554 <__sfvwrite_r+0x458>
    6274:	300b883a 	mov	r5,r6
    6278:	e009883a 	mov	r4,fp
    627c:	000699c0 	call	699c <_malloc_r>
    6280:	10003126 	beq	r2,zero,6348 <__sfvwrite_r+0x24c>
    6284:	91400417 	ldw	r5,16(r18)
    6288:	1009883a 	mov	r4,r2
    628c:	800d883a 	mov	r6,r16
    6290:	1023883a 	mov	r17,r2
    6294:	00072c00 	call	72c0 <memcpy>
    6298:	90c0030b 	ldhu	r3,12(r18)
    629c:	00beffc4 	movi	r2,-1025
    62a0:	1886703a 	and	r3,r3,r2
    62a4:	18c02014 	ori	r3,r3,128
    62a8:	90c0030d 	sth	r3,12(r18)
    62ac:	9c07c83a 	sub	r3,r19,r16
    62b0:	8c05883a 	add	r2,r17,r16
    62b4:	a00d883a 	mov	r6,r20
    62b8:	a021883a 	mov	r16,r20
    62bc:	90800015 	stw	r2,0(r18)
    62c0:	90c00215 	stw	r3,8(r18)
    62c4:	94400415 	stw	r17,16(r18)
    62c8:	94c00515 	stw	r19,20(r18)
    62cc:	91000017 	ldw	r4,0(r18)
    62d0:	b80b883a 	mov	r5,r23
    62d4:	a023883a 	mov	r17,r20
    62d8:	00073600 	call	7360 <memmove>
    62dc:	90c00217 	ldw	r3,8(r18)
    62e0:	90800017 	ldw	r2,0(r18)
    62e4:	a027883a 	mov	r19,r20
    62e8:	1c07c83a 	sub	r3,r3,r16
    62ec:	1405883a 	add	r2,r2,r16
    62f0:	90c00215 	stw	r3,8(r18)
    62f4:	a021883a 	mov	r16,r20
    62f8:	90800015 	stw	r2,0(r18)
    62fc:	b0800217 	ldw	r2,8(r22)
    6300:	1405c83a 	sub	r2,r2,r16
    6304:	b0800215 	stw	r2,8(r22)
    6308:	103fa826 	beq	r2,zero,61ac <__sfvwrite_r+0xb0>
    630c:	a469c83a 	sub	r20,r20,r17
    6310:	91c0030b 	ldhu	r7,12(r18)
    6314:	bcef883a 	add	r23,r23,r19
    6318:	a03fbe1e 	bne	r20,zero,6214 <__sfvwrite_r+0x118>
    631c:	adc00017 	ldw	r23,0(r21)
    6320:	ad000117 	ldw	r20,4(r21)
    6324:	ad400204 	addi	r21,r21,8
    6328:	003fb906 	br	6210 <__sfvwrite_r+0x114>
    632c:	ac400017 	ldw	r17,0(r21)
    6330:	ac000117 	ldw	r16,4(r21)
    6334:	ad400204 	addi	r21,r21,8
    6338:	003f8a06 	br	6164 <__sfvwrite_r+0x68>
    633c:	91400417 	ldw	r5,16(r18)
    6340:	e009883a 	mov	r4,fp
    6344:	0005de80 	call	5de8 <_free_r>
    6348:	00800304 	movi	r2,12
    634c:	e0800015 	stw	r2,0(fp)
    6350:	9080030b 	ldhu	r2,12(r18)
    6354:	013fffc4 	movi	r4,-1
    6358:	10801014 	ori	r2,r2,64
    635c:	9080030d 	sth	r2,12(r18)
    6360:	003f9306 	br	61b0 <__sfvwrite_r+0xb4>
    6364:	0027883a 	mov	r19,zero
    6368:	002f883a 	mov	r23,zero
    636c:	d8000015 	stw	zero,0(sp)
    6370:	0029883a 	mov	r20,zero
    6374:	98001e26 	beq	r19,zero,63f0 <__sfvwrite_r+0x2f4>
    6378:	d8c00017 	ldw	r3,0(sp)
    637c:	1804c03a 	cmpne	r2,r3,zero
    6380:	10005e26 	beq	r2,zero,64fc <__sfvwrite_r+0x400>
    6384:	9821883a 	mov	r16,r19
    6388:	a4c0012e 	bgeu	r20,r19,6390 <__sfvwrite_r+0x294>
    638c:	a021883a 	mov	r16,r20
    6390:	91000017 	ldw	r4,0(r18)
    6394:	90800417 	ldw	r2,16(r18)
    6398:	91800217 	ldw	r6,8(r18)
    639c:	91c00517 	ldw	r7,20(r18)
    63a0:	1100022e 	bgeu	r2,r4,63ac <__sfvwrite_r+0x2b0>
    63a4:	31e3883a 	add	r17,r6,r7
    63a8:	8c001616 	blt	r17,r16,6404 <__sfvwrite_r+0x308>
    63ac:	81c03816 	blt	r16,r7,6490 <__sfvwrite_r+0x394>
    63b0:	90c00917 	ldw	r3,36(r18)
    63b4:	91400717 	ldw	r5,28(r18)
    63b8:	e009883a 	mov	r4,fp
    63bc:	b80d883a 	mov	r6,r23
    63c0:	183ee83a 	callr	r3
    63c4:	1023883a 	mov	r17,r2
    63c8:	00bfe10e 	bge	zero,r2,6350 <__sfvwrite_r+0x254>
    63cc:	a469c83a 	sub	r20,r20,r17
    63d0:	a0001826 	beq	r20,zero,6434 <__sfvwrite_r+0x338>
    63d4:	b0800217 	ldw	r2,8(r22)
    63d8:	1445c83a 	sub	r2,r2,r17
    63dc:	b0800215 	stw	r2,8(r22)
    63e0:	103f7226 	beq	r2,zero,61ac <__sfvwrite_r+0xb0>
    63e4:	9c67c83a 	sub	r19,r19,r17
    63e8:	bc6f883a 	add	r23,r23,r17
    63ec:	983fe21e 	bne	r19,zero,6378 <__sfvwrite_r+0x27c>
    63f0:	adc00017 	ldw	r23,0(r21)
    63f4:	acc00117 	ldw	r19,4(r21)
    63f8:	ad400204 	addi	r21,r21,8
    63fc:	d8000015 	stw	zero,0(sp)
    6400:	003fdc06 	br	6374 <__sfvwrite_r+0x278>
    6404:	b80b883a 	mov	r5,r23
    6408:	880d883a 	mov	r6,r17
    640c:	00073600 	call	7360 <memmove>
    6410:	90c00017 	ldw	r3,0(r18)
    6414:	e009883a 	mov	r4,fp
    6418:	900b883a 	mov	r5,r18
    641c:	1c47883a 	add	r3,r3,r17
    6420:	90c00015 	stw	r3,0(r18)
    6424:	00055900 	call	5590 <_fflush_r>
    6428:	103fc91e 	bne	r2,zero,6350 <__sfvwrite_r+0x254>
    642c:	a469c83a 	sub	r20,r20,r17
    6430:	a03fe81e 	bne	r20,zero,63d4 <__sfvwrite_r+0x2d8>
    6434:	e009883a 	mov	r4,fp
    6438:	900b883a 	mov	r5,r18
    643c:	00055900 	call	5590 <_fflush_r>
    6440:	103fc31e 	bne	r2,zero,6350 <__sfvwrite_r+0x254>
    6444:	d8000015 	stw	zero,0(sp)
    6448:	003fe206 	br	63d4 <__sfvwrite_r+0x2d8>
    644c:	91000017 	ldw	r4,0(r18)
    6450:	90800417 	ldw	r2,16(r18)
    6454:	1100022e 	bgeu	r2,r4,6460 <__sfvwrite_r+0x364>
    6458:	8023883a 	mov	r17,r16
    645c:	85003136 	bltu	r16,r20,6524 <__sfvwrite_r+0x428>
    6460:	91c00517 	ldw	r7,20(r18)
    6464:	a1c01836 	bltu	r20,r7,64c8 <__sfvwrite_r+0x3cc>
    6468:	90c00917 	ldw	r3,36(r18)
    646c:	91400717 	ldw	r5,28(r18)
    6470:	e009883a 	mov	r4,fp
    6474:	b80d883a 	mov	r6,r23
    6478:	183ee83a 	callr	r3
    647c:	1021883a 	mov	r16,r2
    6480:	00bfb30e 	bge	zero,r2,6350 <__sfvwrite_r+0x254>
    6484:	1023883a 	mov	r17,r2
    6488:	1027883a 	mov	r19,r2
    648c:	003f9b06 	br	62fc <__sfvwrite_r+0x200>
    6490:	b80b883a 	mov	r5,r23
    6494:	800d883a 	mov	r6,r16
    6498:	00073600 	call	7360 <memmove>
    649c:	90c00217 	ldw	r3,8(r18)
    64a0:	90800017 	ldw	r2,0(r18)
    64a4:	8023883a 	mov	r17,r16
    64a8:	1c07c83a 	sub	r3,r3,r16
    64ac:	1405883a 	add	r2,r2,r16
    64b0:	90c00215 	stw	r3,8(r18)
    64b4:	90800015 	stw	r2,0(r18)
    64b8:	003fc406 	br	63cc <__sfvwrite_r+0x2d0>
    64bc:	a00d883a 	mov	r6,r20
    64c0:	a021883a 	mov	r16,r20
    64c4:	003f8106 	br	62cc <__sfvwrite_r+0x1d0>
    64c8:	b80b883a 	mov	r5,r23
    64cc:	a00d883a 	mov	r6,r20
    64d0:	00073600 	call	7360 <memmove>
    64d4:	90c00217 	ldw	r3,8(r18)
    64d8:	90800017 	ldw	r2,0(r18)
    64dc:	a021883a 	mov	r16,r20
    64e0:	1d07c83a 	sub	r3,r3,r20
    64e4:	1505883a 	add	r2,r2,r20
    64e8:	a023883a 	mov	r17,r20
    64ec:	a027883a 	mov	r19,r20
    64f0:	90c00215 	stw	r3,8(r18)
    64f4:	90800015 	stw	r2,0(r18)
    64f8:	003f8006 	br	62fc <__sfvwrite_r+0x200>
    64fc:	b809883a 	mov	r4,r23
    6500:	01400284 	movi	r5,10
    6504:	980d883a 	mov	r6,r19
    6508:	00071dc0 	call	71dc <memchr>
    650c:	10001726 	beq	r2,zero,656c <__sfvwrite_r+0x470>
    6510:	15c5c83a 	sub	r2,r2,r23
    6514:	15000044 	addi	r20,r2,1
    6518:	00800044 	movi	r2,1
    651c:	d8800015 	stw	r2,0(sp)
    6520:	003f9806 	br	6384 <__sfvwrite_r+0x288>
    6524:	b80b883a 	mov	r5,r23
    6528:	800d883a 	mov	r6,r16
    652c:	00073600 	call	7360 <memmove>
    6530:	90c00017 	ldw	r3,0(r18)
    6534:	e009883a 	mov	r4,fp
    6538:	900b883a 	mov	r5,r18
    653c:	1c07883a 	add	r3,r3,r16
    6540:	90c00015 	stw	r3,0(r18)
    6544:	8027883a 	mov	r19,r16
    6548:	00055900 	call	5590 <_fflush_r>
    654c:	103f6b26 	beq	r2,zero,62fc <__sfvwrite_r+0x200>
    6550:	003f7f06 	br	6350 <__sfvwrite_r+0x254>
    6554:	400b883a 	mov	r5,r8
    6558:	e009883a 	mov	r4,fp
    655c:	00084cc0 	call	84cc <_realloc_r>
    6560:	103f7626 	beq	r2,zero,633c <__sfvwrite_r+0x240>
    6564:	1023883a 	mov	r17,r2
    6568:	003f5006 	br	62ac <__sfvwrite_r+0x1b0>
    656c:	00c00044 	movi	r3,1
    6570:	9d000044 	addi	r20,r19,1
    6574:	d8c00015 	stw	r3,0(sp)
    6578:	003f8206 	br	6384 <__sfvwrite_r+0x288>
    657c:	9080030b 	ldhu	r2,12(r18)
    6580:	00c00244 	movi	r3,9
    6584:	013fffc4 	movi	r4,-1
    6588:	10801014 	ori	r2,r2,64
    658c:	9080030d 	sth	r2,12(r18)
    6590:	e0c00015 	stw	r3,0(fp)
    6594:	003f0606 	br	61b0 <__sfvwrite_r+0xb4>

00006598 <_fwalk_reent>:
    6598:	defff704 	addi	sp,sp,-36
    659c:	dcc00315 	stw	r19,12(sp)
    65a0:	24c0b804 	addi	r19,r4,736
    65a4:	dd800615 	stw	r22,24(sp)
    65a8:	dd400515 	stw	r21,20(sp)
    65ac:	dfc00815 	stw	ra,32(sp)
    65b0:	ddc00715 	stw	r23,28(sp)
    65b4:	dd000415 	stw	r20,16(sp)
    65b8:	dc800215 	stw	r18,8(sp)
    65bc:	dc400115 	stw	r17,4(sp)
    65c0:	dc000015 	stw	r16,0(sp)
    65c4:	202b883a 	mov	r21,r4
    65c8:	282d883a 	mov	r22,r5
    65cc:	00058180 	call	5818 <__sfp_lock_acquire>
    65d0:	98002126 	beq	r19,zero,6658 <_fwalk_reent+0xc0>
    65d4:	002f883a 	mov	r23,zero
    65d8:	9c800117 	ldw	r18,4(r19)
    65dc:	9c000217 	ldw	r16,8(r19)
    65e0:	90bfffc4 	addi	r2,r18,-1
    65e4:	10000d16 	blt	r2,zero,661c <_fwalk_reent+0x84>
    65e8:	0023883a 	mov	r17,zero
    65ec:	053fffc4 	movi	r20,-1
    65f0:	8080030f 	ldh	r2,12(r16)
    65f4:	8c400044 	addi	r17,r17,1
    65f8:	10000626 	beq	r2,zero,6614 <_fwalk_reent+0x7c>
    65fc:	8080038f 	ldh	r2,14(r16)
    6600:	800b883a 	mov	r5,r16
    6604:	a809883a 	mov	r4,r21
    6608:	15000226 	beq	r2,r20,6614 <_fwalk_reent+0x7c>
    660c:	b03ee83a 	callr	r22
    6610:	b8aeb03a 	or	r23,r23,r2
    6614:	84001704 	addi	r16,r16,92
    6618:	947ff51e 	bne	r18,r17,65f0 <_fwalk_reent+0x58>
    661c:	9cc00017 	ldw	r19,0(r19)
    6620:	983fed1e 	bne	r19,zero,65d8 <_fwalk_reent+0x40>
    6624:	000581c0 	call	581c <__sfp_lock_release>
    6628:	b805883a 	mov	r2,r23
    662c:	dfc00817 	ldw	ra,32(sp)
    6630:	ddc00717 	ldw	r23,28(sp)
    6634:	dd800617 	ldw	r22,24(sp)
    6638:	dd400517 	ldw	r21,20(sp)
    663c:	dd000417 	ldw	r20,16(sp)
    6640:	dcc00317 	ldw	r19,12(sp)
    6644:	dc800217 	ldw	r18,8(sp)
    6648:	dc400117 	ldw	r17,4(sp)
    664c:	dc000017 	ldw	r16,0(sp)
    6650:	dec00904 	addi	sp,sp,36
    6654:	f800283a 	ret
    6658:	002f883a 	mov	r23,zero
    665c:	003ff106 	br	6624 <_fwalk_reent+0x8c>

00006660 <_fwalk>:
    6660:	defff804 	addi	sp,sp,-32
    6664:	dcc00315 	stw	r19,12(sp)
    6668:	24c0b804 	addi	r19,r4,736
    666c:	dd400515 	stw	r21,20(sp)
    6670:	dfc00715 	stw	ra,28(sp)
    6674:	dd800615 	stw	r22,24(sp)
    6678:	dd000415 	stw	r20,16(sp)
    667c:	dc800215 	stw	r18,8(sp)
    6680:	dc400115 	stw	r17,4(sp)
    6684:	dc000015 	stw	r16,0(sp)
    6688:	282b883a 	mov	r21,r5
    668c:	00058180 	call	5818 <__sfp_lock_acquire>
    6690:	98001f26 	beq	r19,zero,6710 <_fwalk+0xb0>
    6694:	002d883a 	mov	r22,zero
    6698:	9c800117 	ldw	r18,4(r19)
    669c:	9c000217 	ldw	r16,8(r19)
    66a0:	90bfffc4 	addi	r2,r18,-1
    66a4:	10000c16 	blt	r2,zero,66d8 <_fwalk+0x78>
    66a8:	0023883a 	mov	r17,zero
    66ac:	053fffc4 	movi	r20,-1
    66b0:	8080030f 	ldh	r2,12(r16)
    66b4:	8c400044 	addi	r17,r17,1
    66b8:	10000526 	beq	r2,zero,66d0 <_fwalk+0x70>
    66bc:	8080038f 	ldh	r2,14(r16)
    66c0:	8009883a 	mov	r4,r16
    66c4:	15000226 	beq	r2,r20,66d0 <_fwalk+0x70>
    66c8:	a83ee83a 	callr	r21
    66cc:	b0acb03a 	or	r22,r22,r2
    66d0:	84001704 	addi	r16,r16,92
    66d4:	947ff61e 	bne	r18,r17,66b0 <_fwalk+0x50>
    66d8:	9cc00017 	ldw	r19,0(r19)
    66dc:	983fee1e 	bne	r19,zero,6698 <_fwalk+0x38>
    66e0:	000581c0 	call	581c <__sfp_lock_release>
    66e4:	b005883a 	mov	r2,r22
    66e8:	dfc00717 	ldw	ra,28(sp)
    66ec:	dd800617 	ldw	r22,24(sp)
    66f0:	dd400517 	ldw	r21,20(sp)
    66f4:	dd000417 	ldw	r20,16(sp)
    66f8:	dcc00317 	ldw	r19,12(sp)
    66fc:	dc800217 	ldw	r18,8(sp)
    6700:	dc400117 	ldw	r17,4(sp)
    6704:	dc000017 	ldw	r16,0(sp)
    6708:	dec00804 	addi	sp,sp,32
    670c:	f800283a 	ret
    6710:	002d883a 	mov	r22,zero
    6714:	003ff206 	br	66e0 <_fwalk+0x80>

00006718 <iswspace>:
    6718:	00803fc4 	movi	r2,255
    671c:	0007883a 	mov	r3,zero
    6720:	11000636 	bltu	r2,r4,673c <iswspace+0x24>
    6724:	00800074 	movhi	r2,1
    6728:	108e7e04 	addi	r2,r2,14840
    672c:	10c00017 	ldw	r3,0(r2)
    6730:	1907883a 	add	r3,r3,r4
    6734:	18800003 	ldbu	r2,0(r3)
    6738:	10c0020c 	andi	r3,r2,8
    673c:	1805883a 	mov	r2,r3
    6740:	f800283a 	ret

00006744 <__locale_charset>:
    6744:	d0a00417 	ldw	r2,-32752(gp)
    6748:	f800283a 	ret

0000674c <_localeconv_r>:
    674c:	00800074 	movhi	r2,1
    6750:	1086f404 	addi	r2,r2,7120
    6754:	f800283a 	ret

00006758 <localeconv>:
    6758:	00800074 	movhi	r2,1
    675c:	108e7f04 	addi	r2,r2,14844
    6760:	11000017 	ldw	r4,0(r2)
    6764:	000674c1 	jmpi	674c <_localeconv_r>

00006768 <_setlocale_r>:
    6768:	defffc04 	addi	sp,sp,-16
    676c:	00c00074 	movhi	r3,1
    6770:	18c6ef04 	addi	r3,r3,7100
    6774:	dc800215 	stw	r18,8(sp)
    6778:	dc400115 	stw	r17,4(sp)
    677c:	dc000015 	stw	r16,0(sp)
    6780:	2023883a 	mov	r17,r4
    6784:	2825883a 	mov	r18,r5
    6788:	dfc00315 	stw	ra,12(sp)
    678c:	3021883a 	mov	r16,r6
    6790:	3009883a 	mov	r4,r6
    6794:	180b883a 	mov	r5,r3
    6798:	30000926 	beq	r6,zero,67c0 <_setlocale_r+0x58>
    679c:	00090680 	call	9068 <strcmp>
    67a0:	8009883a 	mov	r4,r16
    67a4:	01400074 	movhi	r5,1
    67a8:	29462e04 	addi	r5,r5,6328
    67ac:	10000b1e 	bne	r2,zero,67dc <_setlocale_r+0x74>
    67b0:	8c000d15 	stw	r16,52(r17)
    67b4:	8c800c15 	stw	r18,48(r17)
    67b8:	00c00074 	movhi	r3,1
    67bc:	18c6ef04 	addi	r3,r3,7100
    67c0:	1805883a 	mov	r2,r3
    67c4:	dfc00317 	ldw	ra,12(sp)
    67c8:	dc800217 	ldw	r18,8(sp)
    67cc:	dc400117 	ldw	r17,4(sp)
    67d0:	dc000017 	ldw	r16,0(sp)
    67d4:	dec00404 	addi	sp,sp,16
    67d8:	f800283a 	ret
    67dc:	00090680 	call	9068 <strcmp>
    67e0:	0007883a 	mov	r3,zero
    67e4:	103ff226 	beq	r2,zero,67b0 <_setlocale_r+0x48>
    67e8:	003ff506 	br	67c0 <_setlocale_r+0x58>

000067ec <setlocale>:
    67ec:	01800074 	movhi	r6,1
    67f0:	318e7f04 	addi	r6,r6,14844
    67f4:	2007883a 	mov	r3,r4
    67f8:	31000017 	ldw	r4,0(r6)
    67fc:	280d883a 	mov	r6,r5
    6800:	180b883a 	mov	r5,r3
    6804:	00067681 	jmpi	6768 <_setlocale_r>

00006808 <__smakebuf_r>:
    6808:	2880030b 	ldhu	r2,12(r5)
    680c:	deffed04 	addi	sp,sp,-76
    6810:	dc401015 	stw	r17,64(sp)
    6814:	1080008c 	andi	r2,r2,2
    6818:	dc000f15 	stw	r16,60(sp)
    681c:	dfc01215 	stw	ra,72(sp)
    6820:	dc801115 	stw	r18,68(sp)
    6824:	2821883a 	mov	r16,r5
    6828:	2023883a 	mov	r17,r4
    682c:	10000b26 	beq	r2,zero,685c <__smakebuf_r+0x54>
    6830:	28c010c4 	addi	r3,r5,67
    6834:	00800044 	movi	r2,1
    6838:	28800515 	stw	r2,20(r5)
    683c:	28c00415 	stw	r3,16(r5)
    6840:	28c00015 	stw	r3,0(r5)
    6844:	dfc01217 	ldw	ra,72(sp)
    6848:	dc801117 	ldw	r18,68(sp)
    684c:	dc401017 	ldw	r17,64(sp)
    6850:	dc000f17 	ldw	r16,60(sp)
    6854:	dec01304 	addi	sp,sp,76
    6858:	f800283a 	ret
    685c:	2940038f 	ldh	r5,14(r5)
    6860:	28002116 	blt	r5,zero,68e8 <__smakebuf_r+0xe0>
    6864:	d80d883a 	mov	r6,sp
    6868:	000b81c0 	call	b81c <_fstat_r>
    686c:	10001e16 	blt	r2,zero,68e8 <__smakebuf_r+0xe0>
    6870:	d8800117 	ldw	r2,4(sp)
    6874:	00e00014 	movui	r3,32768
    6878:	113c000c 	andi	r4,r2,61440
    687c:	20c03126 	beq	r4,r3,6944 <__smakebuf_r+0x13c>
    6880:	8080030b 	ldhu	r2,12(r16)
    6884:	00c80004 	movi	r3,8192
    6888:	10820014 	ori	r2,r2,2048
    688c:	8080030d 	sth	r2,12(r16)
    6890:	20c01e26 	beq	r4,r3,690c <__smakebuf_r+0x104>
    6894:	04810004 	movi	r18,1024
    6898:	8809883a 	mov	r4,r17
    689c:	900b883a 	mov	r5,r18
    68a0:	000699c0 	call	699c <_malloc_r>
    68a4:	1009883a 	mov	r4,r2
    68a8:	10003126 	beq	r2,zero,6970 <__smakebuf_r+0x168>
    68ac:	80c0030b 	ldhu	r3,12(r16)
    68b0:	00800034 	movhi	r2,0
    68b4:	10964304 	addi	r2,r2,22796
    68b8:	88800f15 	stw	r2,60(r17)
    68bc:	18c02014 	ori	r3,r3,128
    68c0:	84800515 	stw	r18,20(r16)
    68c4:	80c0030d 	sth	r3,12(r16)
    68c8:	81000415 	stw	r4,16(r16)
    68cc:	81000015 	stw	r4,0(r16)
    68d0:	dfc01217 	ldw	ra,72(sp)
    68d4:	dc801117 	ldw	r18,68(sp)
    68d8:	dc401017 	ldw	r17,64(sp)
    68dc:	dc000f17 	ldw	r16,60(sp)
    68e0:	dec01304 	addi	sp,sp,76
    68e4:	f800283a 	ret
    68e8:	80c0030b 	ldhu	r3,12(r16)
    68ec:	1880200c 	andi	r2,r3,128
    68f0:	10000426 	beq	r2,zero,6904 <__smakebuf_r+0xfc>
    68f4:	04801004 	movi	r18,64
    68f8:	18820014 	ori	r2,r3,2048
    68fc:	8080030d 	sth	r2,12(r16)
    6900:	003fe506 	br	6898 <__smakebuf_r+0x90>
    6904:	04810004 	movi	r18,1024
    6908:	003ffb06 	br	68f8 <__smakebuf_r+0xf0>
    690c:	8140038f 	ldh	r5,14(r16)
    6910:	8809883a 	mov	r4,r17
    6914:	000c4180 	call	c418 <_isatty_r>
    6918:	103fde26 	beq	r2,zero,6894 <__smakebuf_r+0x8c>
    691c:	8080030b 	ldhu	r2,12(r16)
    6920:	80c010c4 	addi	r3,r16,67
    6924:	04810004 	movi	r18,1024
    6928:	10800054 	ori	r2,r2,1
    692c:	8080030d 	sth	r2,12(r16)
    6930:	00800044 	movi	r2,1
    6934:	80c00415 	stw	r3,16(r16)
    6938:	80800515 	stw	r2,20(r16)
    693c:	80c00015 	stw	r3,0(r16)
    6940:	003fd506 	br	6898 <__smakebuf_r+0x90>
    6944:	80c00a17 	ldw	r3,40(r16)
    6948:	00800074 	movhi	r2,1
    694c:	10a3c904 	addi	r2,r2,-28892
    6950:	18bfcb1e 	bne	r3,r2,6880 <__smakebuf_r+0x78>
    6954:	8080030b 	ldhu	r2,12(r16)
    6958:	00c10004 	movi	r3,1024
    695c:	1825883a 	mov	r18,r3
    6960:	10c4b03a 	or	r2,r2,r3
    6964:	8080030d 	sth	r2,12(r16)
    6968:	80c01315 	stw	r3,76(r16)
    696c:	003fca06 	br	6898 <__smakebuf_r+0x90>
    6970:	8100030b 	ldhu	r4,12(r16)
    6974:	2080800c 	andi	r2,r4,512
    6978:	103fb21e 	bne	r2,zero,6844 <__smakebuf_r+0x3c>
    697c:	80c010c4 	addi	r3,r16,67
    6980:	21000094 	ori	r4,r4,2
    6984:	00800044 	movi	r2,1
    6988:	80800515 	stw	r2,20(r16)
    698c:	8100030d 	sth	r4,12(r16)
    6990:	80c00415 	stw	r3,16(r16)
    6994:	80c00015 	stw	r3,0(r16)
    6998:	003faa06 	br	6844 <__smakebuf_r+0x3c>

0000699c <_malloc_r>:
    699c:	defff604 	addi	sp,sp,-40
    69a0:	28c002c4 	addi	r3,r5,11
    69a4:	00800584 	movi	r2,22
    69a8:	dc800215 	stw	r18,8(sp)
    69ac:	dfc00915 	stw	ra,36(sp)
    69b0:	df000815 	stw	fp,32(sp)
    69b4:	ddc00715 	stw	r23,28(sp)
    69b8:	dd800615 	stw	r22,24(sp)
    69bc:	dd400515 	stw	r21,20(sp)
    69c0:	dd000415 	stw	r20,16(sp)
    69c4:	dcc00315 	stw	r19,12(sp)
    69c8:	dc400115 	stw	r17,4(sp)
    69cc:	dc000015 	stw	r16,0(sp)
    69d0:	2025883a 	mov	r18,r4
    69d4:	10c01236 	bltu	r2,r3,6a20 <_malloc_r+0x84>
    69d8:	04400404 	movi	r17,16
    69dc:	8940142e 	bgeu	r17,r5,6a30 <_malloc_r+0x94>
    69e0:	00800304 	movi	r2,12
    69e4:	0007883a 	mov	r3,zero
    69e8:	90800015 	stw	r2,0(r18)
    69ec:	1805883a 	mov	r2,r3
    69f0:	dfc00917 	ldw	ra,36(sp)
    69f4:	df000817 	ldw	fp,32(sp)
    69f8:	ddc00717 	ldw	r23,28(sp)
    69fc:	dd800617 	ldw	r22,24(sp)
    6a00:	dd400517 	ldw	r21,20(sp)
    6a04:	dd000417 	ldw	r20,16(sp)
    6a08:	dcc00317 	ldw	r19,12(sp)
    6a0c:	dc800217 	ldw	r18,8(sp)
    6a10:	dc400117 	ldw	r17,4(sp)
    6a14:	dc000017 	ldw	r16,0(sp)
    6a18:	dec00a04 	addi	sp,sp,40
    6a1c:	f800283a 	ret
    6a20:	00bffe04 	movi	r2,-8
    6a24:	18a2703a 	and	r17,r3,r2
    6a28:	883fed16 	blt	r17,zero,69e0 <_malloc_r+0x44>
    6a2c:	897fec36 	bltu	r17,r5,69e0 <_malloc_r+0x44>
    6a30:	9009883a 	mov	r4,r18
    6a34:	000f2780 	call	f278 <__malloc_lock>
    6a38:	00807dc4 	movi	r2,503
    6a3c:	14402b2e 	bgeu	r2,r17,6aec <_malloc_r+0x150>
    6a40:	8806d27a 	srli	r3,r17,9
    6a44:	18003f1e 	bne	r3,zero,6b44 <_malloc_r+0x1a8>
    6a48:	880cd0fa 	srli	r6,r17,3
    6a4c:	300490fa 	slli	r2,r6,3
    6a50:	02c00074 	movhi	r11,1
    6a54:	5ac8bd04 	addi	r11,r11,8948
    6a58:	12cb883a 	add	r5,r2,r11
    6a5c:	2c000317 	ldw	r16,12(r5)
    6a60:	580f883a 	mov	r7,r11
    6a64:	2c00041e 	bne	r5,r16,6a78 <_malloc_r+0xdc>
    6a68:	00000a06 	br	6a94 <_malloc_r+0xf8>
    6a6c:	1800860e 	bge	r3,zero,6c88 <_malloc_r+0x2ec>
    6a70:	84000317 	ldw	r16,12(r16)
    6a74:	2c000726 	beq	r5,r16,6a94 <_malloc_r+0xf8>
    6a78:	80800117 	ldw	r2,4(r16)
    6a7c:	00ffff04 	movi	r3,-4
    6a80:	10c8703a 	and	r4,r2,r3
    6a84:	2447c83a 	sub	r3,r4,r17
    6a88:	008003c4 	movi	r2,15
    6a8c:	10fff70e 	bge	r2,r3,6a6c <_malloc_r+0xd0>
    6a90:	31bfffc4 	addi	r6,r6,-1
    6a94:	32400044 	addi	r9,r6,1
    6a98:	02800074 	movhi	r10,1
    6a9c:	5288bf04 	addi	r10,r10,8956
    6aa0:	54000217 	ldw	r16,8(r10)
    6aa4:	8280a026 	beq	r16,r10,6d28 <_malloc_r+0x38c>
    6aa8:	80800117 	ldw	r2,4(r16)
    6aac:	00ffff04 	movi	r3,-4
    6ab0:	10ca703a 	and	r5,r2,r3
    6ab4:	2c4dc83a 	sub	r6,r5,r17
    6ab8:	008003c4 	movi	r2,15
    6abc:	11808316 	blt	r2,r6,6ccc <_malloc_r+0x330>
    6ac0:	52800315 	stw	r10,12(r10)
    6ac4:	52800215 	stw	r10,8(r10)
    6ac8:	30002916 	blt	r6,zero,6b70 <_malloc_r+0x1d4>
    6acc:	8147883a 	add	r3,r16,r5
    6ad0:	18800117 	ldw	r2,4(r3)
    6ad4:	9009883a 	mov	r4,r18
    6ad8:	10800054 	ori	r2,r2,1
    6adc:	18800115 	stw	r2,4(r3)
    6ae0:	000f27c0 	call	f27c <__malloc_unlock>
    6ae4:	80c00204 	addi	r3,r16,8
    6ae8:	003fc006 	br	69ec <_malloc_r+0x50>
    6aec:	02c00074 	movhi	r11,1
    6af0:	5ac8bd04 	addi	r11,r11,8948
    6af4:	8ac5883a 	add	r2,r17,r11
    6af8:	14000317 	ldw	r16,12(r2)
    6afc:	580f883a 	mov	r7,r11
    6b00:	8806d0fa 	srli	r3,r17,3
    6b04:	14006c26 	beq	r2,r16,6cb8 <_malloc_r+0x31c>
    6b08:	80c00117 	ldw	r3,4(r16)
    6b0c:	00bfff04 	movi	r2,-4
    6b10:	81800317 	ldw	r6,12(r16)
    6b14:	1886703a 	and	r3,r3,r2
    6b18:	80c7883a 	add	r3,r16,r3
    6b1c:	18800117 	ldw	r2,4(r3)
    6b20:	81400217 	ldw	r5,8(r16)
    6b24:	9009883a 	mov	r4,r18
    6b28:	10800054 	ori	r2,r2,1
    6b2c:	18800115 	stw	r2,4(r3)
    6b30:	31400215 	stw	r5,8(r6)
    6b34:	29800315 	stw	r6,12(r5)
    6b38:	000f27c0 	call	f27c <__malloc_unlock>
    6b3c:	80c00204 	addi	r3,r16,8
    6b40:	003faa06 	br	69ec <_malloc_r+0x50>
    6b44:	00800104 	movi	r2,4
    6b48:	10c0052e 	bgeu	r2,r3,6b60 <_malloc_r+0x1c4>
    6b4c:	00800504 	movi	r2,20
    6b50:	10c07836 	bltu	r2,r3,6d34 <_malloc_r+0x398>
    6b54:	198016c4 	addi	r6,r3,91
    6b58:	300490fa 	slli	r2,r6,3
    6b5c:	003fbc06 	br	6a50 <_malloc_r+0xb4>
    6b60:	8804d1ba 	srli	r2,r17,6
    6b64:	11800e04 	addi	r6,r2,56
    6b68:	300490fa 	slli	r2,r6,3
    6b6c:	003fb806 	br	6a50 <_malloc_r+0xb4>
    6b70:	00807fc4 	movi	r2,511
    6b74:	1140bb36 	bltu	r2,r5,6e64 <_malloc_r+0x4c8>
    6b78:	2806d0fa 	srli	r3,r5,3
    6b7c:	573ffe04 	addi	fp,r10,-8
    6b80:	00800044 	movi	r2,1
    6b84:	180890fa 	slli	r4,r3,3
    6b88:	1807d0ba 	srai	r3,r3,2
    6b8c:	e1c00117 	ldw	r7,4(fp)
    6b90:	5909883a 	add	r4,r11,r4
    6b94:	21400217 	ldw	r5,8(r4)
    6b98:	10c4983a 	sll	r2,r2,r3
    6b9c:	81000315 	stw	r4,12(r16)
    6ba0:	81400215 	stw	r5,8(r16)
    6ba4:	388eb03a 	or	r7,r7,r2
    6ba8:	2c000315 	stw	r16,12(r5)
    6bac:	24000215 	stw	r16,8(r4)
    6bb0:	e1c00115 	stw	r7,4(fp)
    6bb4:	4807883a 	mov	r3,r9
    6bb8:	4800cd16 	blt	r9,zero,6ef0 <_malloc_r+0x554>
    6bbc:	1807d0ba 	srai	r3,r3,2
    6bc0:	00800044 	movi	r2,1
    6bc4:	10c8983a 	sll	r4,r2,r3
    6bc8:	39004436 	bltu	r7,r4,6cdc <_malloc_r+0x340>
    6bcc:	21c4703a 	and	r2,r4,r7
    6bd0:	10000a1e 	bne	r2,zero,6bfc <_malloc_r+0x260>
    6bd4:	2109883a 	add	r4,r4,r4
    6bd8:	00bfff04 	movi	r2,-4
    6bdc:	4884703a 	and	r2,r9,r2
    6be0:	3906703a 	and	r3,r7,r4
    6be4:	12400104 	addi	r9,r2,4
    6be8:	1800041e 	bne	r3,zero,6bfc <_malloc_r+0x260>
    6bec:	2109883a 	add	r4,r4,r4
    6bf0:	3904703a 	and	r2,r7,r4
    6bf4:	4a400104 	addi	r9,r9,4
    6bf8:	103ffc26 	beq	r2,zero,6bec <_malloc_r+0x250>
    6bfc:	480490fa 	slli	r2,r9,3
    6c00:	4819883a 	mov	r12,r9
    6c04:	023fff04 	movi	r8,-4
    6c08:	589b883a 	add	r13,r11,r2
    6c0c:	6807883a 	mov	r3,r13
    6c10:	014003c4 	movi	r5,15
    6c14:	1c000317 	ldw	r16,12(r3)
    6c18:	1c00041e 	bne	r3,r16,6c2c <_malloc_r+0x290>
    6c1c:	0000a706 	br	6ebc <_malloc_r+0x520>
    6c20:	3000ab0e 	bge	r6,zero,6ed0 <_malloc_r+0x534>
    6c24:	84000317 	ldw	r16,12(r16)
    6c28:	1c00a426 	beq	r3,r16,6ebc <_malloc_r+0x520>
    6c2c:	80800117 	ldw	r2,4(r16)
    6c30:	1204703a 	and	r2,r2,r8
    6c34:	144dc83a 	sub	r6,r2,r17
    6c38:	29bff90e 	bge	r5,r6,6c20 <_malloc_r+0x284>
    6c3c:	81000317 	ldw	r4,12(r16)
    6c40:	80c00217 	ldw	r3,8(r16)
    6c44:	89400054 	ori	r5,r17,1
    6c48:	8445883a 	add	r2,r16,r17
    6c4c:	20c00215 	stw	r3,8(r4)
    6c50:	19000315 	stw	r4,12(r3)
    6c54:	81400115 	stw	r5,4(r16)
    6c58:	1187883a 	add	r3,r2,r6
    6c5c:	31000054 	ori	r4,r6,1
    6c60:	50800315 	stw	r2,12(r10)
    6c64:	50800215 	stw	r2,8(r10)
    6c68:	19800015 	stw	r6,0(r3)
    6c6c:	11000115 	stw	r4,4(r2)
    6c70:	12800215 	stw	r10,8(r2)
    6c74:	12800315 	stw	r10,12(r2)
    6c78:	9009883a 	mov	r4,r18
    6c7c:	000f27c0 	call	f27c <__malloc_unlock>
    6c80:	80c00204 	addi	r3,r16,8
    6c84:	003f5906 	br	69ec <_malloc_r+0x50>
    6c88:	8109883a 	add	r4,r16,r4
    6c8c:	20800117 	ldw	r2,4(r4)
    6c90:	80c00217 	ldw	r3,8(r16)
    6c94:	81400317 	ldw	r5,12(r16)
    6c98:	10800054 	ori	r2,r2,1
    6c9c:	20800115 	stw	r2,4(r4)
    6ca0:	28c00215 	stw	r3,8(r5)
    6ca4:	19400315 	stw	r5,12(r3)
    6ca8:	9009883a 	mov	r4,r18
    6cac:	000f27c0 	call	f27c <__malloc_unlock>
    6cb0:	80c00204 	addi	r3,r16,8
    6cb4:	003f4d06 	br	69ec <_malloc_r+0x50>
    6cb8:	80800204 	addi	r2,r16,8
    6cbc:	14000317 	ldw	r16,12(r2)
    6cc0:	143f911e 	bne	r2,r16,6b08 <_malloc_r+0x16c>
    6cc4:	1a400084 	addi	r9,r3,2
    6cc8:	003f7306 	br	6a98 <_malloc_r+0xfc>
    6ccc:	88c00054 	ori	r3,r17,1
    6cd0:	8445883a 	add	r2,r16,r17
    6cd4:	80c00115 	stw	r3,4(r16)
    6cd8:	003fdf06 	br	6c58 <_malloc_r+0x2bc>
    6cdc:	e4000217 	ldw	r16,8(fp)
    6ce0:	00bfff04 	movi	r2,-4
    6ce4:	80c00117 	ldw	r3,4(r16)
    6ce8:	802d883a 	mov	r22,r16
    6cec:	18aa703a 	and	r21,r3,r2
    6cf0:	ac401636 	bltu	r21,r17,6d4c <_malloc_r+0x3b0>
    6cf4:	ac49c83a 	sub	r4,r21,r17
    6cf8:	008003c4 	movi	r2,15
    6cfc:	1100130e 	bge	r2,r4,6d4c <_malloc_r+0x3b0>
    6d00:	88800054 	ori	r2,r17,1
    6d04:	8447883a 	add	r3,r16,r17
    6d08:	80800115 	stw	r2,4(r16)
    6d0c:	20800054 	ori	r2,r4,1
    6d10:	18800115 	stw	r2,4(r3)
    6d14:	e0c00215 	stw	r3,8(fp)
    6d18:	9009883a 	mov	r4,r18
    6d1c:	000f27c0 	call	f27c <__malloc_unlock>
    6d20:	80c00204 	addi	r3,r16,8
    6d24:	003f3106 	br	69ec <_malloc_r+0x50>
    6d28:	39c00117 	ldw	r7,4(r7)
    6d2c:	573ffe04 	addi	fp,r10,-8
    6d30:	003fa006 	br	6bb4 <_malloc_r+0x218>
    6d34:	00801504 	movi	r2,84
    6d38:	10c06736 	bltu	r2,r3,6ed8 <_malloc_r+0x53c>
    6d3c:	8804d33a 	srli	r2,r17,12
    6d40:	11801b84 	addi	r6,r2,110
    6d44:	300490fa 	slli	r2,r6,3
    6d48:	003f4106 	br	6a50 <_malloc_r+0xb4>
    6d4c:	d0a6e917 	ldw	r2,-25692(gp)
    6d50:	d0e00617 	ldw	r3,-32744(gp)
    6d54:	053fffc4 	movi	r20,-1
    6d58:	10800404 	addi	r2,r2,16
    6d5c:	88a7883a 	add	r19,r17,r2
    6d60:	1d000326 	beq	r3,r20,6d70 <_malloc_r+0x3d4>
    6d64:	98c3ffc4 	addi	r3,r19,4095
    6d68:	00bc0004 	movi	r2,-4096
    6d6c:	18a6703a 	and	r19,r3,r2
    6d70:	9009883a 	mov	r4,r18
    6d74:	980b883a 	mov	r5,r19
    6d78:	0008d100 	call	8d10 <_sbrk_r>
    6d7c:	1009883a 	mov	r4,r2
    6d80:	15000426 	beq	r2,r20,6d94 <_malloc_r+0x3f8>
    6d84:	854b883a 	add	r5,r16,r21
    6d88:	1029883a 	mov	r20,r2
    6d8c:	11405a2e 	bgeu	r2,r5,6ef8 <_malloc_r+0x55c>
    6d90:	87000c26 	beq	r16,fp,6dc4 <_malloc_r+0x428>
    6d94:	e4000217 	ldw	r16,8(fp)
    6d98:	80c00117 	ldw	r3,4(r16)
    6d9c:	00bfff04 	movi	r2,-4
    6da0:	1884703a 	and	r2,r3,r2
    6da4:	14400336 	bltu	r2,r17,6db4 <_malloc_r+0x418>
    6da8:	1449c83a 	sub	r4,r2,r17
    6dac:	008003c4 	movi	r2,15
    6db0:	113fd316 	blt	r2,r4,6d00 <_malloc_r+0x364>
    6db4:	9009883a 	mov	r4,r18
    6db8:	000f27c0 	call	f27c <__malloc_unlock>
    6dbc:	0007883a 	mov	r3,zero
    6dc0:	003f0a06 	br	69ec <_malloc_r+0x50>
    6dc4:	05c00074 	movhi	r23,1
    6dc8:	bdd57104 	addi	r23,r23,21956
    6dcc:	b8800017 	ldw	r2,0(r23)
    6dd0:	988d883a 	add	r6,r19,r2
    6dd4:	b9800015 	stw	r6,0(r23)
    6dd8:	d0e00617 	ldw	r3,-32744(gp)
    6ddc:	00bfffc4 	movi	r2,-1
    6de0:	18808e26 	beq	r3,r2,701c <_malloc_r+0x680>
    6de4:	2145c83a 	sub	r2,r4,r5
    6de8:	3085883a 	add	r2,r6,r2
    6dec:	b8800015 	stw	r2,0(r23)
    6df0:	20c001cc 	andi	r3,r4,7
    6df4:	18005f1e 	bne	r3,zero,6f74 <_malloc_r+0x5d8>
    6df8:	000b883a 	mov	r5,zero
    6dfc:	a4c5883a 	add	r2,r20,r19
    6e00:	1083ffcc 	andi	r2,r2,4095
    6e04:	00c40004 	movi	r3,4096
    6e08:	1887c83a 	sub	r3,r3,r2
    6e0c:	28e7883a 	add	r19,r5,r3
    6e10:	9009883a 	mov	r4,r18
    6e14:	980b883a 	mov	r5,r19
    6e18:	0008d100 	call	8d10 <_sbrk_r>
    6e1c:	1007883a 	mov	r3,r2
    6e20:	00bfffc4 	movi	r2,-1
    6e24:	18807a26 	beq	r3,r2,7010 <_malloc_r+0x674>
    6e28:	1d05c83a 	sub	r2,r3,r20
    6e2c:	9885883a 	add	r2,r19,r2
    6e30:	10c00054 	ori	r3,r2,1
    6e34:	b8800017 	ldw	r2,0(r23)
    6e38:	a021883a 	mov	r16,r20
    6e3c:	a0c00115 	stw	r3,4(r20)
    6e40:	9885883a 	add	r2,r19,r2
    6e44:	b8800015 	stw	r2,0(r23)
    6e48:	e5000215 	stw	r20,8(fp)
    6e4c:	b7003626 	beq	r22,fp,6f28 <_malloc_r+0x58c>
    6e50:	018003c4 	movi	r6,15
    6e54:	35404b36 	bltu	r6,r21,6f84 <_malloc_r+0x5e8>
    6e58:	00800044 	movi	r2,1
    6e5c:	a0800115 	stw	r2,4(r20)
    6e60:	003fcd06 	br	6d98 <_malloc_r+0x3fc>
    6e64:	2808d27a 	srli	r4,r5,9
    6e68:	2000371e 	bne	r4,zero,6f48 <_malloc_r+0x5ac>
    6e6c:	2808d0fa 	srli	r4,r5,3
    6e70:	200690fa 	slli	r3,r4,3
    6e74:	1ad1883a 	add	r8,r3,r11
    6e78:	41800217 	ldw	r6,8(r8)
    6e7c:	41805b26 	beq	r8,r6,6fec <_malloc_r+0x650>
    6e80:	30800117 	ldw	r2,4(r6)
    6e84:	00ffff04 	movi	r3,-4
    6e88:	10c4703a 	and	r2,r2,r3
    6e8c:	2880022e 	bgeu	r5,r2,6e98 <_malloc_r+0x4fc>
    6e90:	31800217 	ldw	r6,8(r6)
    6e94:	41bffa1e 	bne	r8,r6,6e80 <_malloc_r+0x4e4>
    6e98:	32000317 	ldw	r8,12(r6)
    6e9c:	39c00117 	ldw	r7,4(r7)
    6ea0:	82000315 	stw	r8,12(r16)
    6ea4:	81800215 	stw	r6,8(r16)
    6ea8:	07000074 	movhi	fp,1
    6eac:	e708bd04 	addi	fp,fp,8948
    6eb0:	34000315 	stw	r16,12(r6)
    6eb4:	44000215 	stw	r16,8(r8)
    6eb8:	003f3e06 	br	6bb4 <_malloc_r+0x218>
    6ebc:	63000044 	addi	r12,r12,1
    6ec0:	608000cc 	andi	r2,r12,3
    6ec4:	10005d26 	beq	r2,zero,703c <_malloc_r+0x6a0>
    6ec8:	18c00204 	addi	r3,r3,8
    6ecc:	003f5106 	br	6c14 <_malloc_r+0x278>
    6ed0:	8089883a 	add	r4,r16,r2
    6ed4:	003f6d06 	br	6c8c <_malloc_r+0x2f0>
    6ed8:	00805504 	movi	r2,340
    6edc:	10c02036 	bltu	r2,r3,6f60 <_malloc_r+0x5c4>
    6ee0:	8804d3fa 	srli	r2,r17,15
    6ee4:	11801dc4 	addi	r6,r2,119
    6ee8:	300490fa 	slli	r2,r6,3
    6eec:	003ed806 	br	6a50 <_malloc_r+0xb4>
    6ef0:	48c000c4 	addi	r3,r9,3
    6ef4:	003f3106 	br	6bbc <_malloc_r+0x220>
    6ef8:	05c00074 	movhi	r23,1
    6efc:	bdd57104 	addi	r23,r23,21956
    6f00:	b8800017 	ldw	r2,0(r23)
    6f04:	988d883a 	add	r6,r19,r2
    6f08:	b9800015 	stw	r6,0(r23)
    6f0c:	293fb21e 	bne	r5,r4,6dd8 <_malloc_r+0x43c>
    6f10:	2083ffcc 	andi	r2,r4,4095
    6f14:	103fb01e 	bne	r2,zero,6dd8 <_malloc_r+0x43c>
    6f18:	e4000217 	ldw	r16,8(fp)
    6f1c:	9d45883a 	add	r2,r19,r21
    6f20:	10800054 	ori	r2,r2,1
    6f24:	80800115 	stw	r2,4(r16)
    6f28:	b8c00017 	ldw	r3,0(r23)
    6f2c:	d0a6ea17 	ldw	r2,-25688(gp)
    6f30:	10c0012e 	bgeu	r2,r3,6f38 <_malloc_r+0x59c>
    6f34:	d0e6ea15 	stw	r3,-25688(gp)
    6f38:	d0a6eb17 	ldw	r2,-25684(gp)
    6f3c:	10ff962e 	bgeu	r2,r3,6d98 <_malloc_r+0x3fc>
    6f40:	d0e6eb15 	stw	r3,-25684(gp)
    6f44:	003f9406 	br	6d98 <_malloc_r+0x3fc>
    6f48:	00800104 	movi	r2,4
    6f4c:	11001e36 	bltu	r2,r4,6fc8 <_malloc_r+0x62c>
    6f50:	2804d1ba 	srli	r2,r5,6
    6f54:	11000e04 	addi	r4,r2,56
    6f58:	200690fa 	slli	r3,r4,3
    6f5c:	003fc506 	br	6e74 <_malloc_r+0x4d8>
    6f60:	00815504 	movi	r2,1364
    6f64:	10c01d2e 	bgeu	r2,r3,6fdc <_malloc_r+0x640>
    6f68:	01801f84 	movi	r6,126
    6f6c:	0080fc04 	movi	r2,1008
    6f70:	003eb706 	br	6a50 <_malloc_r+0xb4>
    6f74:	00800204 	movi	r2,8
    6f78:	10cbc83a 	sub	r5,r2,r3
    6f7c:	2169883a 	add	r20,r4,r5
    6f80:	003f9e06 	br	6dfc <_malloc_r+0x460>
    6f84:	00bffe04 	movi	r2,-8
    6f88:	a93ffd04 	addi	r4,r21,-12
    6f8c:	2088703a 	and	r4,r4,r2
    6f90:	b10b883a 	add	r5,r22,r4
    6f94:	00c00144 	movi	r3,5
    6f98:	28c00215 	stw	r3,8(r5)
    6f9c:	28c00115 	stw	r3,4(r5)
    6fa0:	b0800117 	ldw	r2,4(r22)
    6fa4:	1080004c 	andi	r2,r2,1
    6fa8:	2084b03a 	or	r2,r4,r2
    6fac:	b0800115 	stw	r2,4(r22)
    6fb0:	313fdd2e 	bgeu	r6,r4,6f28 <_malloc_r+0x58c>
    6fb4:	b1400204 	addi	r5,r22,8
    6fb8:	9009883a 	mov	r4,r18
    6fbc:	0005de80 	call	5de8 <_free_r>
    6fc0:	e4000217 	ldw	r16,8(fp)
    6fc4:	003fd806 	br	6f28 <_malloc_r+0x58c>
    6fc8:	00800504 	movi	r2,20
    6fcc:	11001536 	bltu	r2,r4,7024 <_malloc_r+0x688>
    6fd0:	210016c4 	addi	r4,r4,91
    6fd4:	200690fa 	slli	r3,r4,3
    6fd8:	003fa606 	br	6e74 <_malloc_r+0x4d8>
    6fdc:	8804d4ba 	srli	r2,r17,18
    6fe0:	11801f04 	addi	r6,r2,124
    6fe4:	300490fa 	slli	r2,r6,3
    6fe8:	003e9906 	br	6a50 <_malloc_r+0xb4>
    6fec:	2009d0ba 	srai	r4,r4,2
    6ff0:	01400074 	movhi	r5,1
    6ff4:	2948bd04 	addi	r5,r5,8948
    6ff8:	00c00044 	movi	r3,1
    6ffc:	28800117 	ldw	r2,4(r5)
    7000:	1906983a 	sll	r3,r3,r4
    7004:	10c4b03a 	or	r2,r2,r3
    7008:	28800115 	stw	r2,4(r5)
    700c:	003fa306 	br	6e9c <_malloc_r+0x500>
    7010:	0027883a 	mov	r19,zero
    7014:	00c00044 	movi	r3,1
    7018:	003f8606 	br	6e34 <_malloc_r+0x498>
    701c:	d1200615 	stw	r4,-32744(gp)
    7020:	003f7306 	br	6df0 <_malloc_r+0x454>
    7024:	00801504 	movi	r2,84
    7028:	11001936 	bltu	r2,r4,7090 <_malloc_r+0x6f4>
    702c:	2804d33a 	srli	r2,r5,12
    7030:	11001b84 	addi	r4,r2,110
    7034:	200690fa 	slli	r3,r4,3
    7038:	003f8e06 	br	6e74 <_malloc_r+0x4d8>
    703c:	480b883a 	mov	r5,r9
    7040:	6807883a 	mov	r3,r13
    7044:	288000cc 	andi	r2,r5,3
    7048:	18fffe04 	addi	r3,r3,-8
    704c:	297fffc4 	addi	r5,r5,-1
    7050:	10001526 	beq	r2,zero,70a8 <_malloc_r+0x70c>
    7054:	18800217 	ldw	r2,8(r3)
    7058:	10fffa26 	beq	r2,r3,7044 <_malloc_r+0x6a8>
    705c:	2109883a 	add	r4,r4,r4
    7060:	393f1e36 	bltu	r7,r4,6cdc <_malloc_r+0x340>
    7064:	203f1d26 	beq	r4,zero,6cdc <_malloc_r+0x340>
    7068:	21c4703a 	and	r2,r4,r7
    706c:	10000226 	beq	r2,zero,7078 <_malloc_r+0x6dc>
    7070:	6013883a 	mov	r9,r12
    7074:	003ee106 	br	6bfc <_malloc_r+0x260>
    7078:	2109883a 	add	r4,r4,r4
    707c:	3904703a 	and	r2,r7,r4
    7080:	63000104 	addi	r12,r12,4
    7084:	103ffc26 	beq	r2,zero,7078 <_malloc_r+0x6dc>
    7088:	6013883a 	mov	r9,r12
    708c:	003edb06 	br	6bfc <_malloc_r+0x260>
    7090:	00805504 	movi	r2,340
    7094:	11000836 	bltu	r2,r4,70b8 <_malloc_r+0x71c>
    7098:	2804d3fa 	srli	r2,r5,15
    709c:	11001dc4 	addi	r4,r2,119
    70a0:	200690fa 	slli	r3,r4,3
    70a4:	003f7306 	br	6e74 <_malloc_r+0x4d8>
    70a8:	0104303a 	nor	r2,zero,r4
    70ac:	388e703a 	and	r7,r7,r2
    70b0:	e1c00115 	stw	r7,4(fp)
    70b4:	003fe906 	br	705c <_malloc_r+0x6c0>
    70b8:	00815504 	movi	r2,1364
    70bc:	1100032e 	bgeu	r2,r4,70cc <_malloc_r+0x730>
    70c0:	01001f84 	movi	r4,126
    70c4:	00c0fc04 	movi	r3,1008
    70c8:	003f6a06 	br	6e74 <_malloc_r+0x4d8>
    70cc:	2804d4ba 	srli	r2,r5,18
    70d0:	11001f04 	addi	r4,r2,124
    70d4:	200690fa 	slli	r3,r4,3
    70d8:	003f6606 	br	6e74 <_malloc_r+0x4d8>

000070dc <_mbrtowc_r>:
    70dc:	defffc04 	addi	sp,sp,-16
    70e0:	dc400215 	stw	r17,8(sp)
    70e4:	dc000115 	stw	r16,4(sp)
    70e8:	dfc00315 	stw	ra,12(sp)
    70ec:	dc000417 	ldw	r16,16(sp)
    70f0:	2023883a 	mov	r17,r4
    70f4:	30000f26 	beq	r6,zero,7134 <_mbrtowc_r+0x58>
    70f8:	dc000015 	stw	r16,0(sp)
    70fc:	000719c0 	call	719c <_mbtowc_r>
    7100:	1007883a 	mov	r3,r2
    7104:	00bfffc4 	movi	r2,-1
    7108:	1809883a 	mov	r4,r3
    710c:	1880111e 	bne	r3,r2,7154 <_mbrtowc_r+0x78>
    7110:	80000015 	stw	zero,0(r16)
    7114:	00802284 	movi	r2,138
    7118:	88800015 	stw	r2,0(r17)
    711c:	2005883a 	mov	r2,r4
    7120:	dfc00317 	ldw	ra,12(sp)
    7124:	dc400217 	ldw	r17,8(sp)
    7128:	dc000117 	ldw	r16,4(sp)
    712c:	dec00404 	addi	sp,sp,16
    7130:	f800283a 	ret
    7134:	000b883a 	mov	r5,zero
    7138:	01800074 	movhi	r6,1
    713c:	31862e04 	addi	r6,r6,6328
    7140:	01c00044 	movi	r7,1
    7144:	dc000015 	stw	r16,0(sp)
    7148:	000719c0 	call	719c <_mbtowc_r>
    714c:	1007883a 	mov	r3,r2
    7150:	003fec06 	br	7104 <_mbrtowc_r+0x28>
    7154:	1809883a 	mov	r4,r3
    7158:	003ff006 	br	711c <_mbrtowc_r+0x40>

0000715c <mbrtowc>:
    715c:	00800074 	movhi	r2,1
    7160:	108e7f04 	addi	r2,r2,14844
    7164:	2017883a 	mov	r11,r4
    7168:	11000017 	ldw	r4,0(r2)
    716c:	defffe04 	addi	sp,sp,-8
    7170:	3013883a 	mov	r9,r6
    7174:	2805883a 	mov	r2,r5
    7178:	d9c00015 	stw	r7,0(sp)
    717c:	580b883a 	mov	r5,r11
    7180:	100d883a 	mov	r6,r2
    7184:	480f883a 	mov	r7,r9
    7188:	dfc00115 	stw	ra,4(sp)
    718c:	00070dc0 	call	70dc <_mbrtowc_r>
    7190:	dfc00117 	ldw	ra,4(sp)
    7194:	dec00204 	addi	sp,sp,8
    7198:	f800283a 	ret

0000719c <_mbtowc_r>:
    719c:	deffff04 	addi	sp,sp,-4
    71a0:	0005883a 	mov	r2,zero
    71a4:	28000326 	beq	r5,zero,71b4 <_mbtowc_r+0x18>
    71a8:	3000041e 	bne	r6,zero,71bc <_mbtowc_r+0x20>
    71ac:	dec00104 	addi	sp,sp,4
    71b0:	f800283a 	ret
    71b4:	d80b883a 	mov	r5,sp
    71b8:	303ffc26 	beq	r6,zero,71ac <_mbtowc_r+0x10>
    71bc:	00bfff84 	movi	r2,-2
    71c0:	383ffa26 	beq	r7,zero,71ac <_mbtowc_r+0x10>
    71c4:	30800003 	ldbu	r2,0(r6)
    71c8:	28800015 	stw	r2,0(r5)
    71cc:	30c00003 	ldbu	r3,0(r6)
    71d0:	1804c03a 	cmpne	r2,r3,zero
    71d4:	dec00104 	addi	sp,sp,4
    71d8:	f800283a 	ret

000071dc <memchr>:
    71dc:	008000c4 	movi	r2,3
    71e0:	29403fcc 	andi	r5,r5,255
    71e4:	2007883a 	mov	r3,r4
    71e8:	1180022e 	bgeu	r2,r6,71f4 <memchr+0x18>
    71ec:	2084703a 	and	r2,r4,r2
    71f0:	10000b26 	beq	r2,zero,7220 <memchr+0x44>
    71f4:	313fffc4 	addi	r4,r6,-1
    71f8:	3000051e 	bne	r6,zero,7210 <memchr+0x34>
    71fc:	00002c06 	br	72b0 <memchr+0xd4>
    7200:	213fffc4 	addi	r4,r4,-1
    7204:	00bfffc4 	movi	r2,-1
    7208:	18c00044 	addi	r3,r3,1
    720c:	20802826 	beq	r4,r2,72b0 <memchr+0xd4>
    7210:	18800003 	ldbu	r2,0(r3)
    7214:	28bffa1e 	bne	r5,r2,7200 <memchr+0x24>
    7218:	1805883a 	mov	r2,r3
    721c:	f800283a 	ret
    7220:	0011883a 	mov	r8,zero
    7224:	0007883a 	mov	r3,zero
    7228:	01c00104 	movi	r7,4
    722c:	4004923a 	slli	r2,r8,8
    7230:	18c00044 	addi	r3,r3,1
    7234:	1151883a 	add	r8,r2,r5
    7238:	19fffc1e 	bne	r3,r7,722c <memchr+0x50>
    723c:	02bfbff4 	movhi	r10,65279
    7240:	52bfbfc4 	addi	r10,r10,-257
    7244:	02602074 	movhi	r9,32897
    7248:	4a602004 	addi	r9,r9,-32640
    724c:	02c000c4 	movi	r11,3
    7250:	20800017 	ldw	r2,0(r4)
    7254:	31bfff04 	addi	r6,r6,-4
    7258:	200f883a 	mov	r7,r4
    725c:	1204f03a 	xor	r2,r2,r8
    7260:	1287883a 	add	r3,r2,r10
    7264:	1a46703a 	and	r3,r3,r9
    7268:	0084303a 	nor	r2,zero,r2
    726c:	10c4703a 	and	r2,r2,r3
    7270:	10000b26 	beq	r2,zero,72a0 <memchr+0xc4>
    7274:	20800003 	ldbu	r2,0(r4)
    7278:	28800f26 	beq	r5,r2,72b8 <memchr+0xdc>
    727c:	20800043 	ldbu	r2,1(r4)
    7280:	21c00044 	addi	r7,r4,1
    7284:	28800c26 	beq	r5,r2,72b8 <memchr+0xdc>
    7288:	20800083 	ldbu	r2,2(r4)
    728c:	21c00084 	addi	r7,r4,2
    7290:	28800926 	beq	r5,r2,72b8 <memchr+0xdc>
    7294:	208000c3 	ldbu	r2,3(r4)
    7298:	21c000c4 	addi	r7,r4,3
    729c:	28800626 	beq	r5,r2,72b8 <memchr+0xdc>
    72a0:	21000104 	addi	r4,r4,4
    72a4:	59bfea36 	bltu	r11,r6,7250 <memchr+0x74>
    72a8:	2007883a 	mov	r3,r4
    72ac:	003fd106 	br	71f4 <memchr+0x18>
    72b0:	0005883a 	mov	r2,zero
    72b4:	f800283a 	ret
    72b8:	3805883a 	mov	r2,r7
    72bc:	f800283a 	ret

000072c0 <memcpy>:
    72c0:	01c003c4 	movi	r7,15
    72c4:	2007883a 	mov	r3,r4
    72c8:	3980032e 	bgeu	r7,r6,72d8 <memcpy+0x18>
    72cc:	2904b03a 	or	r2,r5,r4
    72d0:	108000cc 	andi	r2,r2,3
    72d4:	10000926 	beq	r2,zero,72fc <memcpy+0x3c>
    72d8:	30000626 	beq	r6,zero,72f4 <memcpy+0x34>
    72dc:	30cd883a 	add	r6,r6,r3
    72e0:	28800003 	ldbu	r2,0(r5)
    72e4:	29400044 	addi	r5,r5,1
    72e8:	18800005 	stb	r2,0(r3)
    72ec:	18c00044 	addi	r3,r3,1
    72f0:	30fffb1e 	bne	r6,r3,72e0 <memcpy+0x20>
    72f4:	2005883a 	mov	r2,r4
    72f8:	f800283a 	ret
    72fc:	3811883a 	mov	r8,r7
    7300:	200f883a 	mov	r7,r4
    7304:	28c00017 	ldw	r3,0(r5)
    7308:	31bffc04 	addi	r6,r6,-16
    730c:	38c00015 	stw	r3,0(r7)
    7310:	28800117 	ldw	r2,4(r5)
    7314:	38800115 	stw	r2,4(r7)
    7318:	28c00217 	ldw	r3,8(r5)
    731c:	38c00215 	stw	r3,8(r7)
    7320:	28800317 	ldw	r2,12(r5)
    7324:	29400404 	addi	r5,r5,16
    7328:	38800315 	stw	r2,12(r7)
    732c:	39c00404 	addi	r7,r7,16
    7330:	41bff436 	bltu	r8,r6,7304 <memcpy+0x44>
    7334:	008000c4 	movi	r2,3
    7338:	1180072e 	bgeu	r2,r6,7358 <memcpy+0x98>
    733c:	1007883a 	mov	r3,r2
    7340:	28800017 	ldw	r2,0(r5)
    7344:	31bfff04 	addi	r6,r6,-4
    7348:	29400104 	addi	r5,r5,4
    734c:	38800015 	stw	r2,0(r7)
    7350:	39c00104 	addi	r7,r7,4
    7354:	19bffa36 	bltu	r3,r6,7340 <memcpy+0x80>
    7358:	3807883a 	mov	r3,r7
    735c:	003fde06 	br	72d8 <memcpy+0x18>

00007360 <memmove>:
    7360:	2807883a 	mov	r3,r5
    7364:	2011883a 	mov	r8,r4
    7368:	29000c2e 	bgeu	r5,r4,739c <memmove+0x3c>
    736c:	298f883a 	add	r7,r5,r6
    7370:	21c00a2e 	bgeu	r4,r7,739c <memmove+0x3c>
    7374:	30000726 	beq	r6,zero,7394 <memmove+0x34>
    7378:	2187883a 	add	r3,r4,r6
    737c:	198dc83a 	sub	r6,r3,r6
    7380:	39ffffc4 	addi	r7,r7,-1
    7384:	38800003 	ldbu	r2,0(r7)
    7388:	18ffffc4 	addi	r3,r3,-1
    738c:	18800005 	stb	r2,0(r3)
    7390:	19bffb1e 	bne	r3,r6,7380 <memmove+0x20>
    7394:	2005883a 	mov	r2,r4
    7398:	f800283a 	ret
    739c:	01c003c4 	movi	r7,15
    73a0:	39800a36 	bltu	r7,r6,73cc <memmove+0x6c>
    73a4:	303ffb26 	beq	r6,zero,7394 <memmove+0x34>
    73a8:	400f883a 	mov	r7,r8
    73ac:	320d883a 	add	r6,r6,r8
    73b0:	28800003 	ldbu	r2,0(r5)
    73b4:	29400044 	addi	r5,r5,1
    73b8:	38800005 	stb	r2,0(r7)
    73bc:	39c00044 	addi	r7,r7,1
    73c0:	39bffb1e 	bne	r7,r6,73b0 <memmove+0x50>
    73c4:	2005883a 	mov	r2,r4
    73c8:	f800283a 	ret
    73cc:	1904b03a 	or	r2,r3,r4
    73d0:	108000cc 	andi	r2,r2,3
    73d4:	103ff31e 	bne	r2,zero,73a4 <memmove+0x44>
    73d8:	3811883a 	mov	r8,r7
    73dc:	180b883a 	mov	r5,r3
    73e0:	200f883a 	mov	r7,r4
    73e4:	28c00017 	ldw	r3,0(r5)
    73e8:	31bffc04 	addi	r6,r6,-16
    73ec:	38c00015 	stw	r3,0(r7)
    73f0:	28800117 	ldw	r2,4(r5)
    73f4:	38800115 	stw	r2,4(r7)
    73f8:	28c00217 	ldw	r3,8(r5)
    73fc:	38c00215 	stw	r3,8(r7)
    7400:	28800317 	ldw	r2,12(r5)
    7404:	29400404 	addi	r5,r5,16
    7408:	38800315 	stw	r2,12(r7)
    740c:	39c00404 	addi	r7,r7,16
    7410:	41bff436 	bltu	r8,r6,73e4 <memmove+0x84>
    7414:	008000c4 	movi	r2,3
    7418:	1180072e 	bgeu	r2,r6,7438 <memmove+0xd8>
    741c:	1007883a 	mov	r3,r2
    7420:	28800017 	ldw	r2,0(r5)
    7424:	31bfff04 	addi	r6,r6,-4
    7428:	29400104 	addi	r5,r5,4
    742c:	38800015 	stw	r2,0(r7)
    7430:	39c00104 	addi	r7,r7,4
    7434:	19bffa36 	bltu	r3,r6,7420 <memmove+0xc0>
    7438:	3811883a 	mov	r8,r7
    743c:	003fd906 	br	73a4 <memmove+0x44>

00007440 <memset>:
    7440:	008000c4 	movi	r2,3
    7444:	29403fcc 	andi	r5,r5,255
    7448:	2007883a 	mov	r3,r4
    744c:	1180022e 	bgeu	r2,r6,7458 <memset+0x18>
    7450:	2084703a 	and	r2,r4,r2
    7454:	10000826 	beq	r2,zero,7478 <memset+0x38>
    7458:	30000526 	beq	r6,zero,7470 <memset+0x30>
    745c:	2805883a 	mov	r2,r5
    7460:	30cd883a 	add	r6,r6,r3
    7464:	18800005 	stb	r2,0(r3)
    7468:	18c00044 	addi	r3,r3,1
    746c:	19bffd1e 	bne	r3,r6,7464 <memset+0x24>
    7470:	2005883a 	mov	r2,r4
    7474:	f800283a 	ret
    7478:	2804923a 	slli	r2,r5,8
    747c:	020003c4 	movi	r8,15
    7480:	200f883a 	mov	r7,r4
    7484:	2884b03a 	or	r2,r5,r2
    7488:	1006943a 	slli	r3,r2,16
    748c:	10c6b03a 	or	r3,r2,r3
    7490:	41800a2e 	bgeu	r8,r6,74bc <memset+0x7c>
    7494:	4005883a 	mov	r2,r8
    7498:	31bffc04 	addi	r6,r6,-16
    749c:	38c00015 	stw	r3,0(r7)
    74a0:	38c00115 	stw	r3,4(r7)
    74a4:	38c00215 	stw	r3,8(r7)
    74a8:	38c00315 	stw	r3,12(r7)
    74ac:	39c00404 	addi	r7,r7,16
    74b0:	11bff936 	bltu	r2,r6,7498 <memset+0x58>
    74b4:	008000c4 	movi	r2,3
    74b8:	1180052e 	bgeu	r2,r6,74d0 <memset+0x90>
    74bc:	31bfff04 	addi	r6,r6,-4
    74c0:	008000c4 	movi	r2,3
    74c4:	38c00015 	stw	r3,0(r7)
    74c8:	39c00104 	addi	r7,r7,4
    74cc:	11bffb36 	bltu	r2,r6,74bc <memset+0x7c>
    74d0:	3807883a 	mov	r3,r7
    74d4:	003fe006 	br	7458 <memset+0x18>

000074d8 <_Bfree>:
    74d8:	28000826 	beq	r5,zero,74fc <_Bfree+0x24>
    74dc:	28800117 	ldw	r2,4(r5)
    74e0:	21001317 	ldw	r4,76(r4)
    74e4:	1085883a 	add	r2,r2,r2
    74e8:	1085883a 	add	r2,r2,r2
    74ec:	1105883a 	add	r2,r2,r4
    74f0:	10c00017 	ldw	r3,0(r2)
    74f4:	28c00015 	stw	r3,0(r5)
    74f8:	11400015 	stw	r5,0(r2)
    74fc:	f800283a 	ret

00007500 <__hi0bits>:
    7500:	20bfffec 	andhi	r2,r4,65535
    7504:	10001426 	beq	r2,zero,7558 <__hi0bits+0x58>
    7508:	0007883a 	mov	r3,zero
    750c:	20bfc02c 	andhi	r2,r4,65280
    7510:	1000021e 	bne	r2,zero,751c <__hi0bits+0x1c>
    7514:	2008923a 	slli	r4,r4,8
    7518:	18c00204 	addi	r3,r3,8
    751c:	20bc002c 	andhi	r2,r4,61440
    7520:	1000021e 	bne	r2,zero,752c <__hi0bits+0x2c>
    7524:	2008913a 	slli	r4,r4,4
    7528:	18c00104 	addi	r3,r3,4
    752c:	20b0002c 	andhi	r2,r4,49152
    7530:	1000031e 	bne	r2,zero,7540 <__hi0bits+0x40>
    7534:	2105883a 	add	r2,r4,r4
    7538:	18c00084 	addi	r3,r3,2
    753c:	1089883a 	add	r4,r2,r2
    7540:	20000316 	blt	r4,zero,7550 <__hi0bits+0x50>
    7544:	2090002c 	andhi	r2,r4,16384
    7548:	10000626 	beq	r2,zero,7564 <__hi0bits+0x64>
    754c:	18c00044 	addi	r3,r3,1
    7550:	1805883a 	mov	r2,r3
    7554:	f800283a 	ret
    7558:	2008943a 	slli	r4,r4,16
    755c:	00c00404 	movi	r3,16
    7560:	003fea06 	br	750c <__hi0bits+0xc>
    7564:	00c00804 	movi	r3,32
    7568:	1805883a 	mov	r2,r3
    756c:	f800283a 	ret

00007570 <__lo0bits>:
    7570:	20c00017 	ldw	r3,0(r4)
    7574:	188001cc 	andi	r2,r3,7
    7578:	10000a26 	beq	r2,zero,75a4 <__lo0bits+0x34>
    757c:	1880004c 	andi	r2,r3,1
    7580:	1005003a 	cmpeq	r2,r2,zero
    7584:	10002126 	beq	r2,zero,760c <__lo0bits+0x9c>
    7588:	1880008c 	andi	r2,r3,2
    758c:	1000251e 	bne	r2,zero,7624 <__lo0bits+0xb4>
    7590:	1804d0ba 	srli	r2,r3,2
    7594:	01400084 	movi	r5,2
    7598:	20800015 	stw	r2,0(r4)
    759c:	2805883a 	mov	r2,r5
    75a0:	f800283a 	ret
    75a4:	18bfffcc 	andi	r2,r3,65535
    75a8:	10001526 	beq	r2,zero,7600 <__lo0bits+0x90>
    75ac:	000b883a 	mov	r5,zero
    75b0:	18803fcc 	andi	r2,r3,255
    75b4:	1000021e 	bne	r2,zero,75c0 <__lo0bits+0x50>
    75b8:	1806d23a 	srli	r3,r3,8
    75bc:	29400204 	addi	r5,r5,8
    75c0:	188003cc 	andi	r2,r3,15
    75c4:	1000021e 	bne	r2,zero,75d0 <__lo0bits+0x60>
    75c8:	1806d13a 	srli	r3,r3,4
    75cc:	29400104 	addi	r5,r5,4
    75d0:	188000cc 	andi	r2,r3,3
    75d4:	1000021e 	bne	r2,zero,75e0 <__lo0bits+0x70>
    75d8:	1806d0ba 	srli	r3,r3,2
    75dc:	29400084 	addi	r5,r5,2
    75e0:	1880004c 	andi	r2,r3,1
    75e4:	1000031e 	bne	r2,zero,75f4 <__lo0bits+0x84>
    75e8:	1806d07a 	srli	r3,r3,1
    75ec:	18000a26 	beq	r3,zero,7618 <__lo0bits+0xa8>
    75f0:	29400044 	addi	r5,r5,1
    75f4:	2805883a 	mov	r2,r5
    75f8:	20c00015 	stw	r3,0(r4)
    75fc:	f800283a 	ret
    7600:	1806d43a 	srli	r3,r3,16
    7604:	01400404 	movi	r5,16
    7608:	003fe906 	br	75b0 <__lo0bits+0x40>
    760c:	000b883a 	mov	r5,zero
    7610:	2805883a 	mov	r2,r5
    7614:	f800283a 	ret
    7618:	01400804 	movi	r5,32
    761c:	2805883a 	mov	r2,r5
    7620:	f800283a 	ret
    7624:	1804d07a 	srli	r2,r3,1
    7628:	01400044 	movi	r5,1
    762c:	20800015 	stw	r2,0(r4)
    7630:	003fda06 	br	759c <__lo0bits+0x2c>

00007634 <__mcmp>:
    7634:	20800417 	ldw	r2,16(r4)
    7638:	28c00417 	ldw	r3,16(r5)
    763c:	10cfc83a 	sub	r7,r2,r3
    7640:	38000c1e 	bne	r7,zero,7674 <__mcmp+0x40>
    7644:	18c5883a 	add	r2,r3,r3
    7648:	1085883a 	add	r2,r2,r2
    764c:	10c00504 	addi	r3,r2,20
    7650:	21000504 	addi	r4,r4,20
    7654:	28cb883a 	add	r5,r5,r3
    7658:	2085883a 	add	r2,r4,r2
    765c:	10bfff04 	addi	r2,r2,-4
    7660:	297fff04 	addi	r5,r5,-4
    7664:	11800017 	ldw	r6,0(r2)
    7668:	28c00017 	ldw	r3,0(r5)
    766c:	30c0031e 	bne	r6,r3,767c <__mcmp+0x48>
    7670:	20bffa36 	bltu	r4,r2,765c <__mcmp+0x28>
    7674:	3805883a 	mov	r2,r7
    7678:	f800283a 	ret
    767c:	30c00336 	bltu	r6,r3,768c <__mcmp+0x58>
    7680:	01c00044 	movi	r7,1
    7684:	3805883a 	mov	r2,r7
    7688:	f800283a 	ret
    768c:	01ffffc4 	movi	r7,-1
    7690:	003ff806 	br	7674 <__mcmp+0x40>

00007694 <__ulp>:
    7694:	295ffc2c 	andhi	r5,r5,32752
    7698:	013f3034 	movhi	r4,64704
    769c:	290b883a 	add	r5,r5,r4
    76a0:	0145c83a 	sub	r2,zero,r5
    76a4:	1007d53a 	srai	r3,r2,20
    76a8:	000d883a 	mov	r6,zero
    76ac:	0140040e 	bge	zero,r5,76c0 <__ulp+0x2c>
    76b0:	280f883a 	mov	r7,r5
    76b4:	3807883a 	mov	r3,r7
    76b8:	3005883a 	mov	r2,r6
    76bc:	f800283a 	ret
    76c0:	008004c4 	movi	r2,19
    76c4:	193ffb04 	addi	r4,r3,-20
    76c8:	10c00c0e 	bge	r2,r3,76fc <__ulp+0x68>
    76cc:	008007c4 	movi	r2,31
    76d0:	1107c83a 	sub	r3,r2,r4
    76d4:	00800784 	movi	r2,30
    76d8:	01400044 	movi	r5,1
    76dc:	11000216 	blt	r2,r4,76e8 <__ulp+0x54>
    76e0:	00800044 	movi	r2,1
    76e4:	10ca983a 	sll	r5,r2,r3
    76e8:	000f883a 	mov	r7,zero
    76ec:	280d883a 	mov	r6,r5
    76f0:	3807883a 	mov	r3,r7
    76f4:	3005883a 	mov	r2,r6
    76f8:	f800283a 	ret
    76fc:	00800234 	movhi	r2,8
    7700:	10cfd83a 	sra	r7,r2,r3
    7704:	000d883a 	mov	r6,zero
    7708:	3005883a 	mov	r2,r6
    770c:	3807883a 	mov	r3,r7
    7710:	f800283a 	ret

00007714 <__b2d>:
    7714:	20800417 	ldw	r2,16(r4)
    7718:	defff904 	addi	sp,sp,-28
    771c:	dd000415 	stw	r20,16(sp)
    7720:	1085883a 	add	r2,r2,r2
    7724:	25000504 	addi	r20,r4,20
    7728:	1085883a 	add	r2,r2,r2
    772c:	dc000015 	stw	r16,0(sp)
    7730:	a0a1883a 	add	r16,r20,r2
    7734:	dd400515 	stw	r21,20(sp)
    7738:	857fff17 	ldw	r21,-4(r16)
    773c:	dc400115 	stw	r17,4(sp)
    7740:	dfc00615 	stw	ra,24(sp)
    7744:	a809883a 	mov	r4,r21
    7748:	2823883a 	mov	r17,r5
    774c:	dcc00315 	stw	r19,12(sp)
    7750:	dc800215 	stw	r18,8(sp)
    7754:	00075000 	call	7500 <__hi0bits>
    7758:	100b883a 	mov	r5,r2
    775c:	00800804 	movi	r2,32
    7760:	1145c83a 	sub	r2,r2,r5
    7764:	88800015 	stw	r2,0(r17)
    7768:	00800284 	movi	r2,10
    776c:	80ffff04 	addi	r3,r16,-4
    7770:	11401416 	blt	r2,r5,77c4 <__b2d+0xb0>
    7774:	008002c4 	movi	r2,11
    7778:	1149c83a 	sub	r4,r2,r5
    777c:	a0c02736 	bltu	r20,r3,781c <__b2d+0x108>
    7780:	000d883a 	mov	r6,zero
    7784:	28800544 	addi	r2,r5,21
    7788:	a906d83a 	srl	r3,r21,r4
    778c:	a884983a 	sll	r2,r21,r2
    7790:	1ccffc34 	orhi	r19,r3,16368
    7794:	11a4b03a 	or	r18,r2,r6
    7798:	9005883a 	mov	r2,r18
    779c:	9807883a 	mov	r3,r19
    77a0:	dfc00617 	ldw	ra,24(sp)
    77a4:	dd400517 	ldw	r21,20(sp)
    77a8:	dd000417 	ldw	r20,16(sp)
    77ac:	dcc00317 	ldw	r19,12(sp)
    77b0:	dc800217 	ldw	r18,8(sp)
    77b4:	dc400117 	ldw	r17,4(sp)
    77b8:	dc000017 	ldw	r16,0(sp)
    77bc:	dec00704 	addi	sp,sp,28
    77c0:	f800283a 	ret
    77c4:	a0c00e36 	bltu	r20,r3,7800 <__b2d+0xec>
    77c8:	293ffd44 	addi	r4,r5,-11
    77cc:	000d883a 	mov	r6,zero
    77d0:	20000f26 	beq	r4,zero,7810 <__b2d+0xfc>
    77d4:	00800804 	movi	r2,32
    77d8:	110bc83a 	sub	r5,r2,r4
    77dc:	a0c01236 	bltu	r20,r3,7828 <__b2d+0x114>
    77e0:	000f883a 	mov	r7,zero
    77e4:	a904983a 	sll	r2,r21,r4
    77e8:	3146d83a 	srl	r3,r6,r5
    77ec:	3108983a 	sll	r4,r6,r4
    77f0:	108ffc34 	orhi	r2,r2,16368
    77f4:	18a6b03a 	or	r19,r3,r2
    77f8:	3924b03a 	or	r18,r7,r4
    77fc:	003fe606 	br	7798 <__b2d+0x84>
    7800:	293ffd44 	addi	r4,r5,-11
    7804:	81bffe17 	ldw	r6,-8(r16)
    7808:	80fffe04 	addi	r3,r16,-8
    780c:	203ff11e 	bne	r4,zero,77d4 <__b2d+0xc0>
    7810:	accffc34 	orhi	r19,r21,16368
    7814:	3025883a 	mov	r18,r6
    7818:	003fdf06 	br	7798 <__b2d+0x84>
    781c:	18bfff17 	ldw	r2,-4(r3)
    7820:	110cd83a 	srl	r6,r2,r4
    7824:	003fd706 	br	7784 <__b2d+0x70>
    7828:	18bfff17 	ldw	r2,-4(r3)
    782c:	114ed83a 	srl	r7,r2,r5
    7830:	003fec06 	br	77e4 <__b2d+0xd0>

00007834 <__ratio>:
    7834:	defff904 	addi	sp,sp,-28
    7838:	dc400215 	stw	r17,8(sp)
    783c:	2823883a 	mov	r17,r5
    7840:	d80b883a 	mov	r5,sp
    7844:	dfc00615 	stw	ra,24(sp)
    7848:	dd000515 	stw	r20,20(sp)
    784c:	dcc00415 	stw	r19,16(sp)
    7850:	dc800315 	stw	r18,12(sp)
    7854:	2025883a 	mov	r18,r4
    7858:	00077140 	call	7714 <__b2d>
    785c:	8809883a 	mov	r4,r17
    7860:	d9400104 	addi	r5,sp,4
    7864:	1027883a 	mov	r19,r2
    7868:	1829883a 	mov	r20,r3
    786c:	00077140 	call	7714 <__b2d>
    7870:	89000417 	ldw	r4,16(r17)
    7874:	91c00417 	ldw	r7,16(r18)
    7878:	d9800117 	ldw	r6,4(sp)
    787c:	180b883a 	mov	r5,r3
    7880:	390fc83a 	sub	r7,r7,r4
    7884:	1009883a 	mov	r4,r2
    7888:	d8800017 	ldw	r2,0(sp)
    788c:	380e917a 	slli	r7,r7,5
    7890:	2011883a 	mov	r8,r4
    7894:	1185c83a 	sub	r2,r2,r6
    7898:	11c5883a 	add	r2,r2,r7
    789c:	1006953a 	slli	r3,r2,20
    78a0:	2813883a 	mov	r9,r5
    78a4:	00800d0e 	bge	zero,r2,78dc <__ratio+0xa8>
    78a8:	1d29883a 	add	r20,r3,r20
    78ac:	a00b883a 	mov	r5,r20
    78b0:	480f883a 	mov	r7,r9
    78b4:	9809883a 	mov	r4,r19
    78b8:	400d883a 	mov	r6,r8
    78bc:	000dc700 	call	dc70 <__divdf3>
    78c0:	dfc00617 	ldw	ra,24(sp)
    78c4:	dd000517 	ldw	r20,20(sp)
    78c8:	dcc00417 	ldw	r19,16(sp)
    78cc:	dc800317 	ldw	r18,12(sp)
    78d0:	dc400217 	ldw	r17,8(sp)
    78d4:	dec00704 	addi	sp,sp,28
    78d8:	f800283a 	ret
    78dc:	28d3c83a 	sub	r9,r5,r3
    78e0:	003ff206 	br	78ac <__ratio+0x78>

000078e4 <_mprec_log10>:
    78e4:	defffe04 	addi	sp,sp,-8
    78e8:	008005c4 	movi	r2,23
    78ec:	dc000015 	stw	r16,0(sp)
    78f0:	dfc00115 	stw	ra,4(sp)
    78f4:	2021883a 	mov	r16,r4
    78f8:	11000c16 	blt	r2,r4,792c <_mprec_log10+0x48>
    78fc:	200490fa 	slli	r2,r4,3
    7900:	00c00074 	movhi	r3,1
    7904:	18c70004 	addi	r3,r3,7168
    7908:	10c5883a 	add	r2,r2,r3
    790c:	12400117 	ldw	r9,4(r2)
    7910:	12000017 	ldw	r8,0(r2)
    7914:	4807883a 	mov	r3,r9
    7918:	4005883a 	mov	r2,r8
    791c:	dfc00117 	ldw	ra,4(sp)
    7920:	dc000017 	ldw	r16,0(sp)
    7924:	dec00204 	addi	sp,sp,8
    7928:	f800283a 	ret
    792c:	0011883a 	mov	r8,zero
    7930:	024ffc34 	movhi	r9,16368
    7934:	0005883a 	mov	r2,zero
    7938:	00d00934 	movhi	r3,16420
    793c:	480b883a 	mov	r5,r9
    7940:	4009883a 	mov	r4,r8
    7944:	180f883a 	mov	r7,r3
    7948:	100d883a 	mov	r6,r2
    794c:	000d8ac0 	call	d8ac <__muldf3>
    7950:	843fffc4 	addi	r16,r16,-1
    7954:	1011883a 	mov	r8,r2
    7958:	1813883a 	mov	r9,r3
    795c:	803ff51e 	bne	r16,zero,7934 <_mprec_log10+0x50>
    7960:	4005883a 	mov	r2,r8
    7964:	4807883a 	mov	r3,r9
    7968:	dfc00117 	ldw	ra,4(sp)
    796c:	dc000017 	ldw	r16,0(sp)
    7970:	dec00204 	addi	sp,sp,8
    7974:	f800283a 	ret

00007978 <__copybits>:
    7978:	297fffc4 	addi	r5,r5,-1
    797c:	30800417 	ldw	r2,16(r6)
    7980:	280bd17a 	srai	r5,r5,5
    7984:	31800504 	addi	r6,r6,20
    7988:	1085883a 	add	r2,r2,r2
    798c:	294b883a 	add	r5,r5,r5
    7990:	294b883a 	add	r5,r5,r5
    7994:	1085883a 	add	r2,r2,r2
    7998:	290b883a 	add	r5,r5,r4
    799c:	3087883a 	add	r3,r6,r2
    79a0:	29400104 	addi	r5,r5,4
    79a4:	30c0052e 	bgeu	r6,r3,79bc <__copybits+0x44>
    79a8:	30800017 	ldw	r2,0(r6)
    79ac:	31800104 	addi	r6,r6,4
    79b0:	20800015 	stw	r2,0(r4)
    79b4:	21000104 	addi	r4,r4,4
    79b8:	30fffb36 	bltu	r6,r3,79a8 <__copybits+0x30>
    79bc:	2140032e 	bgeu	r4,r5,79cc <__copybits+0x54>
    79c0:	20000015 	stw	zero,0(r4)
    79c4:	21000104 	addi	r4,r4,4
    79c8:	217ffd36 	bltu	r4,r5,79c0 <__copybits+0x48>
    79cc:	f800283a 	ret

000079d0 <__any_on>:
    79d0:	20800417 	ldw	r2,16(r4)
    79d4:	2807d17a 	srai	r3,r5,5
    79d8:	21000504 	addi	r4,r4,20
    79dc:	10c00d0e 	bge	r2,r3,7a14 <__any_on+0x44>
    79e0:	1085883a 	add	r2,r2,r2
    79e4:	1085883a 	add	r2,r2,r2
    79e8:	208d883a 	add	r6,r4,r2
    79ec:	2180182e 	bgeu	r4,r6,7a50 <__any_on+0x80>
    79f0:	30bfff17 	ldw	r2,-4(r6)
    79f4:	30ffff04 	addi	r3,r6,-4
    79f8:	1000041e 	bne	r2,zero,7a0c <__any_on+0x3c>
    79fc:	20c0142e 	bgeu	r4,r3,7a50 <__any_on+0x80>
    7a00:	18ffff04 	addi	r3,r3,-4
    7a04:	18800017 	ldw	r2,0(r3)
    7a08:	103ffc26 	beq	r2,zero,79fc <__any_on+0x2c>
    7a0c:	00800044 	movi	r2,1
    7a10:	f800283a 	ret
    7a14:	18800a0e 	bge	r3,r2,7a40 <__any_on+0x70>
    7a18:	294007cc 	andi	r5,r5,31
    7a1c:	28000826 	beq	r5,zero,7a40 <__any_on+0x70>
    7a20:	18c5883a 	add	r2,r3,r3
    7a24:	1085883a 	add	r2,r2,r2
    7a28:	208d883a 	add	r6,r4,r2
    7a2c:	30c00017 	ldw	r3,0(r6)
    7a30:	1944d83a 	srl	r2,r3,r5
    7a34:	1144983a 	sll	r2,r2,r5
    7a38:	18bff41e 	bne	r3,r2,7a0c <__any_on+0x3c>
    7a3c:	003feb06 	br	79ec <__any_on+0x1c>
    7a40:	18c5883a 	add	r2,r3,r3
    7a44:	1085883a 	add	r2,r2,r2
    7a48:	208d883a 	add	r6,r4,r2
    7a4c:	003fe706 	br	79ec <__any_on+0x1c>
    7a50:	0005883a 	mov	r2,zero
    7a54:	f800283a 	ret

00007a58 <_Balloc>:
    7a58:	20c01317 	ldw	r3,76(r4)
    7a5c:	defffb04 	addi	sp,sp,-20
    7a60:	dcc00315 	stw	r19,12(sp)
    7a64:	dc800215 	stw	r18,8(sp)
    7a68:	dfc00415 	stw	ra,16(sp)
    7a6c:	2825883a 	mov	r18,r5
    7a70:	dc400115 	stw	r17,4(sp)
    7a74:	dc000015 	stw	r16,0(sp)
    7a78:	2027883a 	mov	r19,r4
    7a7c:	01800404 	movi	r6,16
    7a80:	01400104 	movi	r5,4
    7a84:	18001726 	beq	r3,zero,7ae4 <_Balloc+0x8c>
    7a88:	01400044 	movi	r5,1
    7a8c:	9485883a 	add	r2,r18,r18
    7a90:	2ca2983a 	sll	r17,r5,r18
    7a94:	1085883a 	add	r2,r2,r2
    7a98:	10c7883a 	add	r3,r2,r3
    7a9c:	1c000017 	ldw	r16,0(r3)
    7aa0:	8c4d883a 	add	r6,r17,r17
    7aa4:	318d883a 	add	r6,r6,r6
    7aa8:	9809883a 	mov	r4,r19
    7aac:	31800504 	addi	r6,r6,20
    7ab0:	80001226 	beq	r16,zero,7afc <_Balloc+0xa4>
    7ab4:	80800017 	ldw	r2,0(r16)
    7ab8:	18800015 	stw	r2,0(r3)
    7abc:	80000415 	stw	zero,16(r16)
    7ac0:	80000315 	stw	zero,12(r16)
    7ac4:	8005883a 	mov	r2,r16
    7ac8:	dfc00417 	ldw	ra,16(sp)
    7acc:	dcc00317 	ldw	r19,12(sp)
    7ad0:	dc800217 	ldw	r18,8(sp)
    7ad4:	dc400117 	ldw	r17,4(sp)
    7ad8:	dc000017 	ldw	r16,0(sp)
    7adc:	dec00504 	addi	sp,sp,20
    7ae0:	f800283a 	ret
    7ae4:	000b5d40 	call	b5d4 <_calloc_r>
    7ae8:	1007883a 	mov	r3,r2
    7aec:	0021883a 	mov	r16,zero
    7af0:	98801315 	stw	r2,76(r19)
    7af4:	103fe41e 	bne	r2,zero,7a88 <_Balloc+0x30>
    7af8:	003ff206 	br	7ac4 <_Balloc+0x6c>
    7afc:	000b5d40 	call	b5d4 <_calloc_r>
    7b00:	103ff026 	beq	r2,zero,7ac4 <_Balloc+0x6c>
    7b04:	1021883a 	mov	r16,r2
    7b08:	14800115 	stw	r18,4(r2)
    7b0c:	14400215 	stw	r17,8(r2)
    7b10:	003fea06 	br	7abc <_Balloc+0x64>

00007b14 <__d2b>:
    7b14:	defff504 	addi	sp,sp,-44
    7b18:	dcc00515 	stw	r19,20(sp)
    7b1c:	04c00044 	movi	r19,1
    7b20:	dc000215 	stw	r16,8(sp)
    7b24:	2821883a 	mov	r16,r5
    7b28:	980b883a 	mov	r5,r19
    7b2c:	ddc00915 	stw	r23,36(sp)
    7b30:	dd800815 	stw	r22,32(sp)
    7b34:	dd400715 	stw	r21,28(sp)
    7b38:	dd000615 	stw	r20,24(sp)
    7b3c:	dc800415 	stw	r18,16(sp)
    7b40:	dc400315 	stw	r17,12(sp)
    7b44:	dfc00a15 	stw	ra,40(sp)
    7b48:	3023883a 	mov	r17,r6
    7b4c:	382d883a 	mov	r22,r7
    7b50:	ddc00b17 	ldw	r23,44(sp)
    7b54:	0007a580 	call	7a58 <_Balloc>
    7b58:	1025883a 	mov	r18,r2
    7b5c:	00a00034 	movhi	r2,32768
    7b60:	10bfffc4 	addi	r2,r2,-1
    7b64:	8888703a 	and	r4,r17,r2
    7b68:	202ad53a 	srli	r21,r4,20
    7b6c:	00800434 	movhi	r2,16
    7b70:	10bfffc4 	addi	r2,r2,-1
    7b74:	8886703a 	and	r3,r17,r2
    7b78:	a829003a 	cmpeq	r20,r21,zero
    7b7c:	800b883a 	mov	r5,r16
    7b80:	d8c00115 	stw	r3,4(sp)
    7b84:	94000504 	addi	r16,r18,20
    7b88:	a000021e 	bne	r20,zero,7b94 <__d2b+0x80>
    7b8c:	18c00434 	orhi	r3,r3,16
    7b90:	d8c00115 	stw	r3,4(sp)
    7b94:	28002726 	beq	r5,zero,7c34 <__d2b+0x120>
    7b98:	d809883a 	mov	r4,sp
    7b9c:	d9400015 	stw	r5,0(sp)
    7ba0:	00075700 	call	7570 <__lo0bits>
    7ba4:	100d883a 	mov	r6,r2
    7ba8:	10003526 	beq	r2,zero,7c80 <__d2b+0x16c>
    7bac:	d8c00117 	ldw	r3,4(sp)
    7bb0:	00800804 	movi	r2,32
    7bb4:	1185c83a 	sub	r2,r2,r6
    7bb8:	d9000017 	ldw	r4,0(sp)
    7bbc:	1886983a 	sll	r3,r3,r2
    7bc0:	1906b03a 	or	r3,r3,r4
    7bc4:	90c00515 	stw	r3,20(r18)
    7bc8:	d8c00117 	ldw	r3,4(sp)
    7bcc:	1986d83a 	srl	r3,r3,r6
    7bd0:	d8c00115 	stw	r3,4(sp)
    7bd4:	180b003a 	cmpeq	r5,r3,zero
    7bd8:	00800084 	movi	r2,2
    7bdc:	114bc83a 	sub	r5,r2,r5
    7be0:	80c00115 	stw	r3,4(r16)
    7be4:	91400415 	stw	r5,16(r18)
    7be8:	a0001a1e 	bne	r20,zero,7c54 <__d2b+0x140>
    7bec:	3545883a 	add	r2,r6,r21
    7bf0:	10bef344 	addi	r2,r2,-1075
    7bf4:	00c00d44 	movi	r3,53
    7bf8:	b0800015 	stw	r2,0(r22)
    7bfc:	1987c83a 	sub	r3,r3,r6
    7c00:	b8c00015 	stw	r3,0(r23)
    7c04:	9005883a 	mov	r2,r18
    7c08:	dfc00a17 	ldw	ra,40(sp)
    7c0c:	ddc00917 	ldw	r23,36(sp)
    7c10:	dd800817 	ldw	r22,32(sp)
    7c14:	dd400717 	ldw	r21,28(sp)
    7c18:	dd000617 	ldw	r20,24(sp)
    7c1c:	dcc00517 	ldw	r19,20(sp)
    7c20:	dc800417 	ldw	r18,16(sp)
    7c24:	dc400317 	ldw	r17,12(sp)
    7c28:	dc000217 	ldw	r16,8(sp)
    7c2c:	dec00b04 	addi	sp,sp,44
    7c30:	f800283a 	ret
    7c34:	d9000104 	addi	r4,sp,4
    7c38:	00075700 	call	7570 <__lo0bits>
    7c3c:	11800804 	addi	r6,r2,32
    7c40:	d8800117 	ldw	r2,4(sp)
    7c44:	94c00415 	stw	r19,16(r18)
    7c48:	980b883a 	mov	r5,r19
    7c4c:	90800515 	stw	r2,20(r18)
    7c50:	a03fe626 	beq	r20,zero,7bec <__d2b+0xd8>
    7c54:	2945883a 	add	r2,r5,r5
    7c58:	1085883a 	add	r2,r2,r2
    7c5c:	1405883a 	add	r2,r2,r16
    7c60:	113fff17 	ldw	r4,-4(r2)
    7c64:	30fef384 	addi	r3,r6,-1074
    7c68:	2820917a 	slli	r16,r5,5
    7c6c:	b0c00015 	stw	r3,0(r22)
    7c70:	00075000 	call	7500 <__hi0bits>
    7c74:	80a1c83a 	sub	r16,r16,r2
    7c78:	bc000015 	stw	r16,0(r23)
    7c7c:	003fe106 	br	7c04 <__d2b+0xf0>
    7c80:	d8800017 	ldw	r2,0(sp)
    7c84:	90800515 	stw	r2,20(r18)
    7c88:	d8c00117 	ldw	r3,4(sp)
    7c8c:	003fd106 	br	7bd4 <__d2b+0xc0>

00007c90 <__mdiff>:
    7c90:	defffb04 	addi	sp,sp,-20
    7c94:	dc000015 	stw	r16,0(sp)
    7c98:	2821883a 	mov	r16,r5
    7c9c:	dc800215 	stw	r18,8(sp)
    7ca0:	300b883a 	mov	r5,r6
    7ca4:	2025883a 	mov	r18,r4
    7ca8:	8009883a 	mov	r4,r16
    7cac:	dc400115 	stw	r17,4(sp)
    7cb0:	dfc00415 	stw	ra,16(sp)
    7cb4:	dcc00315 	stw	r19,12(sp)
    7cb8:	3023883a 	mov	r17,r6
    7cbc:	00076340 	call	7634 <__mcmp>
    7cc0:	10004226 	beq	r2,zero,7dcc <__mdiff+0x13c>
    7cc4:	10005016 	blt	r2,zero,7e08 <__mdiff+0x178>
    7cc8:	0027883a 	mov	r19,zero
    7ccc:	81400117 	ldw	r5,4(r16)
    7cd0:	9009883a 	mov	r4,r18
    7cd4:	0007a580 	call	7a58 <_Balloc>
    7cd8:	1019883a 	mov	r12,r2
    7cdc:	82800417 	ldw	r10,16(r16)
    7ce0:	88800417 	ldw	r2,16(r17)
    7ce4:	81800504 	addi	r6,r16,20
    7ce8:	5287883a 	add	r3,r10,r10
    7cec:	1085883a 	add	r2,r2,r2
    7cf0:	18c7883a 	add	r3,r3,r3
    7cf4:	1085883a 	add	r2,r2,r2
    7cf8:	8a000504 	addi	r8,r17,20
    7cfc:	64c00315 	stw	r19,12(r12)
    7d00:	30db883a 	add	r13,r6,r3
    7d04:	4097883a 	add	r11,r8,r2
    7d08:	61c00504 	addi	r7,r12,20
    7d0c:	0013883a 	mov	r9,zero
    7d10:	31000017 	ldw	r4,0(r6)
    7d14:	41400017 	ldw	r5,0(r8)
    7d18:	42000104 	addi	r8,r8,4
    7d1c:	20bfffcc 	andi	r2,r4,65535
    7d20:	28ffffcc 	andi	r3,r5,65535
    7d24:	10c5c83a 	sub	r2,r2,r3
    7d28:	1245883a 	add	r2,r2,r9
    7d2c:	2008d43a 	srli	r4,r4,16
    7d30:	280ad43a 	srli	r5,r5,16
    7d34:	1007d43a 	srai	r3,r2,16
    7d38:	3880000d 	sth	r2,0(r7)
    7d3c:	2149c83a 	sub	r4,r4,r5
    7d40:	20c9883a 	add	r4,r4,r3
    7d44:	3900008d 	sth	r4,2(r7)
    7d48:	31800104 	addi	r6,r6,4
    7d4c:	39c00104 	addi	r7,r7,4
    7d50:	2013d43a 	srai	r9,r4,16
    7d54:	42ffee36 	bltu	r8,r11,7d10 <__mdiff+0x80>
    7d58:	33400c2e 	bgeu	r6,r13,7d8c <__mdiff+0xfc>
    7d5c:	30800017 	ldw	r2,0(r6)
    7d60:	31800104 	addi	r6,r6,4
    7d64:	10ffffcc 	andi	r3,r2,65535
    7d68:	1a47883a 	add	r3,r3,r9
    7d6c:	1004d43a 	srli	r2,r2,16
    7d70:	1809d43a 	srai	r4,r3,16
    7d74:	38c0000d 	sth	r3,0(r7)
    7d78:	1105883a 	add	r2,r2,r4
    7d7c:	3880008d 	sth	r2,2(r7)
    7d80:	1013d43a 	srai	r9,r2,16
    7d84:	39c00104 	addi	r7,r7,4
    7d88:	337ff436 	bltu	r6,r13,7d5c <__mdiff+0xcc>
    7d8c:	38bfff17 	ldw	r2,-4(r7)
    7d90:	38ffff04 	addi	r3,r7,-4
    7d94:	1000041e 	bne	r2,zero,7da8 <__mdiff+0x118>
    7d98:	18ffff04 	addi	r3,r3,-4
    7d9c:	18800017 	ldw	r2,0(r3)
    7da0:	52bfffc4 	addi	r10,r10,-1
    7da4:	103ffc26 	beq	r2,zero,7d98 <__mdiff+0x108>
    7da8:	6005883a 	mov	r2,r12
    7dac:	62800415 	stw	r10,16(r12)
    7db0:	dfc00417 	ldw	ra,16(sp)
    7db4:	dcc00317 	ldw	r19,12(sp)
    7db8:	dc800217 	ldw	r18,8(sp)
    7dbc:	dc400117 	ldw	r17,4(sp)
    7dc0:	dc000017 	ldw	r16,0(sp)
    7dc4:	dec00504 	addi	sp,sp,20
    7dc8:	f800283a 	ret
    7dcc:	9009883a 	mov	r4,r18
    7dd0:	000b883a 	mov	r5,zero
    7dd4:	0007a580 	call	7a58 <_Balloc>
    7dd8:	1019883a 	mov	r12,r2
    7ddc:	00800044 	movi	r2,1
    7de0:	60800415 	stw	r2,16(r12)
    7de4:	6005883a 	mov	r2,r12
    7de8:	60000515 	stw	zero,20(r12)
    7dec:	dfc00417 	ldw	ra,16(sp)
    7df0:	dcc00317 	ldw	r19,12(sp)
    7df4:	dc800217 	ldw	r18,8(sp)
    7df8:	dc400117 	ldw	r17,4(sp)
    7dfc:	dc000017 	ldw	r16,0(sp)
    7e00:	dec00504 	addi	sp,sp,20
    7e04:	f800283a 	ret
    7e08:	880d883a 	mov	r6,r17
    7e0c:	04c00044 	movi	r19,1
    7e10:	8023883a 	mov	r17,r16
    7e14:	3021883a 	mov	r16,r6
    7e18:	003fac06 	br	7ccc <__mdiff+0x3c>

00007e1c <__lshift>:
    7e1c:	defff904 	addi	sp,sp,-28
    7e20:	28800417 	ldw	r2,16(r5)
    7e24:	dc000015 	stw	r16,0(sp)
    7e28:	3021d17a 	srai	r16,r6,5
    7e2c:	28c00217 	ldw	r3,8(r5)
    7e30:	10800044 	addi	r2,r2,1
    7e34:	dc400115 	stw	r17,4(sp)
    7e38:	80a3883a 	add	r17,r16,r2
    7e3c:	dd400515 	stw	r21,20(sp)
    7e40:	dd000415 	stw	r20,16(sp)
    7e44:	dc800215 	stw	r18,8(sp)
    7e48:	dfc00615 	stw	ra,24(sp)
    7e4c:	2825883a 	mov	r18,r5
    7e50:	dcc00315 	stw	r19,12(sp)
    7e54:	3029883a 	mov	r20,r6
    7e58:	202b883a 	mov	r21,r4
    7e5c:	29400117 	ldw	r5,4(r5)
    7e60:	1c40030e 	bge	r3,r17,7e70 <__lshift+0x54>
    7e64:	18c7883a 	add	r3,r3,r3
    7e68:	29400044 	addi	r5,r5,1
    7e6c:	1c7ffd16 	blt	r3,r17,7e64 <__lshift+0x48>
    7e70:	a809883a 	mov	r4,r21
    7e74:	0007a580 	call	7a58 <_Balloc>
    7e78:	1027883a 	mov	r19,r2
    7e7c:	11400504 	addi	r5,r2,20
    7e80:	0400090e 	bge	zero,r16,7ea8 <__lshift+0x8c>
    7e84:	2805883a 	mov	r2,r5
    7e88:	0007883a 	mov	r3,zero
    7e8c:	18c00044 	addi	r3,r3,1
    7e90:	10000015 	stw	zero,0(r2)
    7e94:	10800104 	addi	r2,r2,4
    7e98:	80fffc1e 	bne	r16,r3,7e8c <__lshift+0x70>
    7e9c:	8405883a 	add	r2,r16,r16
    7ea0:	1085883a 	add	r2,r2,r2
    7ea4:	288b883a 	add	r5,r5,r2
    7ea8:	90800417 	ldw	r2,16(r18)
    7eac:	91000504 	addi	r4,r18,20
    7eb0:	a18007cc 	andi	r6,r20,31
    7eb4:	1085883a 	add	r2,r2,r2
    7eb8:	1085883a 	add	r2,r2,r2
    7ebc:	208f883a 	add	r7,r4,r2
    7ec0:	30001e26 	beq	r6,zero,7f3c <__lshift+0x120>
    7ec4:	00800804 	movi	r2,32
    7ec8:	1191c83a 	sub	r8,r2,r6
    7ecc:	0007883a 	mov	r3,zero
    7ed0:	20800017 	ldw	r2,0(r4)
    7ed4:	1184983a 	sll	r2,r2,r6
    7ed8:	1884b03a 	or	r2,r3,r2
    7edc:	28800015 	stw	r2,0(r5)
    7ee0:	20c00017 	ldw	r3,0(r4)
    7ee4:	21000104 	addi	r4,r4,4
    7ee8:	29400104 	addi	r5,r5,4
    7eec:	1a06d83a 	srl	r3,r3,r8
    7ef0:	21fff736 	bltu	r4,r7,7ed0 <__lshift+0xb4>
    7ef4:	28c00015 	stw	r3,0(r5)
    7ef8:	18000126 	beq	r3,zero,7f00 <__lshift+0xe4>
    7efc:	8c400044 	addi	r17,r17,1
    7f00:	88bfffc4 	addi	r2,r17,-1
    7f04:	98800415 	stw	r2,16(r19)
    7f08:	a809883a 	mov	r4,r21
    7f0c:	900b883a 	mov	r5,r18
    7f10:	00074d80 	call	74d8 <_Bfree>
    7f14:	9805883a 	mov	r2,r19
    7f18:	dfc00617 	ldw	ra,24(sp)
    7f1c:	dd400517 	ldw	r21,20(sp)
    7f20:	dd000417 	ldw	r20,16(sp)
    7f24:	dcc00317 	ldw	r19,12(sp)
    7f28:	dc800217 	ldw	r18,8(sp)
    7f2c:	dc400117 	ldw	r17,4(sp)
    7f30:	dc000017 	ldw	r16,0(sp)
    7f34:	dec00704 	addi	sp,sp,28
    7f38:	f800283a 	ret
    7f3c:	20800017 	ldw	r2,0(r4)
    7f40:	21000104 	addi	r4,r4,4
    7f44:	28800015 	stw	r2,0(r5)
    7f48:	29400104 	addi	r5,r5,4
    7f4c:	21ffec2e 	bgeu	r4,r7,7f00 <__lshift+0xe4>
    7f50:	20800017 	ldw	r2,0(r4)
    7f54:	21000104 	addi	r4,r4,4
    7f58:	28800015 	stw	r2,0(r5)
    7f5c:	29400104 	addi	r5,r5,4
    7f60:	21fff636 	bltu	r4,r7,7f3c <__lshift+0x120>
    7f64:	003fe606 	br	7f00 <__lshift+0xe4>

00007f68 <__multiply>:
    7f68:	defff904 	addi	sp,sp,-28
    7f6c:	dcc00315 	stw	r19,12(sp)
    7f70:	dc800215 	stw	r18,8(sp)
    7f74:	2cc00417 	ldw	r19,16(r5)
    7f78:	34800417 	ldw	r18,16(r6)
    7f7c:	dd000415 	stw	r20,16(sp)
    7f80:	dc400115 	stw	r17,4(sp)
    7f84:	dfc00615 	stw	ra,24(sp)
    7f88:	dd400515 	stw	r21,20(sp)
    7f8c:	dc000015 	stw	r16,0(sp)
    7f90:	2823883a 	mov	r17,r5
    7f94:	3029883a 	mov	r20,r6
    7f98:	9c80040e 	bge	r19,r18,7fac <__multiply+0x44>
    7f9c:	9027883a 	mov	r19,r18
    7fa0:	2c800417 	ldw	r18,16(r5)
    7fa4:	2829883a 	mov	r20,r5
    7fa8:	3023883a 	mov	r17,r6
    7fac:	88800217 	ldw	r2,8(r17)
    7fb0:	9ca1883a 	add	r16,r19,r18
    7fb4:	89400117 	ldw	r5,4(r17)
    7fb8:	1400010e 	bge	r2,r16,7fc0 <__multiply+0x58>
    7fbc:	29400044 	addi	r5,r5,1
    7fc0:	0007a580 	call	7a58 <_Balloc>
    7fc4:	102b883a 	mov	r21,r2
    7fc8:	8405883a 	add	r2,r16,r16
    7fcc:	1085883a 	add	r2,r2,r2
    7fd0:	a9000504 	addi	r4,r21,20
    7fd4:	209d883a 	add	r14,r4,r2
    7fd8:	2380042e 	bgeu	r4,r14,7fec <__multiply+0x84>
    7fdc:	2005883a 	mov	r2,r4
    7fe0:	10000015 	stw	zero,0(r2)
    7fe4:	10800104 	addi	r2,r2,4
    7fe8:	13bffd36 	bltu	r2,r14,7fe0 <__multiply+0x78>
    7fec:	9485883a 	add	r2,r18,r18
    7ff0:	9cc7883a 	add	r3,r19,r19
    7ff4:	a1800504 	addi	r6,r20,20
    7ff8:	1085883a 	add	r2,r2,r2
    7ffc:	8b400504 	addi	r13,r17,20
    8000:	18c7883a 	add	r3,r3,r3
    8004:	309f883a 	add	r15,r6,r2
    8008:	68d7883a 	add	r11,r13,r3
    800c:	33c03b2e 	bgeu	r6,r15,80fc <__multiply+0x194>
    8010:	2019883a 	mov	r12,r4
    8014:	30800017 	ldw	r2,0(r6)
    8018:	127fffcc 	andi	r9,r2,65535
    801c:	48001826 	beq	r9,zero,8080 <__multiply+0x118>
    8020:	6811883a 	mov	r8,r13
    8024:	600f883a 	mov	r7,r12
    8028:	0015883a 	mov	r10,zero
    802c:	40c00017 	ldw	r3,0(r8)
    8030:	39400017 	ldw	r5,0(r7)
    8034:	42000104 	addi	r8,r8,4
    8038:	193fffcc 	andi	r4,r3,65535
    803c:	4909383a 	mul	r4,r9,r4
    8040:	1806d43a 	srli	r3,r3,16
    8044:	28bfffcc 	andi	r2,r5,65535
    8048:	5085883a 	add	r2,r10,r2
    804c:	2089883a 	add	r4,r4,r2
    8050:	48c7383a 	mul	r3,r9,r3
    8054:	280ad43a 	srli	r5,r5,16
    8058:	2004d43a 	srli	r2,r4,16
    805c:	3900000d 	sth	r4,0(r7)
    8060:	1947883a 	add	r3,r3,r5
    8064:	10c5883a 	add	r2,r2,r3
    8068:	3880008d 	sth	r2,2(r7)
    806c:	1014d43a 	srli	r10,r2,16
    8070:	39c00104 	addi	r7,r7,4
    8074:	42ffed36 	bltu	r8,r11,802c <__multiply+0xc4>
    8078:	3a800015 	stw	r10,0(r7)
    807c:	30800017 	ldw	r2,0(r6)
    8080:	1012d43a 	srli	r9,r2,16
    8084:	48001926 	beq	r9,zero,80ec <__multiply+0x184>
    8088:	60800017 	ldw	r2,0(r12)
    808c:	6811883a 	mov	r8,r13
    8090:	600f883a 	mov	r7,r12
    8094:	0015883a 	mov	r10,zero
    8098:	100b883a 	mov	r5,r2
    809c:	41000017 	ldw	r4,0(r8)
    80a0:	2806d43a 	srli	r3,r5,16
    80a4:	3880000d 	sth	r2,0(r7)
    80a8:	20bfffcc 	andi	r2,r4,65535
    80ac:	4885383a 	mul	r2,r9,r2
    80b0:	50c7883a 	add	r3,r10,r3
    80b4:	2008d43a 	srli	r4,r4,16
    80b8:	10c5883a 	add	r2,r2,r3
    80bc:	3880008d 	sth	r2,2(r7)
    80c0:	39c00104 	addi	r7,r7,4
    80c4:	39400017 	ldw	r5,0(r7)
    80c8:	4909383a 	mul	r4,r9,r4
    80cc:	1004d43a 	srli	r2,r2,16
    80d0:	28ffffcc 	andi	r3,r5,65535
    80d4:	20c9883a 	add	r4,r4,r3
    80d8:	1105883a 	add	r2,r2,r4
    80dc:	42000104 	addi	r8,r8,4
    80e0:	1014d43a 	srli	r10,r2,16
    80e4:	42ffed36 	bltu	r8,r11,809c <__multiply+0x134>
    80e8:	38800015 	stw	r2,0(r7)
    80ec:	31800104 	addi	r6,r6,4
    80f0:	33c0022e 	bgeu	r6,r15,80fc <__multiply+0x194>
    80f4:	63000104 	addi	r12,r12,4
    80f8:	003fc606 	br	8014 <__multiply+0xac>
    80fc:	0400090e 	bge	zero,r16,8124 <__multiply+0x1bc>
    8100:	70bfff17 	ldw	r2,-4(r14)
    8104:	70ffff04 	addi	r3,r14,-4
    8108:	10000326 	beq	r2,zero,8118 <__multiply+0x1b0>
    810c:	00000506 	br	8124 <__multiply+0x1bc>
    8110:	18800017 	ldw	r2,0(r3)
    8114:	1000031e 	bne	r2,zero,8124 <__multiply+0x1bc>
    8118:	843fffc4 	addi	r16,r16,-1
    811c:	18ffff04 	addi	r3,r3,-4
    8120:	803ffb1e 	bne	r16,zero,8110 <__multiply+0x1a8>
    8124:	a805883a 	mov	r2,r21
    8128:	ac000415 	stw	r16,16(r21)
    812c:	dfc00617 	ldw	ra,24(sp)
    8130:	dd400517 	ldw	r21,20(sp)
    8134:	dd000417 	ldw	r20,16(sp)
    8138:	dcc00317 	ldw	r19,12(sp)
    813c:	dc800217 	ldw	r18,8(sp)
    8140:	dc400117 	ldw	r17,4(sp)
    8144:	dc000017 	ldw	r16,0(sp)
    8148:	dec00704 	addi	sp,sp,28
    814c:	f800283a 	ret

00008150 <__i2b>:
    8150:	defffd04 	addi	sp,sp,-12
    8154:	dc000015 	stw	r16,0(sp)
    8158:	04000044 	movi	r16,1
    815c:	dc800115 	stw	r18,4(sp)
    8160:	2825883a 	mov	r18,r5
    8164:	800b883a 	mov	r5,r16
    8168:	dfc00215 	stw	ra,8(sp)
    816c:	0007a580 	call	7a58 <_Balloc>
    8170:	14000415 	stw	r16,16(r2)
    8174:	14800515 	stw	r18,20(r2)
    8178:	dfc00217 	ldw	ra,8(sp)
    817c:	dc800117 	ldw	r18,4(sp)
    8180:	dc000017 	ldw	r16,0(sp)
    8184:	dec00304 	addi	sp,sp,12
    8188:	f800283a 	ret

0000818c <__multadd>:
    818c:	defffa04 	addi	sp,sp,-24
    8190:	dc800215 	stw	r18,8(sp)
    8194:	2c800417 	ldw	r18,16(r5)
    8198:	dd000415 	stw	r20,16(sp)
    819c:	dcc00315 	stw	r19,12(sp)
    81a0:	dc000015 	stw	r16,0(sp)
    81a4:	dfc00515 	stw	ra,20(sp)
    81a8:	3821883a 	mov	r16,r7
    81ac:	dc400115 	stw	r17,4(sp)
    81b0:	2827883a 	mov	r19,r5
    81b4:	2029883a 	mov	r20,r4
    81b8:	2a000504 	addi	r8,r5,20
    81bc:	000f883a 	mov	r7,zero
    81c0:	40800017 	ldw	r2,0(r8)
    81c4:	39c00044 	addi	r7,r7,1
    81c8:	10ffffcc 	andi	r3,r2,65535
    81cc:	1987383a 	mul	r3,r3,r6
    81d0:	1004d43a 	srli	r2,r2,16
    81d4:	1c07883a 	add	r3,r3,r16
    81d8:	180ad43a 	srli	r5,r3,16
    81dc:	1185383a 	mul	r2,r2,r6
    81e0:	18ffffcc 	andi	r3,r3,65535
    81e4:	1145883a 	add	r2,r2,r5
    81e8:	1008943a 	slli	r4,r2,16
    81ec:	1020d43a 	srli	r16,r2,16
    81f0:	20c9883a 	add	r4,r4,r3
    81f4:	41000015 	stw	r4,0(r8)
    81f8:	42000104 	addi	r8,r8,4
    81fc:	3cbff016 	blt	r7,r18,81c0 <__multadd+0x34>
    8200:	80000826 	beq	r16,zero,8224 <__multadd+0x98>
    8204:	98800217 	ldw	r2,8(r19)
    8208:	90800f0e 	bge	r18,r2,8248 <__multadd+0xbc>
    820c:	9485883a 	add	r2,r18,r18
    8210:	1085883a 	add	r2,r2,r2
    8214:	14c5883a 	add	r2,r2,r19
    8218:	90c00044 	addi	r3,r18,1
    821c:	14000515 	stw	r16,20(r2)
    8220:	98c00415 	stw	r3,16(r19)
    8224:	9805883a 	mov	r2,r19
    8228:	dfc00517 	ldw	ra,20(sp)
    822c:	dd000417 	ldw	r20,16(sp)
    8230:	dcc00317 	ldw	r19,12(sp)
    8234:	dc800217 	ldw	r18,8(sp)
    8238:	dc400117 	ldw	r17,4(sp)
    823c:	dc000017 	ldw	r16,0(sp)
    8240:	dec00604 	addi	sp,sp,24
    8244:	f800283a 	ret
    8248:	99400117 	ldw	r5,4(r19)
    824c:	a009883a 	mov	r4,r20
    8250:	29400044 	addi	r5,r5,1
    8254:	0007a580 	call	7a58 <_Balloc>
    8258:	99800417 	ldw	r6,16(r19)
    825c:	99400304 	addi	r5,r19,12
    8260:	11000304 	addi	r4,r2,12
    8264:	318d883a 	add	r6,r6,r6
    8268:	318d883a 	add	r6,r6,r6
    826c:	31800204 	addi	r6,r6,8
    8270:	1023883a 	mov	r17,r2
    8274:	00072c00 	call	72c0 <memcpy>
    8278:	980b883a 	mov	r5,r19
    827c:	a009883a 	mov	r4,r20
    8280:	00074d80 	call	74d8 <_Bfree>
    8284:	8827883a 	mov	r19,r17
    8288:	003fe006 	br	820c <__multadd+0x80>

0000828c <__pow5mult>:
    828c:	defffa04 	addi	sp,sp,-24
    8290:	308000cc 	andi	r2,r6,3
    8294:	dd000415 	stw	r20,16(sp)
    8298:	dcc00315 	stw	r19,12(sp)
    829c:	dc000015 	stw	r16,0(sp)
    82a0:	dfc00515 	stw	ra,20(sp)
    82a4:	dc800215 	stw	r18,8(sp)
    82a8:	dc400115 	stw	r17,4(sp)
    82ac:	3021883a 	mov	r16,r6
    82b0:	2027883a 	mov	r19,r4
    82b4:	2829883a 	mov	r20,r5
    82b8:	10002b1e 	bne	r2,zero,8368 <__pow5mult+0xdc>
    82bc:	8025d0ba 	srai	r18,r16,2
    82c0:	90001b26 	beq	r18,zero,8330 <__pow5mult+0xa4>
    82c4:	9c001217 	ldw	r16,72(r19)
    82c8:	8000081e 	bne	r16,zero,82ec <__pow5mult+0x60>
    82cc:	00003006 	br	8390 <__pow5mult+0x104>
    82d0:	800b883a 	mov	r5,r16
    82d4:	800d883a 	mov	r6,r16
    82d8:	9809883a 	mov	r4,r19
    82dc:	90001426 	beq	r18,zero,8330 <__pow5mult+0xa4>
    82e0:	80800017 	ldw	r2,0(r16)
    82e4:	10001b26 	beq	r2,zero,8354 <__pow5mult+0xc8>
    82e8:	1021883a 	mov	r16,r2
    82ec:	9080004c 	andi	r2,r18,1
    82f0:	1005003a 	cmpeq	r2,r2,zero
    82f4:	9025d07a 	srai	r18,r18,1
    82f8:	800d883a 	mov	r6,r16
    82fc:	9809883a 	mov	r4,r19
    8300:	a00b883a 	mov	r5,r20
    8304:	103ff21e 	bne	r2,zero,82d0 <__pow5mult+0x44>
    8308:	0007f680 	call	7f68 <__multiply>
    830c:	a00b883a 	mov	r5,r20
    8310:	9809883a 	mov	r4,r19
    8314:	1023883a 	mov	r17,r2
    8318:	00074d80 	call	74d8 <_Bfree>
    831c:	8829883a 	mov	r20,r17
    8320:	800b883a 	mov	r5,r16
    8324:	800d883a 	mov	r6,r16
    8328:	9809883a 	mov	r4,r19
    832c:	903fec1e 	bne	r18,zero,82e0 <__pow5mult+0x54>
    8330:	a005883a 	mov	r2,r20
    8334:	dfc00517 	ldw	ra,20(sp)
    8338:	dd000417 	ldw	r20,16(sp)
    833c:	dcc00317 	ldw	r19,12(sp)
    8340:	dc800217 	ldw	r18,8(sp)
    8344:	dc400117 	ldw	r17,4(sp)
    8348:	dc000017 	ldw	r16,0(sp)
    834c:	dec00604 	addi	sp,sp,24
    8350:	f800283a 	ret
    8354:	0007f680 	call	7f68 <__multiply>
    8358:	80800015 	stw	r2,0(r16)
    835c:	1021883a 	mov	r16,r2
    8360:	10000015 	stw	zero,0(r2)
    8364:	003fe106 	br	82ec <__pow5mult+0x60>
    8368:	1085883a 	add	r2,r2,r2
    836c:	00c00074 	movhi	r3,1
    8370:	18c74604 	addi	r3,r3,7448
    8374:	1085883a 	add	r2,r2,r2
    8378:	10c5883a 	add	r2,r2,r3
    837c:	11bfff17 	ldw	r6,-4(r2)
    8380:	000f883a 	mov	r7,zero
    8384:	000818c0 	call	818c <__multadd>
    8388:	1029883a 	mov	r20,r2
    838c:	003fcb06 	br	82bc <__pow5mult+0x30>
    8390:	9809883a 	mov	r4,r19
    8394:	01409c44 	movi	r5,625
    8398:	00081500 	call	8150 <__i2b>
    839c:	98801215 	stw	r2,72(r19)
    83a0:	1021883a 	mov	r16,r2
    83a4:	10000015 	stw	zero,0(r2)
    83a8:	003fd006 	br	82ec <__pow5mult+0x60>

000083ac <__s2b>:
    83ac:	defff904 	addi	sp,sp,-28
    83b0:	dcc00315 	stw	r19,12(sp)
    83b4:	dc800215 	stw	r18,8(sp)
    83b8:	2827883a 	mov	r19,r5
    83bc:	2025883a 	mov	r18,r4
    83c0:	01400244 	movi	r5,9
    83c4:	39000204 	addi	r4,r7,8
    83c8:	dd000415 	stw	r20,16(sp)
    83cc:	dc400115 	stw	r17,4(sp)
    83d0:	dfc00615 	stw	ra,24(sp)
    83d4:	dd400515 	stw	r21,20(sp)
    83d8:	dc000015 	stw	r16,0(sp)
    83dc:	3829883a 	mov	r20,r7
    83e0:	3023883a 	mov	r17,r6
    83e4:	000e64c0 	call	e64c <__divsi3>
    83e8:	00c00044 	movi	r3,1
    83ec:	1880350e 	bge	r3,r2,84c4 <__s2b+0x118>
    83f0:	000b883a 	mov	r5,zero
    83f4:	18c7883a 	add	r3,r3,r3
    83f8:	29400044 	addi	r5,r5,1
    83fc:	18bffd16 	blt	r3,r2,83f4 <__s2b+0x48>
    8400:	9009883a 	mov	r4,r18
    8404:	0007a580 	call	7a58 <_Balloc>
    8408:	1011883a 	mov	r8,r2
    840c:	d8800717 	ldw	r2,28(sp)
    8410:	00c00044 	movi	r3,1
    8414:	01800244 	movi	r6,9
    8418:	40800515 	stw	r2,20(r8)
    841c:	40c00415 	stw	r3,16(r8)
    8420:	3440260e 	bge	r6,r17,84bc <__s2b+0x110>
    8424:	3021883a 	mov	r16,r6
    8428:	99ab883a 	add	r21,r19,r6
    842c:	9c05883a 	add	r2,r19,r16
    8430:	11c00007 	ldb	r7,0(r2)
    8434:	400b883a 	mov	r5,r8
    8438:	9009883a 	mov	r4,r18
    843c:	39fff404 	addi	r7,r7,-48
    8440:	01800284 	movi	r6,10
    8444:	000818c0 	call	818c <__multadd>
    8448:	84000044 	addi	r16,r16,1
    844c:	1011883a 	mov	r8,r2
    8450:	8c3ff61e 	bne	r17,r16,842c <__s2b+0x80>
    8454:	ac45883a 	add	r2,r21,r17
    8458:	117ffe04 	addi	r5,r2,-8
    845c:	880d883a 	mov	r6,r17
    8460:	35000c0e 	bge	r6,r20,8494 <__s2b+0xe8>
    8464:	a185c83a 	sub	r2,r20,r6
    8468:	2821883a 	mov	r16,r5
    846c:	28a3883a 	add	r17,r5,r2
    8470:	81c00007 	ldb	r7,0(r16)
    8474:	400b883a 	mov	r5,r8
    8478:	9009883a 	mov	r4,r18
    847c:	39fff404 	addi	r7,r7,-48
    8480:	01800284 	movi	r6,10
    8484:	000818c0 	call	818c <__multadd>
    8488:	84000044 	addi	r16,r16,1
    848c:	1011883a 	mov	r8,r2
    8490:	847ff71e 	bne	r16,r17,8470 <__s2b+0xc4>
    8494:	4005883a 	mov	r2,r8
    8498:	dfc00617 	ldw	ra,24(sp)
    849c:	dd400517 	ldw	r21,20(sp)
    84a0:	dd000417 	ldw	r20,16(sp)
    84a4:	dcc00317 	ldw	r19,12(sp)
    84a8:	dc800217 	ldw	r18,8(sp)
    84ac:	dc400117 	ldw	r17,4(sp)
    84b0:	dc000017 	ldw	r16,0(sp)
    84b4:	dec00704 	addi	sp,sp,28
    84b8:	f800283a 	ret
    84bc:	99400284 	addi	r5,r19,10
    84c0:	003fe706 	br	8460 <__s2b+0xb4>
    84c4:	000b883a 	mov	r5,zero
    84c8:	003fcd06 	br	8400 <__s2b+0x54>

000084cc <_realloc_r>:
    84cc:	defff404 	addi	sp,sp,-48
    84d0:	dd800815 	stw	r22,32(sp)
    84d4:	dc800415 	stw	r18,16(sp)
    84d8:	dc400315 	stw	r17,12(sp)
    84dc:	dfc00b15 	stw	ra,44(sp)
    84e0:	df000a15 	stw	fp,40(sp)
    84e4:	ddc00915 	stw	r23,36(sp)
    84e8:	dd400715 	stw	r21,28(sp)
    84ec:	dd000615 	stw	r20,24(sp)
    84f0:	dcc00515 	stw	r19,20(sp)
    84f4:	dc000215 	stw	r16,8(sp)
    84f8:	2825883a 	mov	r18,r5
    84fc:	3023883a 	mov	r17,r6
    8500:	202d883a 	mov	r22,r4
    8504:	2800c926 	beq	r5,zero,882c <_realloc_r+0x360>
    8508:	000f2780 	call	f278 <__malloc_lock>
    850c:	943ffe04 	addi	r16,r18,-8
    8510:	88c002c4 	addi	r3,r17,11
    8514:	00800584 	movi	r2,22
    8518:	82000117 	ldw	r8,4(r16)
    851c:	10c01b2e 	bgeu	r2,r3,858c <_realloc_r+0xc0>
    8520:	00bffe04 	movi	r2,-8
    8524:	188e703a 	and	r7,r3,r2
    8528:	3839883a 	mov	fp,r7
    852c:	38001a16 	blt	r7,zero,8598 <_realloc_r+0xcc>
    8530:	e4401936 	bltu	fp,r17,8598 <_realloc_r+0xcc>
    8534:	013fff04 	movi	r4,-4
    8538:	4126703a 	and	r19,r8,r4
    853c:	99c02616 	blt	r19,r7,85d8 <_realloc_r+0x10c>
    8540:	802b883a 	mov	r21,r16
    8544:	9829883a 	mov	r20,r19
    8548:	84000204 	addi	r16,r16,8
    854c:	a80f883a 	mov	r7,r21
    8550:	a70dc83a 	sub	r6,r20,fp
    8554:	008003c4 	movi	r2,15
    8558:	1180c136 	bltu	r2,r6,8860 <_realloc_r+0x394>
    855c:	38800117 	ldw	r2,4(r7)
    8560:	a549883a 	add	r4,r20,r21
    8564:	1080004c 	andi	r2,r2,1
    8568:	a084b03a 	or	r2,r20,r2
    856c:	38800115 	stw	r2,4(r7)
    8570:	20c00117 	ldw	r3,4(r4)
    8574:	18c00054 	ori	r3,r3,1
    8578:	20c00115 	stw	r3,4(r4)
    857c:	b009883a 	mov	r4,r22
    8580:	000f27c0 	call	f27c <__malloc_unlock>
    8584:	8023883a 	mov	r17,r16
    8588:	00000606 	br	85a4 <_realloc_r+0xd8>
    858c:	01c00404 	movi	r7,16
    8590:	3839883a 	mov	fp,r7
    8594:	e47fe72e 	bgeu	fp,r17,8534 <_realloc_r+0x68>
    8598:	00800304 	movi	r2,12
    859c:	0023883a 	mov	r17,zero
    85a0:	b0800015 	stw	r2,0(r22)
    85a4:	8805883a 	mov	r2,r17
    85a8:	dfc00b17 	ldw	ra,44(sp)
    85ac:	df000a17 	ldw	fp,40(sp)
    85b0:	ddc00917 	ldw	r23,36(sp)
    85b4:	dd800817 	ldw	r22,32(sp)
    85b8:	dd400717 	ldw	r21,28(sp)
    85bc:	dd000617 	ldw	r20,24(sp)
    85c0:	dcc00517 	ldw	r19,20(sp)
    85c4:	dc800417 	ldw	r18,16(sp)
    85c8:	dc400317 	ldw	r17,12(sp)
    85cc:	dc000217 	ldw	r16,8(sp)
    85d0:	dec00c04 	addi	sp,sp,48
    85d4:	f800283a 	ret
    85d8:	00800074 	movhi	r2,1
    85dc:	1088bd04 	addi	r2,r2,8948
    85e0:	12400217 	ldw	r9,8(r2)
    85e4:	84cd883a 	add	r6,r16,r19
    85e8:	802b883a 	mov	r21,r16
    85ec:	3240b926 	beq	r6,r9,88d4 <_realloc_r+0x408>
    85f0:	31400117 	ldw	r5,4(r6)
    85f4:	00bfff84 	movi	r2,-2
    85f8:	2884703a 	and	r2,r5,r2
    85fc:	1185883a 	add	r2,r2,r6
    8600:	10c00117 	ldw	r3,4(r2)
    8604:	18c0004c 	andi	r3,r3,1
    8608:	1807003a 	cmpeq	r3,r3,zero
    860c:	1800a326 	beq	r3,zero,889c <_realloc_r+0x3d0>
    8610:	2908703a 	and	r4,r5,r4
    8614:	9929883a 	add	r20,r19,r4
    8618:	a1c0a30e 	bge	r20,r7,88a8 <_realloc_r+0x3dc>
    861c:	4080004c 	andi	r2,r8,1
    8620:	1000551e 	bne	r2,zero,8778 <_realloc_r+0x2ac>
    8624:	80800017 	ldw	r2,0(r16)
    8628:	80afc83a 	sub	r23,r16,r2
    862c:	b8c00117 	ldw	r3,4(r23)
    8630:	00bfff04 	movi	r2,-4
    8634:	1884703a 	and	r2,r3,r2
    8638:	30002e26 	beq	r6,zero,86f4 <_realloc_r+0x228>
    863c:	3240b926 	beq	r6,r9,8924 <_realloc_r+0x458>
    8640:	98a9883a 	add	r20,r19,r2
    8644:	2509883a 	add	r4,r4,r20
    8648:	d9000015 	stw	r4,0(sp)
    864c:	21c02a16 	blt	r4,r7,86f8 <_realloc_r+0x22c>
    8650:	30800317 	ldw	r2,12(r6)
    8654:	30c00217 	ldw	r3,8(r6)
    8658:	01400904 	movi	r5,36
    865c:	99bfff04 	addi	r6,r19,-4
    8660:	18800315 	stw	r2,12(r3)
    8664:	10c00215 	stw	r3,8(r2)
    8668:	b9000317 	ldw	r4,12(r23)
    866c:	b8800217 	ldw	r2,8(r23)
    8670:	b82b883a 	mov	r21,r23
    8674:	bc000204 	addi	r16,r23,8
    8678:	20800215 	stw	r2,8(r4)
    867c:	11000315 	stw	r4,12(r2)
    8680:	2980e436 	bltu	r5,r6,8a14 <_realloc_r+0x548>
    8684:	008004c4 	movi	r2,19
    8688:	9009883a 	mov	r4,r18
    868c:	8011883a 	mov	r8,r16
    8690:	11800f2e 	bgeu	r2,r6,86d0 <_realloc_r+0x204>
    8694:	90800017 	ldw	r2,0(r18)
    8698:	ba000404 	addi	r8,r23,16
    869c:	91000204 	addi	r4,r18,8
    86a0:	b8800215 	stw	r2,8(r23)
    86a4:	90c00117 	ldw	r3,4(r18)
    86a8:	008006c4 	movi	r2,27
    86ac:	b8c00315 	stw	r3,12(r23)
    86b0:	1180072e 	bgeu	r2,r6,86d0 <_realloc_r+0x204>
    86b4:	90c00217 	ldw	r3,8(r18)
    86b8:	ba000604 	addi	r8,r23,24
    86bc:	91000404 	addi	r4,r18,16
    86c0:	b8c00415 	stw	r3,16(r23)
    86c4:	90800317 	ldw	r2,12(r18)
    86c8:	b8800515 	stw	r2,20(r23)
    86cc:	3140e726 	beq	r6,r5,8a6c <_realloc_r+0x5a0>
    86d0:	20800017 	ldw	r2,0(r4)
    86d4:	dd000017 	ldw	r20,0(sp)
    86d8:	b80f883a 	mov	r7,r23
    86dc:	40800015 	stw	r2,0(r8)
    86e0:	20c00117 	ldw	r3,4(r4)
    86e4:	40c00115 	stw	r3,4(r8)
    86e8:	20800217 	ldw	r2,8(r4)
    86ec:	40800215 	stw	r2,8(r8)
    86f0:	003f9706 	br	8550 <_realloc_r+0x84>
    86f4:	98a9883a 	add	r20,r19,r2
    86f8:	a1c01f16 	blt	r20,r7,8778 <_realloc_r+0x2ac>
    86fc:	b8c00317 	ldw	r3,12(r23)
    8700:	b8800217 	ldw	r2,8(r23)
    8704:	99bfff04 	addi	r6,r19,-4
    8708:	01400904 	movi	r5,36
    870c:	b82b883a 	mov	r21,r23
    8710:	18800215 	stw	r2,8(r3)
    8714:	10c00315 	stw	r3,12(r2)
    8718:	bc000204 	addi	r16,r23,8
    871c:	2980c336 	bltu	r5,r6,8a2c <_realloc_r+0x560>
    8720:	008004c4 	movi	r2,19
    8724:	9009883a 	mov	r4,r18
    8728:	8011883a 	mov	r8,r16
    872c:	11800f2e 	bgeu	r2,r6,876c <_realloc_r+0x2a0>
    8730:	90800017 	ldw	r2,0(r18)
    8734:	ba000404 	addi	r8,r23,16
    8738:	91000204 	addi	r4,r18,8
    873c:	b8800215 	stw	r2,8(r23)
    8740:	90c00117 	ldw	r3,4(r18)
    8744:	008006c4 	movi	r2,27
    8748:	b8c00315 	stw	r3,12(r23)
    874c:	1180072e 	bgeu	r2,r6,876c <_realloc_r+0x2a0>
    8750:	90c00217 	ldw	r3,8(r18)
    8754:	ba000604 	addi	r8,r23,24
    8758:	91000404 	addi	r4,r18,16
    875c:	b8c00415 	stw	r3,16(r23)
    8760:	90800317 	ldw	r2,12(r18)
    8764:	b8800515 	stw	r2,20(r23)
    8768:	3140c726 	beq	r6,r5,8a88 <_realloc_r+0x5bc>
    876c:	20800017 	ldw	r2,0(r4)
    8770:	b80f883a 	mov	r7,r23
    8774:	003fd906 	br	86dc <_realloc_r+0x210>
    8778:	880b883a 	mov	r5,r17
    877c:	b009883a 	mov	r4,r22
    8780:	000699c0 	call	699c <_malloc_r>
    8784:	1023883a 	mov	r17,r2
    8788:	10002526 	beq	r2,zero,8820 <_realloc_r+0x354>
    878c:	80800117 	ldw	r2,4(r16)
    8790:	00ffff84 	movi	r3,-2
    8794:	893ffe04 	addi	r4,r17,-8
    8798:	10c4703a 	and	r2,r2,r3
    879c:	8085883a 	add	r2,r16,r2
    87a0:	20809526 	beq	r4,r2,89f8 <_realloc_r+0x52c>
    87a4:	99bfff04 	addi	r6,r19,-4
    87a8:	01c00904 	movi	r7,36
    87ac:	39804536 	bltu	r7,r6,88c4 <_realloc_r+0x3f8>
    87b0:	008004c4 	movi	r2,19
    87b4:	9009883a 	mov	r4,r18
    87b8:	880b883a 	mov	r5,r17
    87bc:	11800f2e 	bgeu	r2,r6,87fc <_realloc_r+0x330>
    87c0:	90800017 	ldw	r2,0(r18)
    87c4:	89400204 	addi	r5,r17,8
    87c8:	91000204 	addi	r4,r18,8
    87cc:	88800015 	stw	r2,0(r17)
    87d0:	90c00117 	ldw	r3,4(r18)
    87d4:	008006c4 	movi	r2,27
    87d8:	88c00115 	stw	r3,4(r17)
    87dc:	1180072e 	bgeu	r2,r6,87fc <_realloc_r+0x330>
    87e0:	90c00217 	ldw	r3,8(r18)
    87e4:	89400404 	addi	r5,r17,16
    87e8:	91000404 	addi	r4,r18,16
    87ec:	88c00215 	stw	r3,8(r17)
    87f0:	90800317 	ldw	r2,12(r18)
    87f4:	88800315 	stw	r2,12(r17)
    87f8:	31c09126 	beq	r6,r7,8a40 <_realloc_r+0x574>
    87fc:	20800017 	ldw	r2,0(r4)
    8800:	28800015 	stw	r2,0(r5)
    8804:	20c00117 	ldw	r3,4(r4)
    8808:	28c00115 	stw	r3,4(r5)
    880c:	20800217 	ldw	r2,8(r4)
    8810:	28800215 	stw	r2,8(r5)
    8814:	900b883a 	mov	r5,r18
    8818:	b009883a 	mov	r4,r22
    881c:	0005de80 	call	5de8 <_free_r>
    8820:	b009883a 	mov	r4,r22
    8824:	000f27c0 	call	f27c <__malloc_unlock>
    8828:	003f5e06 	br	85a4 <_realloc_r+0xd8>
    882c:	300b883a 	mov	r5,r6
    8830:	dfc00b17 	ldw	ra,44(sp)
    8834:	df000a17 	ldw	fp,40(sp)
    8838:	ddc00917 	ldw	r23,36(sp)
    883c:	dd800817 	ldw	r22,32(sp)
    8840:	dd400717 	ldw	r21,28(sp)
    8844:	dd000617 	ldw	r20,24(sp)
    8848:	dcc00517 	ldw	r19,20(sp)
    884c:	dc800417 	ldw	r18,16(sp)
    8850:	dc400317 	ldw	r17,12(sp)
    8854:	dc000217 	ldw	r16,8(sp)
    8858:	dec00c04 	addi	sp,sp,48
    885c:	000699c1 	jmpi	699c <_malloc_r>
    8860:	38800117 	ldw	r2,4(r7)
    8864:	e54b883a 	add	r5,fp,r21
    8868:	31000054 	ori	r4,r6,1
    886c:	1080004c 	andi	r2,r2,1
    8870:	1704b03a 	or	r2,r2,fp
    8874:	38800115 	stw	r2,4(r7)
    8878:	29000115 	stw	r4,4(r5)
    887c:	2987883a 	add	r3,r5,r6
    8880:	18800117 	ldw	r2,4(r3)
    8884:	29400204 	addi	r5,r5,8
    8888:	b009883a 	mov	r4,r22
    888c:	10800054 	ori	r2,r2,1
    8890:	18800115 	stw	r2,4(r3)
    8894:	0005de80 	call	5de8 <_free_r>
    8898:	003f3806 	br	857c <_realloc_r+0xb0>
    889c:	000d883a 	mov	r6,zero
    88a0:	0009883a 	mov	r4,zero
    88a4:	003f5d06 	br	861c <_realloc_r+0x150>
    88a8:	30c00217 	ldw	r3,8(r6)
    88ac:	30800317 	ldw	r2,12(r6)
    88b0:	800f883a 	mov	r7,r16
    88b4:	84000204 	addi	r16,r16,8
    88b8:	10c00215 	stw	r3,8(r2)
    88bc:	18800315 	stw	r2,12(r3)
    88c0:	003f2306 	br	8550 <_realloc_r+0x84>
    88c4:	8809883a 	mov	r4,r17
    88c8:	900b883a 	mov	r5,r18
    88cc:	00073600 	call	7360 <memmove>
    88d0:	003fd006 	br	8814 <_realloc_r+0x348>
    88d4:	30800117 	ldw	r2,4(r6)
    88d8:	e0c00404 	addi	r3,fp,16
    88dc:	1108703a 	and	r4,r2,r4
    88e0:	9905883a 	add	r2,r19,r4
    88e4:	10ff4d16 	blt	r2,r3,861c <_realloc_r+0x150>
    88e8:	1705c83a 	sub	r2,r2,fp
    88ec:	870b883a 	add	r5,r16,fp
    88f0:	10800054 	ori	r2,r2,1
    88f4:	28800115 	stw	r2,4(r5)
    88f8:	80c00117 	ldw	r3,4(r16)
    88fc:	00800074 	movhi	r2,1
    8900:	1088bd04 	addi	r2,r2,8948
    8904:	b009883a 	mov	r4,r22
    8908:	18c0004c 	andi	r3,r3,1
    890c:	e0c6b03a 	or	r3,fp,r3
    8910:	11400215 	stw	r5,8(r2)
    8914:	80c00115 	stw	r3,4(r16)
    8918:	000f27c0 	call	f27c <__malloc_unlock>
    891c:	84400204 	addi	r17,r16,8
    8920:	003f2006 	br	85a4 <_realloc_r+0xd8>
    8924:	98a9883a 	add	r20,r19,r2
    8928:	2509883a 	add	r4,r4,r20
    892c:	e0800404 	addi	r2,fp,16
    8930:	d9000115 	stw	r4,4(sp)
    8934:	20bf7016 	blt	r4,r2,86f8 <_realloc_r+0x22c>
    8938:	b8c00317 	ldw	r3,12(r23)
    893c:	b8800217 	ldw	r2,8(r23)
    8940:	99bfff04 	addi	r6,r19,-4
    8944:	01400904 	movi	r5,36
    8948:	18800215 	stw	r2,8(r3)
    894c:	10c00315 	stw	r3,12(r2)
    8950:	bc400204 	addi	r17,r23,8
    8954:	29804136 	bltu	r5,r6,8a5c <_realloc_r+0x590>
    8958:	008004c4 	movi	r2,19
    895c:	9009883a 	mov	r4,r18
    8960:	880f883a 	mov	r7,r17
    8964:	11800f2e 	bgeu	r2,r6,89a4 <_realloc_r+0x4d8>
    8968:	90800017 	ldw	r2,0(r18)
    896c:	b9c00404 	addi	r7,r23,16
    8970:	91000204 	addi	r4,r18,8
    8974:	b8800215 	stw	r2,8(r23)
    8978:	90c00117 	ldw	r3,4(r18)
    897c:	008006c4 	movi	r2,27
    8980:	b8c00315 	stw	r3,12(r23)
    8984:	1180072e 	bgeu	r2,r6,89a4 <_realloc_r+0x4d8>
    8988:	90c00217 	ldw	r3,8(r18)
    898c:	b9c00604 	addi	r7,r23,24
    8990:	91000404 	addi	r4,r18,16
    8994:	b8c00415 	stw	r3,16(r23)
    8998:	90800317 	ldw	r2,12(r18)
    899c:	b8800515 	stw	r2,20(r23)
    89a0:	31404026 	beq	r6,r5,8aa4 <_realloc_r+0x5d8>
    89a4:	20800017 	ldw	r2,0(r4)
    89a8:	38800015 	stw	r2,0(r7)
    89ac:	20c00117 	ldw	r3,4(r4)
    89b0:	38c00115 	stw	r3,4(r7)
    89b4:	20800217 	ldw	r2,8(r4)
    89b8:	38800215 	stw	r2,8(r7)
    89bc:	d8c00117 	ldw	r3,4(sp)
    89c0:	bf0b883a 	add	r5,r23,fp
    89c4:	b009883a 	mov	r4,r22
    89c8:	1f05c83a 	sub	r2,r3,fp
    89cc:	10800054 	ori	r2,r2,1
    89d0:	28800115 	stw	r2,4(r5)
    89d4:	b8c00117 	ldw	r3,4(r23)
    89d8:	00800074 	movhi	r2,1
    89dc:	1088bd04 	addi	r2,r2,8948
    89e0:	11400215 	stw	r5,8(r2)
    89e4:	18c0004c 	andi	r3,r3,1
    89e8:	e0c6b03a 	or	r3,fp,r3
    89ec:	b8c00115 	stw	r3,4(r23)
    89f0:	000f27c0 	call	f27c <__malloc_unlock>
    89f4:	003eeb06 	br	85a4 <_realloc_r+0xd8>
    89f8:	20800117 	ldw	r2,4(r4)
    89fc:	00ffff04 	movi	r3,-4
    8a00:	800f883a 	mov	r7,r16
    8a04:	10c4703a 	and	r2,r2,r3
    8a08:	98a9883a 	add	r20,r19,r2
    8a0c:	84000204 	addi	r16,r16,8
    8a10:	003ecf06 	br	8550 <_realloc_r+0x84>
    8a14:	900b883a 	mov	r5,r18
    8a18:	8009883a 	mov	r4,r16
    8a1c:	00073600 	call	7360 <memmove>
    8a20:	dd000017 	ldw	r20,0(sp)
    8a24:	b80f883a 	mov	r7,r23
    8a28:	003ec906 	br	8550 <_realloc_r+0x84>
    8a2c:	900b883a 	mov	r5,r18
    8a30:	8009883a 	mov	r4,r16
    8a34:	00073600 	call	7360 <memmove>
    8a38:	b80f883a 	mov	r7,r23
    8a3c:	003ec406 	br	8550 <_realloc_r+0x84>
    8a40:	90c00417 	ldw	r3,16(r18)
    8a44:	89400604 	addi	r5,r17,24
    8a48:	91000604 	addi	r4,r18,24
    8a4c:	88c00415 	stw	r3,16(r17)
    8a50:	90800517 	ldw	r2,20(r18)
    8a54:	88800515 	stw	r2,20(r17)
    8a58:	003f6806 	br	87fc <_realloc_r+0x330>
    8a5c:	900b883a 	mov	r5,r18
    8a60:	8809883a 	mov	r4,r17
    8a64:	00073600 	call	7360 <memmove>
    8a68:	003fd406 	br	89bc <_realloc_r+0x4f0>
    8a6c:	90c00417 	ldw	r3,16(r18)
    8a70:	91000604 	addi	r4,r18,24
    8a74:	ba000804 	addi	r8,r23,32
    8a78:	b8c00615 	stw	r3,24(r23)
    8a7c:	90800517 	ldw	r2,20(r18)
    8a80:	b8800715 	stw	r2,28(r23)
    8a84:	003f1206 	br	86d0 <_realloc_r+0x204>
    8a88:	90c00417 	ldw	r3,16(r18)
    8a8c:	91000604 	addi	r4,r18,24
    8a90:	ba000804 	addi	r8,r23,32
    8a94:	b8c00615 	stw	r3,24(r23)
    8a98:	90800517 	ldw	r2,20(r18)
    8a9c:	b8800715 	stw	r2,28(r23)
    8aa0:	003f3206 	br	876c <_realloc_r+0x2a0>
    8aa4:	90c00417 	ldw	r3,16(r18)
    8aa8:	91000604 	addi	r4,r18,24
    8aac:	b9c00804 	addi	r7,r23,32
    8ab0:	b8c00615 	stw	r3,24(r23)
    8ab4:	90800517 	ldw	r2,20(r18)
    8ab8:	b8800715 	stw	r2,28(r23)
    8abc:	003fb906 	br	89a4 <_realloc_r+0x4d8>

00008ac0 <__srefill_r>:
    8ac0:	defffd04 	addi	sp,sp,-12
    8ac4:	dc400115 	stw	r17,4(sp)
    8ac8:	dc000015 	stw	r16,0(sp)
    8acc:	dfc00215 	stw	ra,8(sp)
    8ad0:	2023883a 	mov	r17,r4
    8ad4:	2821883a 	mov	r16,r5
    8ad8:	20000226 	beq	r4,zero,8ae4 <__srefill_r+0x24>
    8adc:	20800e17 	ldw	r2,56(r4)
    8ae0:	10004126 	beq	r2,zero,8be8 <__srefill_r+0x128>
    8ae4:	80c0030b 	ldhu	r3,12(r16)
    8ae8:	80000115 	stw	zero,4(r16)
    8aec:	1880080c 	andi	r2,r3,32
    8af0:	1000361e 	bne	r2,zero,8bcc <__srefill_r+0x10c>
    8af4:	1880010c 	andi	r2,r3,4
    8af8:	1000211e 	bne	r2,zero,8b80 <__srefill_r+0xc0>
    8afc:	1880040c 	andi	r2,r3,16
    8b00:	10005026 	beq	r2,zero,8c44 <__srefill_r+0x184>
    8b04:	1880020c 	andi	r2,r3,8
    8b08:	1000541e 	bne	r2,zero,8c5c <__srefill_r+0x19c>
    8b0c:	8080030b 	ldhu	r2,12(r16)
    8b10:	10800114 	ori	r2,r2,4
    8b14:	8080030d 	sth	r2,12(r16)
    8b18:	80800417 	ldw	r2,16(r16)
    8b1c:	10004526 	beq	r2,zero,8c34 <__srefill_r+0x174>
    8b20:	8080030b 	ldhu	r2,12(r16)
    8b24:	108000cc 	andi	r2,r2,3
    8b28:	1000361e 	bne	r2,zero,8c04 <__srefill_r+0x144>
    8b2c:	81800417 	ldw	r6,16(r16)
    8b30:	80c00817 	ldw	r3,32(r16)
    8b34:	81400717 	ldw	r5,28(r16)
    8b38:	81c00517 	ldw	r7,20(r16)
    8b3c:	8809883a 	mov	r4,r17
    8b40:	81800015 	stw	r6,0(r16)
    8b44:	183ee83a 	callr	r3
    8b48:	80c0030b 	ldhu	r3,12(r16)
    8b4c:	1009883a 	mov	r4,r2
    8b50:	80800115 	stw	r2,4(r16)
    8b54:	00b7ffc4 	movi	r2,-8193
    8b58:	1884703a 	and	r2,r3,r2
    8b5c:	8080030d 	sth	r2,12(r16)
    8b60:	0100230e 	bge	zero,r4,8bf0 <__srefill_r+0x130>
    8b64:	0009883a 	mov	r4,zero
    8b68:	2005883a 	mov	r2,r4
    8b6c:	dfc00217 	ldw	ra,8(sp)
    8b70:	dc400117 	ldw	r17,4(sp)
    8b74:	dc000017 	ldw	r16,0(sp)
    8b78:	dec00304 	addi	sp,sp,12
    8b7c:	f800283a 	ret
    8b80:	81400c17 	ldw	r5,48(r16)
    8b84:	283fe426 	beq	r5,zero,8b18 <__srefill_r+0x58>
    8b88:	80801004 	addi	r2,r16,64
    8b8c:	28800226 	beq	r5,r2,8b98 <__srefill_r+0xd8>
    8b90:	8809883a 	mov	r4,r17
    8b94:	0005de80 	call	5de8 <_free_r>
    8b98:	80800f17 	ldw	r2,60(r16)
    8b9c:	80000c15 	stw	zero,48(r16)
    8ba0:	80800115 	stw	r2,4(r16)
    8ba4:	103fdc26 	beq	r2,zero,8b18 <__srefill_r+0x58>
    8ba8:	80800e17 	ldw	r2,56(r16)
    8bac:	0009883a 	mov	r4,zero
    8bb0:	80800015 	stw	r2,0(r16)
    8bb4:	2005883a 	mov	r2,r4
    8bb8:	dfc00217 	ldw	ra,8(sp)
    8bbc:	dc400117 	ldw	r17,4(sp)
    8bc0:	dc000017 	ldw	r16,0(sp)
    8bc4:	dec00304 	addi	sp,sp,12
    8bc8:	f800283a 	ret
    8bcc:	013fffc4 	movi	r4,-1
    8bd0:	2005883a 	mov	r2,r4
    8bd4:	dfc00217 	ldw	ra,8(sp)
    8bd8:	dc400117 	ldw	r17,4(sp)
    8bdc:	dc000017 	ldw	r16,0(sp)
    8be0:	dec00304 	addi	sp,sp,12
    8be4:	f800283a 	ret
    8be8:	00058280 	call	5828 <__sinit>
    8bec:	003fbd06 	br	8ae4 <__srefill_r+0x24>
    8bf0:	20000b1e 	bne	r4,zero,8c20 <__srefill_r+0x160>
    8bf4:	10800814 	ori	r2,r2,32
    8bf8:	013fffc4 	movi	r4,-1
    8bfc:	8080030d 	sth	r2,12(r16)
    8c00:	003fd906 	br	8b68 <__srefill_r+0xa8>
    8c04:	00800074 	movhi	r2,1
    8c08:	108e8004 	addi	r2,r2,14848
    8c0c:	11000017 	ldw	r4,0(r2)
    8c10:	01400074 	movhi	r5,1
    8c14:	29632104 	addi	r5,r5,-29564
    8c18:	00066600 	call	6660 <_fwalk>
    8c1c:	003fc306 	br	8b2c <__srefill_r+0x6c>
    8c20:	10801014 	ori	r2,r2,64
    8c24:	013fffc4 	movi	r4,-1
    8c28:	8080030d 	sth	r2,12(r16)
    8c2c:	80000115 	stw	zero,4(r16)
    8c30:	003fcd06 	br	8b68 <__srefill_r+0xa8>
    8c34:	8809883a 	mov	r4,r17
    8c38:	800b883a 	mov	r5,r16
    8c3c:	00068080 	call	6808 <__smakebuf_r>
    8c40:	003fb706 	br	8b20 <__srefill_r+0x60>
    8c44:	18c01014 	ori	r3,r3,64
    8c48:	00800244 	movi	r2,9
    8c4c:	013fffc4 	movi	r4,-1
    8c50:	88800015 	stw	r2,0(r17)
    8c54:	80c0030d 	sth	r3,12(r16)
    8c58:	003fc306 	br	8b68 <__srefill_r+0xa8>
    8c5c:	8809883a 	mov	r4,r17
    8c60:	800b883a 	mov	r5,r16
    8c64:	00055900 	call	5590 <_fflush_r>
    8c68:	103fd81e 	bne	r2,zero,8bcc <__srefill_r+0x10c>
    8c6c:	8080030b 	ldhu	r2,12(r16)
    8c70:	80000215 	stw	zero,8(r16)
    8c74:	80000615 	stw	zero,24(r16)
    8c78:	10bffdcc 	andi	r2,r2,65527
    8c7c:	8080030d 	sth	r2,12(r16)
    8c80:	003fa206 	br	8b0c <__srefill_r+0x4c>

00008c84 <lflush>:
    8c84:	20c0030b 	ldhu	r3,12(r4)
    8c88:	01400244 	movi	r5,9
    8c8c:	0005883a 	mov	r2,zero
    8c90:	18c0024c 	andi	r3,r3,9
    8c94:	19400126 	beq	r3,r5,8c9c <lflush+0x18>
    8c98:	f800283a 	ret
    8c9c:	000578c1 	jmpi	578c <fflush>

00008ca0 <__isinfd>:
    8ca0:	200d883a 	mov	r6,r4
    8ca4:	0109c83a 	sub	r4,zero,r4
    8ca8:	2188b03a 	or	r4,r4,r6
    8cac:	2008d7fa 	srli	r4,r4,31
    8cb0:	00a00034 	movhi	r2,32768
    8cb4:	10bfffc4 	addi	r2,r2,-1
    8cb8:	1144703a 	and	r2,r2,r5
    8cbc:	2088b03a 	or	r4,r4,r2
    8cc0:	009ffc34 	movhi	r2,32752
    8cc4:	1105c83a 	sub	r2,r2,r4
    8cc8:	0087c83a 	sub	r3,zero,r2
    8ccc:	10c4b03a 	or	r2,r2,r3
    8cd0:	1004d7fa 	srli	r2,r2,31
    8cd4:	00c00044 	movi	r3,1
    8cd8:	1885c83a 	sub	r2,r3,r2
    8cdc:	f800283a 	ret

00008ce0 <__isnand>:
    8ce0:	200d883a 	mov	r6,r4
    8ce4:	0109c83a 	sub	r4,zero,r4
    8ce8:	2188b03a 	or	r4,r4,r6
    8cec:	2008d7fa 	srli	r4,r4,31
    8cf0:	00a00034 	movhi	r2,32768
    8cf4:	10bfffc4 	addi	r2,r2,-1
    8cf8:	1144703a 	and	r2,r2,r5
    8cfc:	2088b03a 	or	r4,r4,r2
    8d00:	009ffc34 	movhi	r2,32752
    8d04:	1105c83a 	sub	r2,r2,r4
    8d08:	1004d7fa 	srli	r2,r2,31
    8d0c:	f800283a 	ret

00008d10 <_sbrk_r>:
    8d10:	defffd04 	addi	sp,sp,-12
    8d14:	dc000015 	stw	r16,0(sp)
    8d18:	04000074 	movhi	r16,1
    8d1c:	84156a04 	addi	r16,r16,21928
    8d20:	dc400115 	stw	r17,4(sp)
    8d24:	80000015 	stw	zero,0(r16)
    8d28:	2023883a 	mov	r17,r4
    8d2c:	2809883a 	mov	r4,r5
    8d30:	dfc00215 	stw	ra,8(sp)
    8d34:	000f5a00 	call	f5a0 <sbrk>
    8d38:	1007883a 	mov	r3,r2
    8d3c:	00bfffc4 	movi	r2,-1
    8d40:	18800626 	beq	r3,r2,8d5c <_sbrk_r+0x4c>
    8d44:	1805883a 	mov	r2,r3
    8d48:	dfc00217 	ldw	ra,8(sp)
    8d4c:	dc400117 	ldw	r17,4(sp)
    8d50:	dc000017 	ldw	r16,0(sp)
    8d54:	dec00304 	addi	sp,sp,12
    8d58:	f800283a 	ret
    8d5c:	80800017 	ldw	r2,0(r16)
    8d60:	103ff826 	beq	r2,zero,8d44 <_sbrk_r+0x34>
    8d64:	88800015 	stw	r2,0(r17)
    8d68:	1805883a 	mov	r2,r3
    8d6c:	dfc00217 	ldw	ra,8(sp)
    8d70:	dc400117 	ldw	r17,4(sp)
    8d74:	dc000017 	ldw	r16,0(sp)
    8d78:	dec00304 	addi	sp,sp,12
    8d7c:	f800283a 	ret

00008d80 <__sccl>:
    8d80:	28c00003 	ldbu	r3,0(r5)
    8d84:	00801784 	movi	r2,94
    8d88:	2a000044 	addi	r8,r5,1
    8d8c:	18802526 	beq	r3,r2,8e24 <__sccl+0xa4>
    8d90:	180f883a 	mov	r7,r3
    8d94:	0013883a 	mov	r9,zero
    8d98:	000d883a 	mov	r6,zero
    8d9c:	0007883a 	mov	r3,zero
    8da0:	01404004 	movi	r5,256
    8da4:	1905883a 	add	r2,r3,r4
    8da8:	18c00044 	addi	r3,r3,1
    8dac:	11800005 	stb	r6,0(r2)
    8db0:	197ffc1e 	bne	r3,r5,8da4 <__sccl+0x24>
    8db4:	38000c26 	beq	r7,zero,8de8 <__sccl+0x68>
    8db8:	00800044 	movi	r2,1
    8dbc:	124dc83a 	sub	r6,r2,r9
    8dc0:	3905883a 	add	r2,r7,r4
    8dc4:	11800005 	stb	r6,0(r2)
    8dc8:	41400044 	addi	r5,r8,1
    8dcc:	02400b44 	movi	r9,45
    8dd0:	02801744 	movi	r10,93
    8dd4:	28bfffc3 	ldbu	r2,-1(r5)
    8dd8:	2811883a 	mov	r8,r5
    8ddc:	12400726 	beq	r2,r9,8dfc <__sccl+0x7c>
    8de0:	12800226 	beq	r2,r10,8dec <__sccl+0x6c>
    8de4:	1000031e 	bne	r2,zero,8df4 <__sccl+0x74>
    8de8:	423fffc4 	addi	r8,r8,-1
    8dec:	4005883a 	mov	r2,r8
    8df0:	f800283a 	ret
    8df4:	100f883a 	mov	r7,r2
    8df8:	003ff106 	br	8dc0 <__sccl+0x40>
    8dfc:	28c00003 	ldbu	r3,0(r5)
    8e00:	1a800d26 	beq	r3,r10,8e38 <__sccl+0xb8>
    8e04:	19c00c16 	blt	r3,r7,8e38 <__sccl+0xb8>
    8e08:	21c5883a 	add	r2,r4,r7
    8e0c:	39c00044 	addi	r7,r7,1
    8e10:	11800045 	stb	r6,1(r2)
    8e14:	10800044 	addi	r2,r2,1
    8e18:	38fffc16 	blt	r7,r3,8e0c <__sccl+0x8c>
    8e1c:	29400084 	addi	r5,r5,2
    8e20:	003fec06 	br	8dd4 <__sccl+0x54>
    8e24:	29c00043 	ldbu	r7,1(r5)
    8e28:	02400044 	movi	r9,1
    8e2c:	2a000084 	addi	r8,r5,2
    8e30:	480d883a 	mov	r6,r9
    8e34:	003fd906 	br	8d9c <__sccl+0x1c>
    8e38:	01c00b44 	movi	r7,45
    8e3c:	003fe006 	br	8dc0 <__sccl+0x40>

00008e40 <nanf>:
    8e40:	009ff034 	movhi	r2,32704
    8e44:	f800283a 	ret

00008e48 <sprintf>:
    8e48:	deffe504 	addi	sp,sp,-108
    8e4c:	2013883a 	mov	r9,r4
    8e50:	dfc01815 	stw	ra,96(sp)
    8e54:	d9801915 	stw	r6,100(sp)
    8e58:	d9c01a15 	stw	r7,104(sp)
    8e5c:	d8801904 	addi	r2,sp,100
    8e60:	d8800015 	stw	r2,0(sp)
    8e64:	00800074 	movhi	r2,1
    8e68:	108e7f04 	addi	r2,r2,14844
    8e6c:	11000017 	ldw	r4,0(r2)
    8e70:	d9c00017 	ldw	r7,0(sp)
    8e74:	00808204 	movi	r2,520
    8e78:	00e00034 	movhi	r3,32768
    8e7c:	18ffffc4 	addi	r3,r3,-1
    8e80:	280d883a 	mov	r6,r5
    8e84:	d880040d 	sth	r2,16(sp)
    8e88:	d9400104 	addi	r5,sp,4
    8e8c:	00bfffc4 	movi	r2,-1
    8e90:	d8c00615 	stw	r3,24(sp)
    8e94:	d8c00315 	stw	r3,12(sp)
    8e98:	da400515 	stw	r9,20(sp)
    8e9c:	d880048d 	sth	r2,18(sp)
    8ea0:	da400115 	stw	r9,4(sp)
    8ea4:	00006380 	call	638 <___vfprintf_internal_r>
    8ea8:	d8c00117 	ldw	r3,4(sp)
    8eac:	18000005 	stb	zero,0(r3)
    8eb0:	dfc01817 	ldw	ra,96(sp)
    8eb4:	dec01b04 	addi	sp,sp,108
    8eb8:	f800283a 	ret

00008ebc <_sprintf_r>:
    8ebc:	deffe604 	addi	sp,sp,-104
    8ec0:	2813883a 	mov	r9,r5
    8ec4:	dfc01815 	stw	ra,96(sp)
    8ec8:	d9c01915 	stw	r7,100(sp)
    8ecc:	d8801904 	addi	r2,sp,100
    8ed0:	d8800015 	stw	r2,0(sp)
    8ed4:	100f883a 	mov	r7,r2
    8ed8:	00808204 	movi	r2,520
    8edc:	00e00034 	movhi	r3,32768
    8ee0:	18ffffc4 	addi	r3,r3,-1
    8ee4:	d880040d 	sth	r2,16(sp)
    8ee8:	d9400104 	addi	r5,sp,4
    8eec:	00bfffc4 	movi	r2,-1
    8ef0:	d8c00615 	stw	r3,24(sp)
    8ef4:	d8c00315 	stw	r3,12(sp)
    8ef8:	da400515 	stw	r9,20(sp)
    8efc:	d880048d 	sth	r2,18(sp)
    8f00:	da400115 	stw	r9,4(sp)
    8f04:	00006380 	call	638 <___vfprintf_internal_r>
    8f08:	d8c00117 	ldw	r3,4(sp)
    8f0c:	18000005 	stb	zero,0(r3)
    8f10:	dfc01817 	ldw	ra,96(sp)
    8f14:	dec01a04 	addi	sp,sp,104
    8f18:	f800283a 	ret

00008f1c <__sclose>:
    8f1c:	2940038f 	ldh	r5,14(r5)
    8f20:	000b6881 	jmpi	b688 <_close_r>

00008f24 <__sseek>:
    8f24:	defffe04 	addi	sp,sp,-8
    8f28:	dc000015 	stw	r16,0(sp)
    8f2c:	2821883a 	mov	r16,r5
    8f30:	2940038f 	ldh	r5,14(r5)
    8f34:	dfc00115 	stw	ra,4(sp)
    8f38:	000c4880 	call	c488 <_lseek_r>
    8f3c:	1007883a 	mov	r3,r2
    8f40:	00bfffc4 	movi	r2,-1
    8f44:	18800926 	beq	r3,r2,8f6c <__sseek+0x48>
    8f48:	8080030b 	ldhu	r2,12(r16)
    8f4c:	80c01415 	stw	r3,80(r16)
    8f50:	10840014 	ori	r2,r2,4096
    8f54:	8080030d 	sth	r2,12(r16)
    8f58:	1805883a 	mov	r2,r3
    8f5c:	dfc00117 	ldw	ra,4(sp)
    8f60:	dc000017 	ldw	r16,0(sp)
    8f64:	dec00204 	addi	sp,sp,8
    8f68:	f800283a 	ret
    8f6c:	8080030b 	ldhu	r2,12(r16)
    8f70:	10bbffcc 	andi	r2,r2,61439
    8f74:	8080030d 	sth	r2,12(r16)
    8f78:	1805883a 	mov	r2,r3
    8f7c:	dfc00117 	ldw	ra,4(sp)
    8f80:	dc000017 	ldw	r16,0(sp)
    8f84:	dec00204 	addi	sp,sp,8
    8f88:	f800283a 	ret

00008f8c <__swrite>:
    8f8c:	2880030b 	ldhu	r2,12(r5)
    8f90:	defffb04 	addi	sp,sp,-20
    8f94:	dcc00315 	stw	r19,12(sp)
    8f98:	1080400c 	andi	r2,r2,256
    8f9c:	dc800215 	stw	r18,8(sp)
    8fa0:	dc400115 	stw	r17,4(sp)
    8fa4:	dc000015 	stw	r16,0(sp)
    8fa8:	3027883a 	mov	r19,r6
    8fac:	3825883a 	mov	r18,r7
    8fb0:	dfc00415 	stw	ra,16(sp)
    8fb4:	2821883a 	mov	r16,r5
    8fb8:	000d883a 	mov	r6,zero
    8fbc:	01c00084 	movi	r7,2
    8fc0:	2023883a 	mov	r17,r4
    8fc4:	10000226 	beq	r2,zero,8fd0 <__swrite+0x44>
    8fc8:	2940038f 	ldh	r5,14(r5)
    8fcc:	000c4880 	call	c488 <_lseek_r>
    8fd0:	8080030b 	ldhu	r2,12(r16)
    8fd4:	8140038f 	ldh	r5,14(r16)
    8fd8:	8809883a 	mov	r4,r17
    8fdc:	10bbffcc 	andi	r2,r2,61439
    8fe0:	980d883a 	mov	r6,r19
    8fe4:	900f883a 	mov	r7,r18
    8fe8:	8080030d 	sth	r2,12(r16)
    8fec:	dfc00417 	ldw	ra,16(sp)
    8ff0:	dcc00317 	ldw	r19,12(sp)
    8ff4:	dc800217 	ldw	r18,8(sp)
    8ff8:	dc400117 	ldw	r17,4(sp)
    8ffc:	dc000017 	ldw	r16,0(sp)
    9000:	dec00504 	addi	sp,sp,20
    9004:	000b55c1 	jmpi	b55c <_write_r>

00009008 <__sread>:
    9008:	defffe04 	addi	sp,sp,-8
    900c:	dc000015 	stw	r16,0(sp)
    9010:	2821883a 	mov	r16,r5
    9014:	2940038f 	ldh	r5,14(r5)
    9018:	dfc00115 	stw	ra,4(sp)
    901c:	000c5000 	call	c500 <_read_r>
    9020:	1007883a 	mov	r3,r2
    9024:	10000816 	blt	r2,zero,9048 <__sread+0x40>
    9028:	80801417 	ldw	r2,80(r16)
    902c:	10c5883a 	add	r2,r2,r3
    9030:	80801415 	stw	r2,80(r16)
    9034:	1805883a 	mov	r2,r3
    9038:	dfc00117 	ldw	ra,4(sp)
    903c:	dc000017 	ldw	r16,0(sp)
    9040:	dec00204 	addi	sp,sp,8
    9044:	f800283a 	ret
    9048:	8080030b 	ldhu	r2,12(r16)
    904c:	10bbffcc 	andi	r2,r2,61439
    9050:	8080030d 	sth	r2,12(r16)
    9054:	1805883a 	mov	r2,r3
    9058:	dfc00117 	ldw	ra,4(sp)
    905c:	dc000017 	ldw	r16,0(sp)
    9060:	dec00204 	addi	sp,sp,8
    9064:	f800283a 	ret

00009068 <strcmp>:
    9068:	2144b03a 	or	r2,r4,r5
    906c:	108000cc 	andi	r2,r2,3
    9070:	10001d1e 	bne	r2,zero,90e8 <strcmp+0x80>
    9074:	200f883a 	mov	r7,r4
    9078:	28800017 	ldw	r2,0(r5)
    907c:	21000017 	ldw	r4,0(r4)
    9080:	280d883a 	mov	r6,r5
    9084:	2080161e 	bne	r4,r2,90e0 <strcmp+0x78>
    9088:	023fbff4 	movhi	r8,65279
    908c:	423fbfc4 	addi	r8,r8,-257
    9090:	2207883a 	add	r3,r4,r8
    9094:	01602074 	movhi	r5,32897
    9098:	29602004 	addi	r5,r5,-32640
    909c:	1946703a 	and	r3,r3,r5
    90a0:	0104303a 	nor	r2,zero,r4
    90a4:	10c4703a 	and	r2,r2,r3
    90a8:	10001c1e 	bne	r2,zero,911c <strcmp+0xb4>
    90ac:	4013883a 	mov	r9,r8
    90b0:	2811883a 	mov	r8,r5
    90b4:	00000106 	br	90bc <strcmp+0x54>
    90b8:	1800181e 	bne	r3,zero,911c <strcmp+0xb4>
    90bc:	39c00104 	addi	r7,r7,4
    90c0:	39000017 	ldw	r4,0(r7)
    90c4:	31800104 	addi	r6,r6,4
    90c8:	31400017 	ldw	r5,0(r6)
    90cc:	2245883a 	add	r2,r4,r9
    90d0:	1204703a 	and	r2,r2,r8
    90d4:	0106303a 	nor	r3,zero,r4
    90d8:	1886703a 	and	r3,r3,r2
    90dc:	217ff626 	beq	r4,r5,90b8 <strcmp+0x50>
    90e0:	3809883a 	mov	r4,r7
    90e4:	300b883a 	mov	r5,r6
    90e8:	20c00007 	ldb	r3,0(r4)
    90ec:	1800051e 	bne	r3,zero,9104 <strcmp+0x9c>
    90f0:	00000606 	br	910c <strcmp+0xa4>
    90f4:	21000044 	addi	r4,r4,1
    90f8:	20c00007 	ldb	r3,0(r4)
    90fc:	29400044 	addi	r5,r5,1
    9100:	18000226 	beq	r3,zero,910c <strcmp+0xa4>
    9104:	28800007 	ldb	r2,0(r5)
    9108:	18bffa26 	beq	r3,r2,90f4 <strcmp+0x8c>
    910c:	20c00003 	ldbu	r3,0(r4)
    9110:	28800003 	ldbu	r2,0(r5)
    9114:	1885c83a 	sub	r2,r3,r2
    9118:	f800283a 	ret
    911c:	0005883a 	mov	r2,zero
    9120:	f800283a 	ret

00009124 <strlen>:
    9124:	208000cc 	andi	r2,r4,3
    9128:	2011883a 	mov	r8,r4
    912c:	1000161e 	bne	r2,zero,9188 <strlen+0x64>
    9130:	20c00017 	ldw	r3,0(r4)
    9134:	017fbff4 	movhi	r5,65279
    9138:	297fbfc4 	addi	r5,r5,-257
    913c:	01e02074 	movhi	r7,32897
    9140:	39e02004 	addi	r7,r7,-32640
    9144:	1945883a 	add	r2,r3,r5
    9148:	11c4703a 	and	r2,r2,r7
    914c:	00c6303a 	nor	r3,zero,r3
    9150:	1886703a 	and	r3,r3,r2
    9154:	18000c1e 	bne	r3,zero,9188 <strlen+0x64>
    9158:	280d883a 	mov	r6,r5
    915c:	380b883a 	mov	r5,r7
    9160:	21000104 	addi	r4,r4,4
    9164:	20800017 	ldw	r2,0(r4)
    9168:	1187883a 	add	r3,r2,r6
    916c:	1946703a 	and	r3,r3,r5
    9170:	0084303a 	nor	r2,zero,r2
    9174:	10c4703a 	and	r2,r2,r3
    9178:	103ff926 	beq	r2,zero,9160 <strlen+0x3c>
    917c:	20800007 	ldb	r2,0(r4)
    9180:	10000326 	beq	r2,zero,9190 <strlen+0x6c>
    9184:	21000044 	addi	r4,r4,1
    9188:	20800007 	ldb	r2,0(r4)
    918c:	103ffd1e 	bne	r2,zero,9184 <strlen+0x60>
    9190:	2205c83a 	sub	r2,r4,r8
    9194:	f800283a 	ret

00009198 <match>:
    9198:	21800017 	ldw	r6,0(r4)
    919c:	01c01004 	movi	r7,64
    91a0:	02001684 	movi	r8,90
    91a4:	28800007 	ldb	r2,0(r5)
    91a8:	29400044 	addi	r5,r5,1
    91ac:	10000826 	beq	r2,zero,91d0 <match+0x38>
    91b0:	31800044 	addi	r6,r6,1
    91b4:	30c00007 	ldb	r3,0(r6)
    91b8:	38c0020e 	bge	r7,r3,91c4 <match+0x2c>
    91bc:	40c00116 	blt	r8,r3,91c4 <match+0x2c>
    91c0:	18c00804 	addi	r3,r3,32
    91c4:	18bff726 	beq	r3,r2,91a4 <match+0xc>
    91c8:	0005883a 	mov	r2,zero
    91cc:	f800283a 	ret
    91d0:	30800044 	addi	r2,r6,1
    91d4:	20800015 	stw	r2,0(r4)
    91d8:	00800044 	movi	r2,1
    91dc:	f800283a 	ret

000091e0 <_strtod_r>:
    91e0:	deffde04 	addi	sp,sp,-136
    91e4:	df002015 	stw	fp,128(sp)
    91e8:	dd401d15 	stw	r21,116(sp)
    91ec:	dc401915 	stw	r17,100(sp)
    91f0:	dfc02115 	stw	ra,132(sp)
    91f4:	ddc01f15 	stw	r23,124(sp)
    91f8:	dd801e15 	stw	r22,120(sp)
    91fc:	dd001c15 	stw	r20,112(sp)
    9200:	dcc01b15 	stw	r19,108(sp)
    9204:	dc801a15 	stw	r18,104(sp)
    9208:	dc001815 	stw	r16,96(sp)
    920c:	2823883a 	mov	r17,r5
    9210:	202b883a 	mov	r21,r4
    9214:	d9801515 	stw	r6,84(sp)
    9218:	d8000915 	stw	zero,36(sp)
    921c:	d8000a15 	stw	zero,40(sp)
    9220:	d9400415 	stw	r5,16(sp)
    9224:	df000904 	addi	fp,sp,36
    9228:	da000417 	ldw	r8,16(sp)
    922c:	00800b44 	movi	r2,45
    9230:	40c00003 	ldbu	r3,0(r8)
    9234:	10c03536 	bltu	r2,r3,930c <_strtod_r+0x12c>
    9238:	18c5883a 	add	r2,r3,r3
    923c:	1085883a 	add	r2,r2,r2
    9240:	00c00074 	movhi	r3,1
    9244:	18e49504 	addi	r3,r3,-28076
    9248:	10c5883a 	add	r2,r2,r3
    924c:	11000017 	ldw	r4,0(r2)
    9250:	2000683a 	jmp	r4
    9254:	00009448 	cmpgei	zero,zero,593
    9258:	0000930c 	andi	zero,zero,588
    925c:	0000930c 	andi	zero,zero,588
    9260:	0000930c 	andi	zero,zero,588
    9264:	0000930c 	andi	zero,zero,588
    9268:	0000930c 	andi	zero,zero,588
    926c:	0000930c 	andi	zero,zero,588
    9270:	0000930c 	andi	zero,zero,588
    9274:	0000930c 	andi	zero,zero,588
    9278:	00009760 	cmpeqi	zero,zero,605
    927c:	00009760 	cmpeqi	zero,zero,605
    9280:	00009760 	cmpeqi	zero,zero,605
    9284:	00009760 	cmpeqi	zero,zero,605
    9288:	00009760 	cmpeqi	zero,zero,605
    928c:	0000930c 	andi	zero,zero,588
    9290:	0000930c 	andi	zero,zero,588
    9294:	0000930c 	andi	zero,zero,588
    9298:	0000930c 	andi	zero,zero,588
    929c:	0000930c 	andi	zero,zero,588
    92a0:	0000930c 	andi	zero,zero,588
    92a4:	0000930c 	andi	zero,zero,588
    92a8:	0000930c 	andi	zero,zero,588
    92ac:	0000930c 	andi	zero,zero,588
    92b0:	0000930c 	andi	zero,zero,588
    92b4:	0000930c 	andi	zero,zero,588
    92b8:	0000930c 	andi	zero,zero,588
    92bc:	0000930c 	andi	zero,zero,588
    92c0:	0000930c 	andi	zero,zero,588
    92c4:	0000930c 	andi	zero,zero,588
    92c8:	0000930c 	andi	zero,zero,588
    92cc:	0000930c 	andi	zero,zero,588
    92d0:	0000930c 	andi	zero,zero,588
    92d4:	00009760 	cmpeqi	zero,zero,605
    92d8:	0000930c 	andi	zero,zero,588
    92dc:	0000930c 	andi	zero,zero,588
    92e0:	0000930c 	andi	zero,zero,588
    92e4:	0000930c 	andi	zero,zero,588
    92e8:	0000930c 	andi	zero,zero,588
    92ec:	0000930c 	andi	zero,zero,588
    92f0:	0000930c 	andi	zero,zero,588
    92f4:	0000930c 	andi	zero,zero,588
    92f8:	0000930c 	andi	zero,zero,588
    92fc:	0000930c 	andi	zero,zero,588
    9300:	00009740 	call	974 <___vfprintf_internal_r+0x33c>
    9304:	0000930c 	andi	zero,zero,588
    9308:	0000976c 	andhi	zero,zero,605
    930c:	d8001115 	stw	zero,68(sp)
    9310:	40c00007 	ldb	r3,0(r8)
    9314:	00800c04 	movi	r2,48
    9318:	1880d026 	beq	r3,r2,965c <_strtod_r+0x47c>
    931c:	001f883a 	mov	r15,zero
    9320:	41000007 	ldb	r4,0(r8)
    9324:	00c00bc4 	movi	r3,47
    9328:	402d883a 	mov	r22,r8
    932c:	1903470e 	bge	r3,r4,a04c <_strtod_r+0xe6c>
    9330:	00800e44 	movi	r2,57
    9334:	11034516 	blt	r2,r4,a04c <_strtod_r+0xe6c>
    9338:	180f883a 	mov	r7,r3
    933c:	1013883a 	mov	r9,r2
    9340:	4007883a 	mov	r3,r8
    9344:	000d883a 	mov	r6,zero
    9348:	0029883a 	mov	r20,zero
    934c:	0021883a 	mov	r16,zero
    9350:	01400204 	movi	r5,8
    9354:	028003c4 	movi	r10,15
    9358:	29803116 	blt	r5,r6,9420 <_strtod_r+0x240>
    935c:	a08002a4 	muli	r2,r20,10
    9360:	1105883a 	add	r2,r2,r4
    9364:	153ff404 	addi	r20,r2,-48
    9368:	1a000044 	addi	r8,r3,1
    936c:	da000415 	stw	r8,16(sp)
    9370:	41000007 	ldb	r4,0(r8)
    9374:	31800044 	addi	r6,r6,1
    9378:	4007883a 	mov	r3,r8
    937c:	3900010e 	bge	r7,r4,9384 <_strtod_r+0x1a4>
    9380:	493ff50e 	bge	r9,r4,9358 <_strtod_r+0x178>
    9384:	00800b84 	movi	r2,46
    9388:	2080c126 	beq	r4,r2,9690 <_strtod_r+0x4b0>
    938c:	3027883a 	mov	r19,r6
    9390:	0025883a 	mov	r18,zero
    9394:	0015883a 	mov	r10,zero
    9398:	000f883a 	mov	r7,zero
    939c:	00801944 	movi	r2,101
    93a0:	20802426 	beq	r4,r2,9434 <_strtod_r+0x254>
    93a4:	00801144 	movi	r2,69
    93a8:	20802226 	beq	r4,r2,9434 <_strtod_r+0x254>
    93ac:	9816c03a 	cmpne	r11,r19,zero
    93b0:	000b883a 	mov	r5,zero
    93b4:	5800631e 	bne	r11,zero,9544 <_strtod_r+0x364>
    93b8:	3800c126 	beq	r7,zero,96c0 <_strtod_r+0x4e0>
    93bc:	d8c01517 	ldw	r3,84(sp)
    93c0:	18000226 	beq	r3,zero,93cc <_strtod_r+0x1ec>
    93c4:	d8800417 	ldw	r2,16(sp)
    93c8:	18800015 	stw	r2,0(r3)
    93cc:	d9001117 	ldw	r4,68(sp)
    93d0:	2005003a 	cmpeq	r2,r4,zero
    93d4:	10001f1e 	bne	r2,zero,9454 <_strtod_r+0x274>
    93d8:	e0800017 	ldw	r2,0(fp)
    93dc:	e0c00117 	ldw	r3,4(fp)
    93e0:	1009883a 	mov	r4,r2
    93e4:	1960003c 	xorhi	r5,r3,32768
    93e8:	2005883a 	mov	r2,r4
    93ec:	2807883a 	mov	r3,r5
    93f0:	dfc02117 	ldw	ra,132(sp)
    93f4:	df002017 	ldw	fp,128(sp)
    93f8:	ddc01f17 	ldw	r23,124(sp)
    93fc:	dd801e17 	ldw	r22,120(sp)
    9400:	dd401d17 	ldw	r21,116(sp)
    9404:	dd001c17 	ldw	r20,112(sp)
    9408:	dcc01b17 	ldw	r19,108(sp)
    940c:	dc801a17 	ldw	r18,104(sp)
    9410:	dc401917 	ldw	r17,100(sp)
    9414:	dc001817 	ldw	r16,96(sp)
    9418:	dec02204 	addi	sp,sp,136
    941c:	f800283a 	ret
    9420:	51bfd116 	blt	r10,r6,9368 <_strtod_r+0x188>
    9424:	808002a4 	muli	r2,r16,10
    9428:	1105883a 	add	r2,r2,r4
    942c:	143ff404 	addi	r16,r2,-48
    9430:	003fcd06 	br	9368 <_strtod_r+0x188>
    9434:	9816c03a 	cmpne	r11,r19,zero
    9438:	5800091e 	bne	r11,zero,9460 <_strtod_r+0x280>
    943c:	3800081e 	bne	r7,zero,9460 <_strtod_r+0x280>
    9440:	7805003a 	cmpeq	r2,r15,zero
    9444:	10000626 	beq	r2,zero,9460 <_strtod_r+0x280>
    9448:	d8001115 	stw	zero,68(sp)
    944c:	dc400415 	stw	r17,16(sp)
    9450:	003fda06 	br	93bc <_strtod_r+0x1dc>
    9454:	e1000017 	ldw	r4,0(fp)
    9458:	e1400117 	ldw	r5,4(fp)
    945c:	003fe206 	br	93e8 <_strtod_r+0x208>
    9460:	dc400417 	ldw	r17,16(sp)
    9464:	00800ac4 	movi	r2,43
    9468:	8a000044 	addi	r8,r17,1
    946c:	da000415 	stw	r8,16(sp)
    9470:	88c00047 	ldb	r3,1(r17)
    9474:	4009883a 	mov	r4,r8
    9478:	1880bf26 	beq	r3,r2,9778 <_strtod_r+0x598>
    947c:	00800b44 	movi	r2,45
    9480:	18834526 	beq	r3,r2,a198 <_strtod_r+0xfb8>
    9484:	1809883a 	mov	r4,r3
    9488:	20fff404 	addi	r3,r4,-48
    948c:	00800244 	movi	r2,9
    9490:	001d883a 	mov	r14,zero
    9494:	10c0bf36 	bltu	r2,r3,9794 <_strtod_r+0x5b4>
    9498:	00800c04 	movi	r2,48
    949c:	2080061e 	bne	r4,r2,94b8 <_strtod_r+0x2d8>
    94a0:	da000417 	ldw	r8,16(sp)
    94a4:	2005883a 	mov	r2,r4
    94a8:	42000044 	addi	r8,r8,1
    94ac:	da000415 	stw	r8,16(sp)
    94b0:	41000007 	ldb	r4,0(r8)
    94b4:	20bffc26 	beq	r4,r2,94a8 <_strtod_r+0x2c8>
    94b8:	20fff3c4 	addi	r3,r4,-49
    94bc:	00800204 	movi	r2,8
    94c0:	10ffbb36 	bltu	r2,r3,93b0 <_strtod_r+0x1d0>
    94c4:	da000417 	ldw	r8,16(sp)
    94c8:	227ff404 	addi	r9,r4,-48
    94cc:	03000bc4 	movi	r12,47
    94d0:	4007883a 	mov	r3,r8
    94d4:	42000044 	addi	r8,r8,1
    94d8:	da000415 	stw	r8,16(sp)
    94dc:	41000007 	ldb	r4,0(r8)
    94e0:	61000d0e 	bge	r12,r4,9518 <_strtod_r+0x338>
    94e4:	00800e44 	movi	r2,57
    94e8:	11000b16 	blt	r2,r4,9518 <_strtod_r+0x338>
    94ec:	601b883a 	mov	r13,r12
    94f0:	1019883a 	mov	r12,r2
    94f4:	00000106 	br	94fc <_strtod_r+0x31c>
    94f8:	61000716 	blt	r12,r4,9518 <_strtod_r+0x338>
    94fc:	488002a4 	muli	r2,r9,10
    9500:	42000044 	addi	r8,r8,1
    9504:	da000415 	stw	r8,16(sp)
    9508:	2085883a 	add	r2,r4,r2
    950c:	41000007 	ldb	r4,0(r8)
    9510:	127ff404 	addi	r9,r2,-48
    9514:	693ff816 	blt	r13,r4,94f8 <_strtod_r+0x318>
    9518:	40c7c83a 	sub	r3,r8,r3
    951c:	00800204 	movi	r2,8
    9520:	10c2e416 	blt	r2,r3,a0b4 <_strtod_r+0xed4>
    9524:	009387c4 	movi	r2,19999
    9528:	480b883a 	mov	r5,r9
    952c:	1240010e 	bge	r2,r9,9534 <_strtod_r+0x354>
    9530:	100b883a 	mov	r5,r2
    9534:	7005003a 	cmpeq	r2,r14,zero
    9538:	103f9e1e 	bne	r2,zero,93b4 <_strtod_r+0x1d4>
    953c:	014bc83a 	sub	r5,zero,r5
    9540:	583f9d26 	beq	r11,zero,93b8 <_strtod_r+0x1d8>
    9544:	2a8bc83a 	sub	r5,r5,r10
    9548:	d9400f15 	stw	r5,60(sp)
    954c:	30007a1e 	bne	r6,zero,9738 <_strtod_r+0x558>
    9550:	dcc01215 	stw	r19,72(sp)
    9554:	00800404 	movi	r2,16
    9558:	9825883a 	mov	r18,r19
    955c:	14c0010e 	bge	r2,r19,9564 <_strtod_r+0x384>
    9560:	1025883a 	mov	r18,r2
    9564:	a009883a 	mov	r4,r20
    9568:	000e43c0 	call	e43c <__floatunsidf>
    956c:	100f883a 	mov	r7,r2
    9570:	e0800015 	stw	r2,0(fp)
    9574:	00800244 	movi	r2,9
    9578:	e0c00115 	stw	r3,4(fp)
    957c:	1480160e 	bge	r2,r18,95d8 <_strtod_r+0x3f8>
    9580:	900c90fa 	slli	r6,r18,3
    9584:	01000074 	movhi	r4,1
    9588:	21070004 	addi	r4,r4,7168
    958c:	180b883a 	mov	r5,r3
    9590:	310d883a 	add	r6,r6,r4
    9594:	30ffef17 	ldw	r3,-68(r6)
    9598:	30bfee17 	ldw	r2,-72(r6)
    959c:	3809883a 	mov	r4,r7
    95a0:	180f883a 	mov	r7,r3
    95a4:	100d883a 	mov	r6,r2
    95a8:	000d8ac0 	call	d8ac <__muldf3>
    95ac:	8009883a 	mov	r4,r16
    95b0:	1823883a 	mov	r17,r3
    95b4:	1021883a 	mov	r16,r2
    95b8:	000e43c0 	call	e43c <__floatunsidf>
    95bc:	880b883a 	mov	r5,r17
    95c0:	180f883a 	mov	r7,r3
    95c4:	8009883a 	mov	r4,r16
    95c8:	100d883a 	mov	r6,r2
    95cc:	000d8380 	call	d838 <__adddf3>
    95d0:	e0c00115 	stw	r3,4(fp)
    95d4:	e0800015 	stw	r2,0(fp)
    95d8:	010003c4 	movi	r4,15
    95dc:	24c09816 	blt	r4,r19,9840 <_strtod_r+0x660>
    95e0:	d9800f17 	ldw	r6,60(sp)
    95e4:	303f7526 	beq	r6,zero,93bc <_strtod_r+0x1dc>
    95e8:	0183be0e 	bge	zero,r6,a4e4 <_strtod_r+0x1304>
    95ec:	00800584 	movi	r2,22
    95f0:	1182b20e 	bge	r2,r6,a0bc <_strtod_r+0xedc>
    95f4:	d8c00f17 	ldw	r3,60(sp)
    95f8:	24e3c83a 	sub	r17,r4,r19
    95fc:	88800584 	addi	r2,r17,22
    9600:	10c08f16 	blt	r2,r3,9840 <_strtod_r+0x660>
    9604:	880890fa 	slli	r4,r17,3
    9608:	04000074 	movhi	r16,1
    960c:	84070004 	addi	r16,r16,7168
    9610:	e0800017 	ldw	r2,0(fp)
    9614:	2409883a 	add	r4,r4,r16
    9618:	22000017 	ldw	r8,0(r4)
    961c:	22400117 	ldw	r9,4(r4)
    9620:	e0c00117 	ldw	r3,4(fp)
    9624:	1009883a 	mov	r4,r2
    9628:	480f883a 	mov	r7,r9
    962c:	180b883a 	mov	r5,r3
    9630:	400d883a 	mov	r6,r8
    9634:	000d8ac0 	call	d8ac <__muldf3>
    9638:	d9000f17 	ldw	r4,60(sp)
    963c:	180b883a 	mov	r5,r3
    9640:	2455c83a 	sub	r10,r4,r17
    9644:	501490fa 	slli	r10,r10,3
    9648:	1009883a 	mov	r4,r2
    964c:	5415883a 	add	r10,r10,r16
    9650:	52000017 	ldw	r8,0(r10)
    9654:	52400117 	ldw	r9,4(r10)
    9658:	0002a206 	br	a0e4 <_strtod_r+0xf04>
    965c:	40c00047 	ldb	r3,1(r8)
    9660:	00801604 	movi	r2,88
    9664:	18804e26 	beq	r3,r2,97a0 <_strtod_r+0x5c0>
    9668:	00801e04 	movi	r2,120
    966c:	18804c26 	beq	r3,r2,97a0 <_strtod_r+0x5c0>
    9670:	42000044 	addi	r8,r8,1
    9674:	da000415 	stw	r8,16(sp)
    9678:	40c00007 	ldb	r3,0(r8)
    967c:	00800c04 	movi	r2,48
    9680:	18bffb26 	beq	r3,r2,9670 <_strtod_r+0x490>
    9684:	183f4d26 	beq	r3,zero,93bc <_strtod_r+0x1dc>
    9688:	03c00044 	movi	r15,1
    968c:	003f2406 	br	9320 <_strtod_r+0x140>
    9690:	42000044 	addi	r8,r8,1
    9694:	da000415 	stw	r8,16(sp)
    9698:	19000047 	ldb	r4,1(r3)
    969c:	3000b726 	beq	r6,zero,997c <_strtod_r+0x79c>
    96a0:	3027883a 	mov	r19,r6
    96a4:	0015883a 	mov	r10,zero
    96a8:	000f883a 	mov	r7,zero
    96ac:	227ff404 	addi	r9,r4,-48
    96b0:	00800244 	movi	r2,9
    96b4:	1242592e 	bgeu	r2,r9,a01c <_strtod_r+0xe3c>
    96b8:	04800044 	movi	r18,1
    96bc:	003f3706 	br	939c <_strtod_r+0x1bc>
    96c0:	7804c03a 	cmpne	r2,r15,zero
    96c4:	103f3d1e 	bne	r2,zero,93bc <_strtod_r+0x1dc>
    96c8:	9004c03a 	cmpne	r2,r18,zero
    96cc:	103f5e1e 	bne	r2,zero,9448 <_strtod_r+0x268>
    96d0:	00801384 	movi	r2,78
    96d4:	2083a226 	beq	r4,r2,a560 <_strtod_r+0x1380>
    96d8:	11039d16 	blt	r2,r4,a550 <_strtod_r+0x1370>
    96dc:	00801244 	movi	r2,73
    96e0:	20bf591e 	bne	r4,r2,9448 <_strtod_r+0x268>
    96e4:	dc000404 	addi	r16,sp,16
    96e8:	8009883a 	mov	r4,r16
    96ec:	01400074 	movhi	r5,1
    96f0:	29474904 	addi	r5,r5,7460
    96f4:	00091980 	call	9198 <match>
    96f8:	103f5326 	beq	r2,zero,9448 <_strtod_r+0x268>
    96fc:	d8800417 	ldw	r2,16(sp)
    9700:	8009883a 	mov	r4,r16
    9704:	01400074 	movhi	r5,1
    9708:	29474a04 	addi	r5,r5,7464
    970c:	123fffc4 	addi	r8,r2,-1
    9710:	da000415 	stw	r8,16(sp)
    9714:	00091980 	call	9198 <match>
    9718:	1000031e 	bne	r2,zero,9728 <_strtod_r+0x548>
    971c:	d8800417 	ldw	r2,16(sp)
    9720:	12000044 	addi	r8,r2,1
    9724:	da000415 	stw	r8,16(sp)
    9728:	019ffc34 	movhi	r6,32752
    972c:	e1800115 	stw	r6,4(fp)
    9730:	e0000015 	stw	zero,0(fp)
    9734:	003f2106 	br	93bc <_strtod_r+0x1dc>
    9738:	d9801215 	stw	r6,72(sp)
    973c:	003f8506 	br	9554 <_strtod_r+0x374>
    9740:	d8001115 	stw	zero,68(sp)
    9744:	42000044 	addi	r8,r8,1
    9748:	da000415 	stw	r8,16(sp)
    974c:	40800007 	ldb	r2,0(r8)
    9750:	103eef1e 	bne	r2,zero,9310 <_strtod_r+0x130>
    9754:	d8001115 	stw	zero,68(sp)
    9758:	dc400415 	stw	r17,16(sp)
    975c:	003f1706 	br	93bc <_strtod_r+0x1dc>
    9760:	42000044 	addi	r8,r8,1
    9764:	da000415 	stw	r8,16(sp)
    9768:	003eaf06 	br	9228 <_strtod_r+0x48>
    976c:	00800044 	movi	r2,1
    9770:	d8801115 	stw	r2,68(sp)
    9774:	003ff306 	br	9744 <_strtod_r+0x564>
    9778:	001d883a 	mov	r14,zero
    977c:	42000044 	addi	r8,r8,1
    9780:	da000415 	stw	r8,16(sp)
    9784:	21000047 	ldb	r4,1(r4)
    9788:	00800244 	movi	r2,9
    978c:	20fff404 	addi	r3,r4,-48
    9790:	10ff412e 	bgeu	r2,r3,9498 <_strtod_r+0x2b8>
    9794:	000b883a 	mov	r5,zero
    9798:	dc400415 	stw	r17,16(sp)
    979c:	003f0506 	br	93b4 <_strtod_r+0x1d4>
    97a0:	d8c01117 	ldw	r3,68(sp)
    97a4:	04800074 	movhi	r18,1
    97a8:	9489c404 	addi	r18,r18,10000
    97ac:	d8800504 	addi	r2,sp,20
    97b0:	a809883a 	mov	r4,r21
    97b4:	d9400404 	addi	r5,sp,16
    97b8:	900d883a 	mov	r6,r18
    97bc:	d9c00604 	addi	r7,sp,24
    97c0:	d8800015 	stw	r2,0(sp)
    97c4:	d8c00115 	stw	r3,4(sp)
    97c8:	000b9cc0 	call	b9cc <__gethex>
    97cc:	140001cc 	andi	r16,r2,7
    97d0:	1027883a 	mov	r19,r2
    97d4:	803ef926 	beq	r16,zero,93bc <_strtod_r+0x1dc>
    97d8:	05000184 	movi	r20,6
    97dc:	853f1a26 	beq	r16,r20,9448 <_strtod_r+0x268>
    97e0:	d9800517 	ldw	r6,20(sp)
    97e4:	30000626 	beq	r6,zero,9800 <_strtod_r+0x620>
    97e8:	91400017 	ldw	r5,0(r18)
    97ec:	d9000d04 	addi	r4,sp,52
    97f0:	00079780 	call	7978 <__copybits>
    97f4:	d9400517 	ldw	r5,20(sp)
    97f8:	a809883a 	mov	r4,r21
    97fc:	00074d80 	call	74d8 <_Bfree>
    9800:	d9400617 	ldw	r5,24(sp)
    9804:	a4024136 	bltu	r20,r16,a10c <_strtod_r+0xf2c>
    9808:	8405883a 	add	r2,r16,r16
    980c:	1085883a 	add	r2,r2,r2
    9810:	00c00074 	movhi	r3,1
    9814:	18e60904 	addi	r3,r3,-26588
    9818:	10c5883a 	add	r2,r2,r3
    981c:	11000017 	ldw	r4,0(r2)
    9820:	2000683a 	jmp	r4
    9824:	0000a14c 	andi	zero,zero,645
    9828:	0000a158 	cmpnei	zero,zero,645
    982c:	0000a0fc 	xorhi	zero,zero,643
    9830:	0000a124 	muli	zero,zero,644
    9834:	0000a134 	movhi	zero,644
    9838:	0000a158 	cmpnei	zero,zero,645
    983c:	0000a14c 	andi	zero,zero,645
    9840:	d8c00f17 	ldw	r3,60(sp)
    9844:	9c85c83a 	sub	r2,r19,r18
    9848:	18a1883a 	add	r16,r3,r2
    984c:	0402d00e 	bge	zero,r16,a390 <_strtod_r+0x11b0>
    9850:	814003cc 	andi	r5,r16,15
    9854:	28000f26 	beq	r5,zero,9894 <_strtod_r+0x6b4>
    9858:	280a90fa 	slli	r5,r5,3
    985c:	01000074 	movhi	r4,1
    9860:	21070004 	addi	r4,r4,7168
    9864:	e0800017 	ldw	r2,0(fp)
    9868:	290b883a 	add	r5,r5,r4
    986c:	2a000017 	ldw	r8,0(r5)
    9870:	e0c00117 	ldw	r3,4(fp)
    9874:	2a400117 	ldw	r9,4(r5)
    9878:	1009883a 	mov	r4,r2
    987c:	180b883a 	mov	r5,r3
    9880:	480f883a 	mov	r7,r9
    9884:	400d883a 	mov	r6,r8
    9888:	000d8ac0 	call	d8ac <__muldf3>
    988c:	e0c00115 	stw	r3,4(fp)
    9890:	e0800015 	stw	r2,0(fp)
    9894:	00bffc04 	movi	r2,-16
    9898:	808c703a 	and	r6,r16,r2
    989c:	30005b26 	beq	r6,zero,9a0c <_strtod_r+0x82c>
    98a0:	00804d04 	movi	r2,308
    98a4:	1181fd16 	blt	r2,r6,a09c <_strtod_r+0xebc>
    98a8:	3021d13a 	srai	r16,r6,4
    98ac:	00800044 	movi	r2,1
    98b0:	1403610e 	bge	r2,r16,a638 <_strtod_r+0x1458>
    98b4:	102f883a 	mov	r23,r2
    98b8:	0025883a 	mov	r18,zero
    98bc:	04400074 	movhi	r17,1
    98c0:	8c473204 	addi	r17,r17,7368
    98c4:	8080004c 	andi	r2,r16,1
    98c8:	1005003a 	cmpeq	r2,r2,zero
    98cc:	1000091e 	bne	r2,zero,98f4 <_strtod_r+0x714>
    98d0:	e0800017 	ldw	r2,0(fp)
    98d4:	e0c00117 	ldw	r3,4(fp)
    98d8:	89800017 	ldw	r6,0(r17)
    98dc:	89c00117 	ldw	r7,4(r17)
    98e0:	180b883a 	mov	r5,r3
    98e4:	1009883a 	mov	r4,r2
    98e8:	000d8ac0 	call	d8ac <__muldf3>
    98ec:	e0c00115 	stw	r3,4(fp)
    98f0:	e0800015 	stw	r2,0(fp)
    98f4:	8021d07a 	srai	r16,r16,1
    98f8:	94800044 	addi	r18,r18,1
    98fc:	8c400204 	addi	r17,r17,8
    9900:	bc3ff016 	blt	r23,r16,98c4 <_strtod_r+0x6e4>
    9904:	900e90fa 	slli	r7,r18,3
    9908:	01800074 	movhi	r6,1
    990c:	31873204 	addi	r6,r6,7368
    9910:	e2000117 	ldw	r8,4(fp)
    9914:	398f883a 	add	r7,r7,r6
    9918:	38800017 	ldw	r2,0(r7)
    991c:	38c00117 	ldw	r3,4(r7)
    9920:	e1000017 	ldw	r4,0(fp)
    9924:	01bf2c34 	movhi	r6,64688
    9928:	418d883a 	add	r6,r8,r6
    992c:	300b883a 	mov	r5,r6
    9930:	180f883a 	mov	r7,r3
    9934:	100d883a 	mov	r6,r2
    9938:	000d8ac0 	call	d8ac <__muldf3>
    993c:	1009883a 	mov	r4,r2
    9940:	180b883a 	mov	r5,r3
    9944:	199ffc2c 	andhi	r6,r3,32752
    9948:	009f2834 	movhi	r2,31904
    994c:	e1000015 	stw	r4,0(fp)
    9950:	e1400115 	stw	r5,4(fp)
    9954:	1181d136 	bltu	r2,r6,a09c <_strtod_r+0xebc>
    9958:	009f2434 	movhi	r2,31888
    995c:	1183202e 	bgeu	r2,r6,a5e0 <_strtod_r+0x1400>
    9960:	d8001415 	stw	zero,80(sp)
    9964:	019ffc34 	movhi	r6,32752
    9968:	31bfffc4 	addi	r6,r6,-1
    996c:	01ffffc4 	movi	r7,-1
    9970:	e1800115 	stw	r6,4(fp)
    9974:	e1c00015 	stw	r7,0(fp)
    9978:	00002506 	br	9a10 <_strtod_r+0x830>
    997c:	00800c04 	movi	r2,48
    9980:	2083151e 	bne	r4,r2,a5d8 <_strtod_r+0x13f8>
    9984:	2005883a 	mov	r2,r4
    9988:	000f883a 	mov	r7,zero
    998c:	42000044 	addi	r8,r8,1
    9990:	da000415 	stw	r8,16(sp)
    9994:	41000007 	ldb	r4,0(r8)
    9998:	39c00044 	addi	r7,r7,1
    999c:	20bffb26 	beq	r4,r2,998c <_strtod_r+0x7ac>
    99a0:	20fff3c4 	addi	r3,r4,-49
    99a4:	00800204 	movi	r2,8
    99a8:	10c1b836 	bltu	r2,r3,a08c <_strtod_r+0xeac>
    99ac:	dd800417 	ldw	r22,16(sp)
    99b0:	3815883a 	mov	r10,r7
    99b4:	227ff404 	addi	r9,r4,-48
    99b8:	b011883a 	mov	r8,r22
    99bc:	0027883a 	mov	r19,zero
    99c0:	01c00044 	movi	r7,1
    99c4:	4801fe26 	beq	r9,zero,a1c0 <_strtod_r+0xfe0>
    99c8:	00800044 	movi	r2,1
    99cc:	51d5883a 	add	r10,r10,r7
    99d0:	11c31f0e 	bge	r2,r7,a650 <_strtod_r+0x1470>
    99d4:	1009883a 	mov	r4,r2
    99d8:	9807883a 	mov	r3,r19
    99dc:	02c00204 	movi	r11,8
    99e0:	03000404 	movi	r12,16
    99e4:	00000306 	br	99f4 <_strtod_r+0x814>
    99e8:	a50002a4 	muli	r20,r20,10
    99ec:	21000044 	addi	r4,r4,1
    99f0:	21c1eb26 	beq	r4,r7,a1a0 <_strtod_r+0xfc0>
    99f4:	18c00044 	addi	r3,r3,1
    99f8:	18bfffc4 	addi	r2,r3,-1
    99fc:	58bffa0e 	bge	r11,r2,99e8 <_strtod_r+0x808>
    9a00:	60fffa16 	blt	r12,r3,99ec <_strtod_r+0x80c>
    9a04:	840002a4 	muli	r16,r16,10
    9a08:	003ff806 	br	99ec <_strtod_r+0x80c>
    9a0c:	d8001415 	stw	zero,80(sp)
    9a10:	d9801217 	ldw	r6,72(sp)
    9a14:	a809883a 	mov	r4,r21
    9a18:	b00b883a 	mov	r5,r22
    9a1c:	980f883a 	mov	r7,r19
    9a20:	dd000015 	stw	r20,0(sp)
    9a24:	00083ac0 	call	83ac <__s2b>
    9a28:	d9800f17 	ldw	r6,60(sp)
    9a2c:	11000304 	addi	r4,r2,12
    9a30:	d8801015 	stw	r2,64(sp)
    9a34:	300c803a 	cmplt	r6,r6,zero
    9a38:	d9001715 	stw	r4,92(sp)
    9a3c:	d9801615 	stw	r6,88(sp)
    9a40:	d8801017 	ldw	r2,64(sp)
    9a44:	a809883a 	mov	r4,r21
    9a48:	11400117 	ldw	r5,4(r2)
    9a4c:	0007a580 	call	7a58 <_Balloc>
    9a50:	d8c01017 	ldw	r3,64(sp)
    9a54:	d9401717 	ldw	r5,92(sp)
    9a58:	11000304 	addi	r4,r2,12
    9a5c:	19800417 	ldw	r6,16(r3)
    9a60:	102f883a 	mov	r23,r2
    9a64:	318d883a 	add	r6,r6,r6
    9a68:	318d883a 	add	r6,r6,r6
    9a6c:	31800204 	addi	r6,r6,8
    9a70:	00072c00 	call	72c0 <memcpy>
    9a74:	e2000017 	ldw	r8,0(fp)
    9a78:	e2400117 	ldw	r9,4(fp)
    9a7c:	d9800304 	addi	r6,sp,12
    9a80:	400b883a 	mov	r5,r8
    9a84:	a809883a 	mov	r4,r21
    9a88:	d9c00204 	addi	r7,sp,8
    9a8c:	d9800015 	stw	r6,0(sp)
    9a90:	480d883a 	mov	r6,r9
    9a94:	0007b140 	call	7b14 <__d2b>
    9a98:	a809883a 	mov	r4,r21
    9a9c:	01400044 	movi	r5,1
    9aa0:	d8800515 	stw	r2,20(sp)
    9aa4:	00081500 	call	8150 <__i2b>
    9aa8:	102d883a 	mov	r22,r2
    9aac:	d8801617 	ldw	r2,88(sp)
    9ab0:	1001051e 	bne	r2,zero,9ec8 <_strtod_r+0xce8>
    9ab4:	dd000f17 	ldw	r20,60(sp)
    9ab8:	000f883a 	mov	r7,zero
    9abc:	0013883a 	mov	r9,zero
    9ac0:	a011883a 	mov	r8,r20
    9ac4:	d8800217 	ldw	r2,8(sp)
    9ac8:	1000fd16 	blt	r2,zero,9ec0 <_strtod_r+0xce0>
    9acc:	388f883a 	add	r7,r7,r2
    9ad0:	d9801417 	ldw	r6,80(sp)
    9ad4:	d9400317 	ldw	r5,12(sp)
    9ad8:	00ff0084 	movi	r3,-1022
    9adc:	1189c83a 	sub	r4,r2,r6
    9ae0:	2145883a 	add	r2,r4,r5
    9ae4:	10bfffc4 	addi	r2,r2,-1
    9ae8:	10c09f0e 	bge	r2,r3,9d68 <_strtod_r+0xb88>
    9aec:	21810cc4 	addi	r6,r4,1075
    9af0:	d8c01417 	ldw	r3,80(sp)
    9af4:	4185883a 	add	r2,r8,r6
    9af8:	39a1883a 	add	r16,r7,r6
    9afc:	18a5883a 	add	r18,r3,r2
    9b00:	3807883a 	mov	r3,r7
    9b04:	81c0010e 	bge	r16,r7,9b0c <_strtod_r+0x92c>
    9b08:	8007883a 	mov	r3,r16
    9b0c:	9005883a 	mov	r2,r18
    9b10:	1c80010e 	bge	r3,r18,9b18 <_strtod_r+0x938>
    9b14:	1805883a 	mov	r2,r3
    9b18:	0080e70e 	bge	zero,r2,9eb8 <_strtod_r+0xcd8>
    9b1c:	38a7c83a 	sub	r19,r7,r2
    9b20:	80a1c83a 	sub	r16,r16,r2
    9b24:	90a5c83a 	sub	r18,r18,r2
    9b28:	02400e0e 	bge	zero,r9,9b64 <_strtod_r+0x984>
    9b2c:	480d883a 	mov	r6,r9
    9b30:	b00b883a 	mov	r5,r22
    9b34:	a809883a 	mov	r4,r21
    9b38:	000828c0 	call	828c <__pow5mult>
    9b3c:	d9800517 	ldw	r6,20(sp)
    9b40:	a809883a 	mov	r4,r21
    9b44:	100b883a 	mov	r5,r2
    9b48:	102d883a 	mov	r22,r2
    9b4c:	0007f680 	call	7f68 <__multiply>
    9b50:	d9400517 	ldw	r5,20(sp)
    9b54:	1023883a 	mov	r17,r2
    9b58:	a809883a 	mov	r4,r21
    9b5c:	00074d80 	call	74d8 <_Bfree>
    9b60:	dc400515 	stw	r17,20(sp)
    9b64:	0400050e 	bge	zero,r16,9b7c <_strtod_r+0x99c>
    9b68:	d9400517 	ldw	r5,20(sp)
    9b6c:	800d883a 	mov	r6,r16
    9b70:	a809883a 	mov	r4,r21
    9b74:	0007e1c0 	call	7e1c <__lshift>
    9b78:	d8800515 	stw	r2,20(sp)
    9b7c:	a000741e 	bne	r20,zero,9d50 <_strtod_r+0xb70>
    9b80:	0480050e 	bge	zero,r18,9b98 <_strtod_r+0x9b8>
    9b84:	b80b883a 	mov	r5,r23
    9b88:	900d883a 	mov	r6,r18
    9b8c:	a809883a 	mov	r4,r21
    9b90:	0007e1c0 	call	7e1c <__lshift>
    9b94:	102f883a 	mov	r23,r2
    9b98:	04c0050e 	bge	zero,r19,9bb0 <_strtod_r+0x9d0>
    9b9c:	b00b883a 	mov	r5,r22
    9ba0:	980d883a 	mov	r6,r19
    9ba4:	a809883a 	mov	r4,r21
    9ba8:	0007e1c0 	call	7e1c <__lshift>
    9bac:	102d883a 	mov	r22,r2
    9bb0:	d9400517 	ldw	r5,20(sp)
    9bb4:	a809883a 	mov	r4,r21
    9bb8:	b80d883a 	mov	r6,r23
    9bbc:	0007c900 	call	7c90 <__mdiff>
    9bc0:	11000317 	ldw	r4,12(r2)
    9bc4:	b00b883a 	mov	r5,r22
    9bc8:	10000315 	stw	zero,12(r2)
    9bcc:	d9001315 	stw	r4,76(sp)
    9bd0:	1009883a 	mov	r4,r2
    9bd4:	1029883a 	mov	r20,r2
    9bd8:	00076340 	call	7634 <__mcmp>
    9bdc:	10017c16 	blt	r2,zero,a1d0 <_strtod_r+0xff0>
    9be0:	1001af26 	beq	r2,zero,a2a0 <_strtod_r+0x10c0>
    9be4:	a009883a 	mov	r4,r20
    9be8:	b00b883a 	mov	r5,r22
    9bec:	00078340 	call	7834 <__ratio>
    9bf0:	0011883a 	mov	r8,zero
    9bf4:	02500034 	movhi	r9,16384
    9bf8:	480f883a 	mov	r7,r9
    9bfc:	1009883a 	mov	r4,r2
    9c00:	180b883a 	mov	r5,r3
    9c04:	400d883a 	mov	r6,r8
    9c08:	1021883a 	mov	r16,r2
    9c0c:	1823883a 	mov	r17,r3
    9c10:	000e1700 	call	e170 <__ledf2>
    9c14:	00805716 	blt	zero,r2,9d74 <_strtod_r+0xb94>
    9c18:	d9801317 	ldw	r6,76(sp)
    9c1c:	3025003a 	cmpeq	r18,r6,zero
    9c20:	90008b1e 	bne	r18,zero,9e50 <_strtod_r+0xc70>
    9c24:	008ffc34 	movhi	r2,16368
    9c28:	0021883a 	mov	r16,zero
    9c2c:	1023883a 	mov	r17,r2
    9c30:	d8000715 	stw	zero,28(sp)
    9c34:	d8800815 	stw	r2,32(sp)
    9c38:	e1c00117 	ldw	r7,4(fp)
    9c3c:	009ff834 	movhi	r2,32736
    9c40:	3cdffc2c 	andhi	r19,r7,32752
    9c44:	98805e26 	beq	r19,r2,9dc0 <_strtod_r+0xbe0>
    9c48:	d8801417 	ldw	r2,80(sp)
    9c4c:	10001b26 	beq	r2,zero,9cbc <_strtod_r+0xadc>
    9c50:	0081a834 	movhi	r2,1696
    9c54:	14c01936 	bltu	r2,r19,9cbc <_strtod_r+0xadc>
    9c58:	00bff034 	movhi	r2,65472
    9c5c:	00d07834 	movhi	r3,16864
    9c60:	18ffffc4 	addi	r3,r3,-1
    9c64:	180f883a 	mov	r7,r3
    9c68:	8009883a 	mov	r4,r16
    9c6c:	880b883a 	mov	r5,r17
    9c70:	100d883a 	mov	r6,r2
    9c74:	000e1700 	call	e170 <__ledf2>
    9c78:	00800b16 	blt	zero,r2,9ca8 <_strtod_r+0xac8>
    9c7c:	880b883a 	mov	r5,r17
    9c80:	8009883a 	mov	r4,r16
    9c84:	000c6100 	call	c610 <__fixunsdfsi>
    9c88:	1000df1e 	bne	r2,zero,a008 <_strtod_r+0xe28>
    9c8c:	0021883a 	mov	r16,zero
    9c90:	044ffc34 	movhi	r17,16368
    9c94:	9000d91e 	bne	r18,zero,9ffc <_strtod_r+0xe1c>
    9c98:	8005883a 	mov	r2,r16
    9c9c:	8807883a 	mov	r3,r17
    9ca0:	d8c00815 	stw	r3,32(sp)
    9ca4:	d8800715 	stw	r2,28(sp)
    9ca8:	d8800817 	ldw	r2,32(sp)
    9cac:	00c1ac34 	movhi	r3,1712
    9cb0:	14c5c83a 	sub	r2,r2,r19
    9cb4:	10c5883a 	add	r2,r2,r3
    9cb8:	d8800815 	stw	r2,32(sp)
    9cbc:	e0800017 	ldw	r2,0(fp)
    9cc0:	e0c00117 	ldw	r3,4(fp)
    9cc4:	1009883a 	mov	r4,r2
    9cc8:	180b883a 	mov	r5,r3
    9ccc:	00076940 	call	7694 <__ulp>
    9cd0:	d9800717 	ldw	r6,28(sp)
    9cd4:	d9c00817 	ldw	r7,32(sp)
    9cd8:	180b883a 	mov	r5,r3
    9cdc:	1009883a 	mov	r4,r2
    9ce0:	000d8ac0 	call	d8ac <__muldf3>
    9ce4:	e2000017 	ldw	r8,0(fp)
    9ce8:	e2400117 	ldw	r9,4(fp)
    9cec:	180b883a 	mov	r5,r3
    9cf0:	1009883a 	mov	r4,r2
    9cf4:	480f883a 	mov	r7,r9
    9cf8:	400d883a 	mov	r6,r8
    9cfc:	000d8380 	call	d838 <__adddf3>
    9d00:	e0c00115 	stw	r3,4(fp)
    9d04:	e0800015 	stw	r2,0(fp)
    9d08:	d8c01417 	ldw	r3,80(sp)
    9d0c:	e4800117 	ldw	r18,4(fp)
    9d10:	1800021e 	bne	r3,zero,9d1c <_strtod_r+0xb3c>
    9d14:	909ffc2c 	andhi	r2,r18,32752
    9d18:	98807b26 	beq	r19,r2,9f08 <_strtod_r+0xd28>
    9d1c:	d9400517 	ldw	r5,20(sp)
    9d20:	a809883a 	mov	r4,r21
    9d24:	00074d80 	call	74d8 <_Bfree>
    9d28:	a809883a 	mov	r4,r21
    9d2c:	b80b883a 	mov	r5,r23
    9d30:	00074d80 	call	74d8 <_Bfree>
    9d34:	a809883a 	mov	r4,r21
    9d38:	b00b883a 	mov	r5,r22
    9d3c:	00074d80 	call	74d8 <_Bfree>
    9d40:	a809883a 	mov	r4,r21
    9d44:	a00b883a 	mov	r5,r20
    9d48:	00074d80 	call	74d8 <_Bfree>
    9d4c:	003f3c06 	br	9a40 <_strtod_r+0x860>
    9d50:	b80b883a 	mov	r5,r23
    9d54:	a00d883a 	mov	r6,r20
    9d58:	a809883a 	mov	r4,r21
    9d5c:	000828c0 	call	828c <__pow5mult>
    9d60:	102f883a 	mov	r23,r2
    9d64:	003f8606 	br	9b80 <_strtod_r+0x9a0>
    9d68:	00800d84 	movi	r2,54
    9d6c:	114dc83a 	sub	r6,r2,r5
    9d70:	003f5f06 	br	9af0 <_strtod_r+0x910>
    9d74:	0005883a 	mov	r2,zero
    9d78:	00cff834 	movhi	r3,16352
    9d7c:	880b883a 	mov	r5,r17
    9d80:	8009883a 	mov	r4,r16
    9d84:	100d883a 	mov	r6,r2
    9d88:	180f883a 	mov	r7,r3
    9d8c:	000d8ac0 	call	d8ac <__muldf3>
    9d90:	d9801317 	ldw	r6,76(sp)
    9d94:	1021883a 	mov	r16,r2
    9d98:	1823883a 	mov	r17,r3
    9d9c:	3025003a 	cmpeq	r18,r6,zero
    9da0:	90000126 	beq	r18,zero,9da8 <_strtod_r+0xbc8>
    9da4:	18e0003c 	xorhi	r3,r3,32768
    9da8:	d8800715 	stw	r2,28(sp)
    9dac:	d8c00815 	stw	r3,32(sp)
    9db0:	e1c00117 	ldw	r7,4(fp)
    9db4:	009ff834 	movhi	r2,32736
    9db8:	3cdffc2c 	andhi	r19,r7,32752
    9dbc:	98bfa21e 	bne	r19,r2,9c48 <_strtod_r+0xa68>
    9dc0:	e1000017 	ldw	r4,0(fp)
    9dc4:	01bf2c34 	movhi	r6,64688
    9dc8:	398d883a 	add	r6,r7,r6
    9dcc:	d9000b15 	stw	r4,44(sp)
    9dd0:	d9c00c15 	stw	r7,48(sp)
    9dd4:	300b883a 	mov	r5,r6
    9dd8:	e1800115 	stw	r6,4(fp)
    9ddc:	00076940 	call	7694 <__ulp>
    9de0:	d9800717 	ldw	r6,28(sp)
    9de4:	d9c00817 	ldw	r7,32(sp)
    9de8:	180b883a 	mov	r5,r3
    9dec:	1009883a 	mov	r4,r2
    9df0:	000d8ac0 	call	d8ac <__muldf3>
    9df4:	e2000017 	ldw	r8,0(fp)
    9df8:	e2400117 	ldw	r9,4(fp)
    9dfc:	180b883a 	mov	r5,r3
    9e00:	1009883a 	mov	r4,r2
    9e04:	480f883a 	mov	r7,r9
    9e08:	400d883a 	mov	r6,r8
    9e0c:	000d8380 	call	d838 <__adddf3>
    9e10:	1009883a 	mov	r4,r2
    9e14:	180b883a 	mov	r5,r3
    9e18:	009f2834 	movhi	r2,31904
    9e1c:	10bfffc4 	addi	r2,r2,-1
    9e20:	18dffc2c 	andhi	r3,r3,32752
    9e24:	e1000015 	stw	r4,0(fp)
    9e28:	e1400115 	stw	r5,4(fp)
    9e2c:	10c06f2e 	bgeu	r2,r3,9fec <_strtod_r+0xe0c>
    9e30:	d8800c17 	ldw	r2,48(sp)
    9e34:	011ffc34 	movhi	r4,32752
    9e38:	213fffc4 	addi	r4,r4,-1
    9e3c:	11007a26 	beq	r2,r4,a028 <_strtod_r+0xe48>
    9e40:	01ffffc4 	movi	r7,-1
    9e44:	e1000115 	stw	r4,4(fp)
    9e48:	e1c00015 	stw	r7,0(fp)
    9e4c:	003fb306 	br	9d1c <_strtod_r+0xb3c>
    9e50:	e0c00017 	ldw	r3,0(fp)
    9e54:	1800221e 	bne	r3,zero,9ee0 <_strtod_r+0xd00>
    9e58:	e0800117 	ldw	r2,4(fp)
    9e5c:	00c00434 	movhi	r3,16
    9e60:	18ffffc4 	addi	r3,r3,-1
    9e64:	10c4703a 	and	r2,r2,r3
    9e68:	1000211e 	bne	r2,zero,9ef0 <_strtod_r+0xd10>
    9e6c:	0005883a 	mov	r2,zero
    9e70:	00cffc34 	movhi	r3,16368
    9e74:	180f883a 	mov	r7,r3
    9e78:	8009883a 	mov	r4,r16
    9e7c:	880b883a 	mov	r5,r17
    9e80:	100d883a 	mov	r6,r2
    9e84:	000e0e80 	call	e0e8 <__ltdf2>
    9e88:	10013c16 	blt	r2,zero,a37c <_strtod_r+0x119c>
    9e8c:	0005883a 	mov	r2,zero
    9e90:	00cff834 	movhi	r3,16352
    9e94:	880b883a 	mov	r5,r17
    9e98:	8009883a 	mov	r4,r16
    9e9c:	180f883a 	mov	r7,r3
    9ea0:	100d883a 	mov	r6,r2
    9ea4:	000d8ac0 	call	d8ac <__muldf3>
    9ea8:	1823883a 	mov	r17,r3
    9eac:	1021883a 	mov	r16,r2
    9eb0:	18e0003c 	xorhi	r3,r3,32768
    9eb4:	003fbc06 	br	9da8 <_strtod_r+0xbc8>
    9eb8:	3827883a 	mov	r19,r7
    9ebc:	003f1a06 	br	9b28 <_strtod_r+0x948>
    9ec0:	4091c83a 	sub	r8,r8,r2
    9ec4:	003f0206 	br	9ad0 <_strtod_r+0x8f0>
    9ec8:	d8c00f17 	ldw	r3,60(sp)
    9ecc:	0011883a 	mov	r8,zero
    9ed0:	0029883a 	mov	r20,zero
    9ed4:	00d3c83a 	sub	r9,zero,r3
    9ed8:	480f883a 	mov	r7,r9
    9edc:	003ef906 	br	9ac4 <_strtod_r+0x8e4>
    9ee0:	00800044 	movi	r2,1
    9ee4:	1880021e 	bne	r3,r2,9ef0 <_strtod_r+0xd10>
    9ee8:	e0800117 	ldw	r2,4(fp)
    9eec:	1000a526 	beq	r2,zero,a184 <_strtod_r+0xfa4>
    9ef0:	00affc34 	movhi	r2,49136
    9ef4:	0021883a 	mov	r16,zero
    9ef8:	044ffc34 	movhi	r17,16368
    9efc:	d8800815 	stw	r2,32(sp)
    9f00:	d8000715 	stw	zero,28(sp)
    9f04:	003f4c06 	br	9c38 <_strtod_r+0xa58>
    9f08:	880b883a 	mov	r5,r17
    9f0c:	8009883a 	mov	r4,r16
    9f10:	000e2f00 	call	e2f0 <__fixdfsi>
    9f14:	1009883a 	mov	r4,r2
    9f18:	000e1f80 	call	e1f8 <__floatsidf>
    9f1c:	880b883a 	mov	r5,r17
    9f20:	8009883a 	mov	r4,r16
    9f24:	100d883a 	mov	r6,r2
    9f28:	180f883a 	mov	r7,r3
    9f2c:	000d7b80 	call	d7b8 <__subdf3>
    9f30:	d9001317 	ldw	r4,76(sp)
    9f34:	100b883a 	mov	r5,r2
    9f38:	180d883a 	mov	r6,r3
    9f3c:	1021883a 	mov	r16,r2
    9f40:	1823883a 	mov	r17,r3
    9f44:	2000061e 	bne	r4,zero,9f60 <_strtod_r+0xd80>
    9f48:	e0800017 	ldw	r2,0(fp)
    9f4c:	1000041e 	bne	r2,zero,9f60 <_strtod_r+0xd80>
    9f50:	00c00434 	movhi	r3,16
    9f54:	18ffffc4 	addi	r3,r3,-1
    9f58:	90c4703a 	and	r2,r18,r3
    9f5c:	10004026 	beq	r2,zero,a060 <_strtod_r+0xe80>
    9f60:	00a52834 	movhi	r2,38048
    9f64:	108d6544 	addi	r2,r2,13717
    9f68:	00cff834 	movhi	r3,16352
    9f6c:	18ffffc4 	addi	r3,r3,-1
    9f70:	180f883a 	mov	r7,r3
    9f74:	8009883a 	mov	r4,r16
    9f78:	880b883a 	mov	r5,r17
    9f7c:	100d883a 	mov	r6,r2
    9f80:	000e0e80 	call	e0e8 <__ltdf2>
    9f84:	10000916 	blt	r2,zero,9fac <_strtod_r+0xdcc>
    9f88:	008d6c34 	movhi	r2,13744
    9f8c:	10b94d44 	addi	r2,r2,-6859
    9f90:	00cff834 	movhi	r3,16352
    9f94:	880b883a 	mov	r5,r17
    9f98:	180f883a 	mov	r7,r3
    9f9c:	8009883a 	mov	r4,r16
    9fa0:	100d883a 	mov	r6,r2
    9fa4:	000dfd80 	call	dfd8 <__gtdf2>
    9fa8:	00bf5c0e 	bge	zero,r2,9d1c <_strtod_r+0xb3c>
    9fac:	d9400517 	ldw	r5,20(sp)
    9fb0:	a809883a 	mov	r4,r21
    9fb4:	00074d80 	call	74d8 <_Bfree>
    9fb8:	a809883a 	mov	r4,r21
    9fbc:	b80b883a 	mov	r5,r23
    9fc0:	00074d80 	call	74d8 <_Bfree>
    9fc4:	a809883a 	mov	r4,r21
    9fc8:	b00b883a 	mov	r5,r22
    9fcc:	00074d80 	call	74d8 <_Bfree>
    9fd0:	d9401017 	ldw	r5,64(sp)
    9fd4:	a809883a 	mov	r4,r21
    9fd8:	00074d80 	call	74d8 <_Bfree>
    9fdc:	a809883a 	mov	r4,r21
    9fe0:	a00b883a 	mov	r5,r20
    9fe4:	00074d80 	call	74d8 <_Bfree>
    9fe8:	003cf406 	br	93bc <_strtod_r+0x1dc>
    9fec:	0080d434 	movhi	r2,848
    9ff0:	288d883a 	add	r6,r5,r2
    9ff4:	e1800115 	stw	r6,4(fp)
    9ff8:	003f4306 	br	9d08 <_strtod_r+0xb28>
    9ffc:	8005883a 	mov	r2,r16
    a000:	88e0003c 	xorhi	r3,r17,32768
    a004:	003f2606 	br	9ca0 <_strtod_r+0xac0>
    a008:	1009883a 	mov	r4,r2
    a00c:	000e43c0 	call	e43c <__floatunsidf>
    a010:	1021883a 	mov	r16,r2
    a014:	1823883a 	mov	r17,r3
    a018:	003f1e06 	br	9c94 <_strtod_r+0xab4>
    a01c:	da000417 	ldw	r8,16(sp)
    a020:	39c00044 	addi	r7,r7,1
    a024:	003e6706 	br	99c4 <_strtod_r+0x7e4>
    a028:	d8c00b17 	ldw	r3,44(sp)
    a02c:	00bfffc4 	movi	r2,-1
    a030:	18bf831e 	bne	r3,r2,9e40 <_strtod_r+0xc60>
    a034:	00c00884 	movi	r3,34
    a038:	a8c00015 	stw	r3,0(r21)
    a03c:	009ffc34 	movhi	r2,32752
    a040:	e0800115 	stw	r2,4(fp)
    a044:	e0000015 	stw	zero,0(fp)
    a048:	003fd806 	br	9fac <_strtod_r+0xdcc>
    a04c:	4007883a 	mov	r3,r8
    a050:	000d883a 	mov	r6,zero
    a054:	0029883a 	mov	r20,zero
    a058:	0021883a 	mov	r16,zero
    a05c:	003cc906 	br	9384 <_strtod_r+0x1a4>
    a060:	00a52834 	movhi	r2,38048
    a064:	108d6544 	addi	r2,r2,13717
    a068:	00cff434 	movhi	r3,16336
    a06c:	18ffffc4 	addi	r3,r3,-1
    a070:	2809883a 	mov	r4,r5
    a074:	180f883a 	mov	r7,r3
    a078:	300b883a 	mov	r5,r6
    a07c:	100d883a 	mov	r6,r2
    a080:	000e0e80 	call	e0e8 <__ltdf2>
    a084:	103f250e 	bge	r2,zero,9d1c <_strtod_r+0xb3c>
    a088:	003fc806 	br	9fac <_strtod_r+0xdcc>
    a08c:	0027883a 	mov	r19,zero
    a090:	04800044 	movi	r18,1
    a094:	0015883a 	mov	r10,zero
    a098:	003cc006 	br	939c <_strtod_r+0x1bc>
    a09c:	00800884 	movi	r2,34
    a0a0:	a8800015 	stw	r2,0(r21)
    a0a4:	019ffc34 	movhi	r6,32752
    a0a8:	e1800115 	stw	r6,4(fp)
    a0ac:	e0000015 	stw	zero,0(fp)
    a0b0:	003cc206 	br	93bc <_strtod_r+0x1dc>
    a0b4:	015387c4 	movi	r5,19999
    a0b8:	003d1e06 	br	9534 <_strtod_r+0x354>
    a0bc:	300a90fa 	slli	r5,r6,3
    a0c0:	e0800017 	ldw	r2,0(fp)
    a0c4:	e0c00117 	ldw	r3,4(fp)
    a0c8:	01000074 	movhi	r4,1
    a0cc:	21070004 	addi	r4,r4,7168
    a0d0:	290b883a 	add	r5,r5,r4
    a0d4:	2a000017 	ldw	r8,0(r5)
    a0d8:	2a400117 	ldw	r9,4(r5)
    a0dc:	1009883a 	mov	r4,r2
    a0e0:	180b883a 	mov	r5,r3
    a0e4:	480f883a 	mov	r7,r9
    a0e8:	400d883a 	mov	r6,r8
    a0ec:	000d8ac0 	call	d8ac <__muldf3>
    a0f0:	e0c00115 	stw	r3,4(fp)
    a0f4:	e0800015 	stw	r2,0(fp)
    a0f8:	003cb006 	br	93bc <_strtod_r+0x1dc>
    a0fc:	d8800d17 	ldw	r2,52(sp)
    a100:	e0800015 	stw	r2,0(fp)
    a104:	d8c00e17 	ldw	r3,56(sp)
    a108:	e0c00115 	stw	r3,4(fp)
    a10c:	9880020c 	andi	r2,r19,8
    a110:	103caa26 	beq	r2,zero,93bc <_strtod_r+0x1dc>
    a114:	e0800117 	ldw	r2,4(fp)
    a118:	10a00034 	orhi	r2,r2,32768
    a11c:	e0800115 	stw	r2,4(fp)
    a120:	003ca606 	br	93bc <_strtod_r+0x1dc>
    a124:	009ffc34 	movhi	r2,32752
    a128:	e0800115 	stw	r2,4(fp)
    a12c:	e0000015 	stw	zero,0(fp)
    a130:	003ff606 	br	a10c <_strtod_r+0xf2c>
    a134:	00a00034 	movhi	r2,32768
    a138:	10bfffc4 	addi	r2,r2,-1
    a13c:	00ffffc4 	movi	r3,-1
    a140:	e0800115 	stw	r2,4(fp)
    a144:	e0c00015 	stw	r3,0(fp)
    a148:	003ff006 	br	a10c <_strtod_r+0xf2c>
    a14c:	e0000115 	stw	zero,4(fp)
    a150:	e0000015 	stw	zero,0(fp)
    a154:	003fed06 	br	a10c <_strtod_r+0xf2c>
    a158:	d8800e17 	ldw	r2,56(sp)
    a15c:	29010cc4 	addi	r4,r5,1075
    a160:	00fffc34 	movhi	r3,65520
    a164:	18ffffc4 	addi	r3,r3,-1
    a168:	2008953a 	slli	r4,r4,20
    a16c:	10c4703a 	and	r2,r2,r3
    a170:	d8c00d17 	ldw	r3,52(sp)
    a174:	1104b03a 	or	r2,r2,r4
    a178:	e0800115 	stw	r2,4(fp)
    a17c:	e0c00015 	stw	r3,0(fp)
    a180:	003fe206 	br	a10c <_strtod_r+0xf2c>
    a184:	00800884 	movi	r2,34
    a188:	a8800015 	stw	r2,0(r21)
    a18c:	e0000015 	stw	zero,0(fp)
    a190:	e0000115 	stw	zero,4(fp)
    a194:	003f8506 	br	9fac <_strtod_r+0xdcc>
    a198:	03800044 	movi	r14,1
    a19c:	003d7706 	br	977c <_strtod_r+0x59c>
    a1a0:	99c5883a 	add	r2,r19,r7
    a1a4:	11ffffc4 	addi	r7,r2,-1
    a1a8:	00800204 	movi	r2,8
    a1ac:	3cc00044 	addi	r19,r7,1
    a1b0:	11c0df16 	blt	r2,r7,a530 <_strtod_r+0x1350>
    a1b4:	a08002a4 	muli	r2,r20,10
    a1b8:	000f883a 	mov	r7,zero
    a1bc:	1269883a 	add	r20,r2,r9
    a1c0:	42000044 	addi	r8,r8,1
    a1c4:	da000415 	stw	r8,16(sp)
    a1c8:	41000007 	ldb	r4,0(r8)
    a1cc:	003d3706 	br	96ac <_strtod_r+0x4cc>
    a1d0:	d9801317 	ldw	r6,76(sp)
    a1d4:	3000511e 	bne	r6,zero,a31c <_strtod_r+0x113c>
    a1d8:	e0800017 	ldw	r2,0(fp)
    a1dc:	1000d81e 	bne	r2,zero,a540 <_strtod_r+0x1360>
    a1e0:	e0c00117 	ldw	r3,4(fp)
    a1e4:	01000434 	movhi	r4,16
    a1e8:	213fffc4 	addi	r4,r4,-1
    a1ec:	1904703a 	and	r2,r3,r4
    a1f0:	1000b01e 	bne	r2,zero,a4b4 <_strtod_r+0x12d4>
    a1f4:	18dffc2c 	andhi	r3,r3,32752
    a1f8:	0081ac34 	movhi	r2,1712
    a1fc:	10c1102e 	bgeu	r2,r3,a640 <_strtod_r+0x1460>
    a200:	a0800517 	ldw	r2,20(r20)
    a204:	1000031e 	bne	r2,zero,a214 <_strtod_r+0x1034>
    a208:	a0c00417 	ldw	r3,16(r20)
    a20c:	00800044 	movi	r2,1
    a210:	10c0420e 	bge	r2,r3,a31c <_strtod_r+0x113c>
    a214:	a00b883a 	mov	r5,r20
    a218:	a809883a 	mov	r4,r21
    a21c:	01800044 	movi	r6,1
    a220:	0007e1c0 	call	7e1c <__lshift>
    a224:	1009883a 	mov	r4,r2
    a228:	b00b883a 	mov	r5,r22
    a22c:	1029883a 	mov	r20,r2
    a230:	00076340 	call	7634 <__mcmp>
    a234:	0080c20e 	bge	zero,r2,a540 <_strtod_r+0x1360>
    a238:	e1800117 	ldw	r6,4(fp)
    a23c:	d9001417 	ldw	r4,80(sp)
    a240:	2013003a 	cmpeq	r9,r4,zero
    a244:	4800ef1e 	bne	r9,zero,a604 <_strtod_r+0x1424>
    a248:	30dffc2c 	andhi	r3,r6,32752
    a24c:	0081ac34 	movhi	r2,1712
    a250:	10c0ec36 	bltu	r2,r3,a604 <_strtod_r+0x1424>
    a254:	0080dc34 	movhi	r2,880
    a258:	10ffca2e 	bgeu	r2,r3,a184 <_strtod_r+0xfa4>
    a25c:	e0800017 	ldw	r2,0(fp)
    a260:	e0c00117 	ldw	r3,4(fp)
    a264:	020e5434 	movhi	r8,14672
    a268:	000d883a 	mov	r6,zero
    a26c:	400f883a 	mov	r7,r8
    a270:	180b883a 	mov	r5,r3
    a274:	1009883a 	mov	r4,r2
    a278:	da000c15 	stw	r8,48(sp)
    a27c:	d8000b15 	stw	zero,44(sp)
    a280:	000d8ac0 	call	d8ac <__muldf3>
    a284:	e0800015 	stw	r2,0(fp)
    a288:	e0c00115 	stw	r3,4(fp)
    a28c:	183f471e 	bne	r3,zero,9fac <_strtod_r+0xdcc>
    a290:	103f461e 	bne	r2,zero,9fac <_strtod_r+0xdcc>
    a294:	00800884 	movi	r2,34
    a298:	a8800015 	stw	r2,0(r21)
    a29c:	003f4306 	br	9fac <_strtod_r+0xdcc>
    a2a0:	d8801317 	ldw	r2,76(sp)
    a2a4:	1025003a 	cmpeq	r18,r2,zero
    a2a8:	9000861e 	bne	r18,zero,a4c4 <_strtod_r+0x12e4>
    a2ac:	e1400117 	ldw	r5,4(fp)
    a2b0:	00c00434 	movhi	r3,16
    a2b4:	18ffffc4 	addi	r3,r3,-1
    a2b8:	28c4703a 	and	r2,r5,r3
    a2bc:	10c01b26 	beq	r2,r3,a32c <_strtod_r+0x114c>
    a2c0:	e1c00017 	ldw	r7,0(fp)
    a2c4:	3880004c 	andi	r2,r7,1
    a2c8:	1005003a 	cmpeq	r2,r2,zero
    a2cc:	1000791e 	bne	r2,zero,a4b4 <_strtod_r+0x12d4>
    a2d0:	9000b126 	beq	r18,zero,a598 <_strtod_r+0x13b8>
    a2d4:	e4400117 	ldw	r17,4(fp)
    a2d8:	3809883a 	mov	r4,r7
    a2dc:	3821883a 	mov	r16,r7
    a2e0:	880b883a 	mov	r5,r17
    a2e4:	00076940 	call	7694 <__ulp>
    a2e8:	180f883a 	mov	r7,r3
    a2ec:	880b883a 	mov	r5,r17
    a2f0:	8009883a 	mov	r4,r16
    a2f4:	100d883a 	mov	r6,r2
    a2f8:	000d7b80 	call	d7b8 <__subdf3>
    a2fc:	1009883a 	mov	r4,r2
    a300:	000d883a 	mov	r6,zero
    a304:	000f883a 	mov	r7,zero
    a308:	180b883a 	mov	r5,r3
    a30c:	e0800015 	stw	r2,0(fp)
    a310:	e0c00115 	stw	r3,4(fp)
    a314:	000df500 	call	df50 <__nedf2>
    a318:	103f9a26 	beq	r2,zero,a184 <_strtod_r+0xfa4>
    a31c:	d9001417 	ldw	r4,80(sp)
    a320:	2013003a 	cmpeq	r9,r4,zero
    a324:	483f211e 	bne	r9,zero,9fac <_strtod_r+0xdcc>
    a328:	003fcc06 	br	a25c <_strtod_r+0x107c>
    a32c:	d9001417 	ldw	r4,80(sp)
    a330:	e1c00017 	ldw	r7,0(fp)
    a334:	2013003a 	cmpeq	r9,r4,zero
    a338:	4800bd1e 	bne	r9,zero,a630 <_strtod_r+0x1450>
    a33c:	28dffc2c 	andhi	r3,r5,32752
    a340:	0081a834 	movhi	r2,1696
    a344:	10c0ba36 	bltu	r2,r3,a630 <_strtod_r+0x1450>
    a348:	1804d53a 	srli	r2,r3,20
    a34c:	00c01ac4 	movi	r3,107
    a350:	013fffc4 	movi	r4,-1
    a354:	1887c83a 	sub	r3,r3,r2
    a358:	20c4983a 	sll	r2,r4,r3
    a35c:	11ffd91e 	bne	r2,r7,a2c4 <_strtod_r+0x10e4>
    a360:	28dffc2c 	andhi	r3,r5,32752
    a364:	00800434 	movhi	r2,16
    a368:	188d883a 	add	r6,r3,r2
    a36c:	e1800115 	stw	r6,4(fp)
    a370:	e0000015 	stw	zero,0(fp)
    a374:	483f0d1e 	bne	r9,zero,9fac <_strtod_r+0xdcc>
    a378:	003fb806 	br	a25c <_strtod_r+0x107c>
    a37c:	0021883a 	mov	r16,zero
    a380:	0005883a 	mov	r2,zero
    a384:	044ff834 	movhi	r17,16352
    a388:	00eff834 	movhi	r3,49120
    a38c:	003e8606 	br	9da8 <_strtod_r+0xbc8>
    a390:	803d9e26 	beq	r16,zero,9a0c <_strtod_r+0x82c>
    a394:	0421c83a 	sub	r16,zero,r16
    a398:	814003cc 	andi	r5,r16,15
    a39c:	28000f26 	beq	r5,zero,a3dc <_strtod_r+0x11fc>
    a3a0:	280a90fa 	slli	r5,r5,3
    a3a4:	01000074 	movhi	r4,1
    a3a8:	21070004 	addi	r4,r4,7168
    a3ac:	e0800017 	ldw	r2,0(fp)
    a3b0:	290b883a 	add	r5,r5,r4
    a3b4:	2a000017 	ldw	r8,0(r5)
    a3b8:	e0c00117 	ldw	r3,4(fp)
    a3bc:	2a400117 	ldw	r9,4(r5)
    a3c0:	1009883a 	mov	r4,r2
    a3c4:	180b883a 	mov	r5,r3
    a3c8:	480f883a 	mov	r7,r9
    a3cc:	400d883a 	mov	r6,r8
    a3d0:	000dc700 	call	dc70 <__divdf3>
    a3d4:	e0c00115 	stw	r3,4(fp)
    a3d8:	e0800015 	stw	r2,0(fp)
    a3dc:	8021d13a 	srai	r16,r16,4
    a3e0:	803d8a26 	beq	r16,zero,9a0c <_strtod_r+0x82c>
    a3e4:	008007c4 	movi	r2,31
    a3e8:	14002d16 	blt	r2,r16,a4a0 <_strtod_r+0x12c0>
    a3ec:	8080040c 	andi	r2,r16,16
    a3f0:	10009926 	beq	r2,zero,a658 <_strtod_r+0x1478>
    a3f4:	00801a84 	movi	r2,106
    a3f8:	d8801415 	stw	r2,80(sp)
    a3fc:	0400110e 	bge	zero,r16,a444 <_strtod_r+0x1264>
    a400:	04400074 	movhi	r17,1
    a404:	8c474d04 	addi	r17,r17,7476
    a408:	8080004c 	andi	r2,r16,1
    a40c:	1005003a 	cmpeq	r2,r2,zero
    a410:	1000091e 	bne	r2,zero,a438 <_strtod_r+0x1258>
    a414:	e0800017 	ldw	r2,0(fp)
    a418:	e0c00117 	ldw	r3,4(fp)
    a41c:	89800017 	ldw	r6,0(r17)
    a420:	89c00117 	ldw	r7,4(r17)
    a424:	180b883a 	mov	r5,r3
    a428:	1009883a 	mov	r4,r2
    a42c:	000d8ac0 	call	d8ac <__muldf3>
    a430:	e0c00115 	stw	r3,4(fp)
    a434:	e0800015 	stw	r2,0(fp)
    a438:	8021d07a 	srai	r16,r16,1
    a43c:	8c400204 	addi	r17,r17,8
    a440:	043ff116 	blt	zero,r16,a408 <_strtod_r+0x1228>
    a444:	d8c01417 	ldw	r3,80(sp)
    a448:	18000d26 	beq	r3,zero,a480 <_strtod_r+0x12a0>
    a44c:	e1000117 	ldw	r4,4(fp)
    a450:	00c01ac4 	movi	r3,107
    a454:	209ffc2c 	andhi	r2,r4,32752
    a458:	1004d53a 	srli	r2,r2,20
    a45c:	1887c83a 	sub	r3,r3,r2
    a460:	00c0070e 	bge	zero,r3,a480 <_strtod_r+0x12a0>
    a464:	008007c4 	movi	r2,31
    a468:	10c0900e 	bge	r2,r3,a6ac <_strtod_r+0x14cc>
    a46c:	00800d04 	movi	r2,52
    a470:	e0000015 	stw	zero,0(fp)
    a474:	10c0870e 	bge	r2,r3,a694 <_strtod_r+0x14b4>
    a478:	0180dc34 	movhi	r6,880
    a47c:	e1800115 	stw	r6,4(fp)
    a480:	e0800017 	ldw	r2,0(fp)
    a484:	e0c00117 	ldw	r3,4(fp)
    a488:	000d883a 	mov	r6,zero
    a48c:	000f883a 	mov	r7,zero
    a490:	180b883a 	mov	r5,r3
    a494:	1009883a 	mov	r4,r2
    a498:	000df500 	call	df50 <__nedf2>
    a49c:	103d5c1e 	bne	r2,zero,9a10 <_strtod_r+0x830>
    a4a0:	00800884 	movi	r2,34
    a4a4:	a8800015 	stw	r2,0(r21)
    a4a8:	e0000015 	stw	zero,0(fp)
    a4ac:	e0000115 	stw	zero,4(fp)
    a4b0:	003bc206 	br	93bc <_strtod_r+0x1dc>
    a4b4:	d8801417 	ldw	r2,80(sp)
    a4b8:	1013003a 	cmpeq	r9,r2,zero
    a4bc:	483ebb1e 	bne	r9,zero,9fac <_strtod_r+0xdcc>
    a4c0:	003f6606 	br	a25c <_strtod_r+0x107c>
    a4c4:	e1800117 	ldw	r6,4(fp)
    a4c8:	00c00434 	movhi	r3,16
    a4cc:	18ffffc4 	addi	r3,r3,-1
    a4d0:	30c4703a 	and	r2,r6,r3
    a4d4:	103f7a1e 	bne	r2,zero,a2c0 <_strtod_r+0x10e0>
    a4d8:	e1c00017 	ldw	r7,0(fp)
    a4dc:	383f791e 	bne	r7,zero,a2c4 <_strtod_r+0x10e4>
    a4e0:	003f5606 	br	a23c <_strtod_r+0x105c>
    a4e4:	d9800f17 	ldw	r6,60(sp)
    a4e8:	00bffa84 	movi	r2,-22
    a4ec:	30bcd416 	blt	r6,r2,9840 <_strtod_r+0x660>
    a4f0:	317ffe24 	muli	r5,r6,-8
    a4f4:	01000074 	movhi	r4,1
    a4f8:	21070004 	addi	r4,r4,7168
    a4fc:	e0800017 	ldw	r2,0(fp)
    a500:	290b883a 	add	r5,r5,r4
    a504:	2a000017 	ldw	r8,0(r5)
    a508:	e0c00117 	ldw	r3,4(fp)
    a50c:	2a400117 	ldw	r9,4(r5)
    a510:	1009883a 	mov	r4,r2
    a514:	180b883a 	mov	r5,r3
    a518:	480f883a 	mov	r7,r9
    a51c:	400d883a 	mov	r6,r8
    a520:	000dc700 	call	dc70 <__divdf3>
    a524:	e0c00115 	stw	r3,4(fp)
    a528:	e0800015 	stw	r2,0(fp)
    a52c:	003ba306 	br	93bc <_strtod_r+0x1dc>
    a530:	00800404 	movi	r2,16
    a534:	14c02f0e 	bge	r2,r19,a5f4 <_strtod_r+0x1414>
    a538:	000f883a 	mov	r7,zero
    a53c:	003f2006 	br	a1c0 <_strtod_r+0xfe0>
    a540:	d9801417 	ldw	r6,80(sp)
    a544:	3013003a 	cmpeq	r9,r6,zero
    a548:	483e981e 	bne	r9,zero,9fac <_strtod_r+0xdcc>
    a54c:	003f4306 	br	a25c <_strtod_r+0x107c>
    a550:	00801a44 	movi	r2,105
    a554:	20bc6326 	beq	r4,r2,96e4 <_strtod_r+0x504>
    a558:	00801b84 	movi	r2,110
    a55c:	20bbba1e 	bne	r4,r2,9448 <_strtod_r+0x268>
    a560:	dc000404 	addi	r16,sp,16
    a564:	8009883a 	mov	r4,r16
    a568:	01400074 	movhi	r5,1
    a56c:	29474c04 	addi	r5,r5,7472
    a570:	00091980 	call	9198 <match>
    a574:	103bb426 	beq	r2,zero,9448 <_strtod_r+0x268>
    a578:	d8800417 	ldw	r2,16(sp)
    a57c:	00c00a04 	movi	r3,40
    a580:	11000007 	ldb	r4,0(r2)
    a584:	20c03626 	beq	r4,r3,a660 <_strtod_r+0x1480>
    a588:	01bffe34 	movhi	r6,65528
    a58c:	e1800115 	stw	r6,4(fp)
    a590:	e0000015 	stw	zero,0(fp)
    a594:	003b8906 	br	93bc <_strtod_r+0x1dc>
    a598:	e4400117 	ldw	r17,4(fp)
    a59c:	3809883a 	mov	r4,r7
    a5a0:	3821883a 	mov	r16,r7
    a5a4:	880b883a 	mov	r5,r17
    a5a8:	00076940 	call	7694 <__ulp>
    a5ac:	100d883a 	mov	r6,r2
    a5b0:	880b883a 	mov	r5,r17
    a5b4:	180f883a 	mov	r7,r3
    a5b8:	8009883a 	mov	r4,r16
    a5bc:	000d8380 	call	d838 <__adddf3>
    a5c0:	d9801417 	ldw	r6,80(sp)
    a5c4:	e0c00115 	stw	r3,4(fp)
    a5c8:	e0800015 	stw	r2,0(fp)
    a5cc:	3013003a 	cmpeq	r9,r6,zero
    a5d0:	483e761e 	bne	r9,zero,9fac <_strtod_r+0xdcc>
    a5d4:	003f2106 	br	a25c <_strtod_r+0x107c>
    a5d8:	000f883a 	mov	r7,zero
    a5dc:	003cf006 	br	99a0 <_strtod_r+0x7c0>
    a5e0:	0080d434 	movhi	r2,848
    a5e4:	188d883a 	add	r6,r3,r2
    a5e8:	d8001415 	stw	zero,80(sp)
    a5ec:	e1800115 	stw	r6,4(fp)
    a5f0:	003d0706 	br	9a10 <_strtod_r+0x830>
    a5f4:	808002a4 	muli	r2,r16,10
    a5f8:	000f883a 	mov	r7,zero
    a5fc:	1261883a 	add	r16,r2,r9
    a600:	003eef06 	br	a1c0 <_strtod_r+0xfe0>
    a604:	309ffc2c 	andhi	r2,r6,32752
    a608:	00fffc34 	movhi	r3,65520
    a60c:	10c5883a 	add	r2,r2,r3
    a610:	00c00434 	movhi	r3,16
    a614:	18ffffc4 	addi	r3,r3,-1
    a618:	10ccb03a 	or	r6,r2,r3
    a61c:	01ffffc4 	movi	r7,-1
    a620:	e1800115 	stw	r6,4(fp)
    a624:	e1c00015 	stw	r7,0(fp)
    a628:	483e601e 	bne	r9,zero,9fac <_strtod_r+0xdcc>
    a62c:	003f0b06 	br	a25c <_strtod_r+0x107c>
    a630:	00bfffc4 	movi	r2,-1
    a634:	003f4906 	br	a35c <_strtod_r+0x117c>
    a638:	0025883a 	mov	r18,zero
    a63c:	003cb106 	br	9904 <_strtod_r+0x724>
    a640:	d8c01417 	ldw	r3,80(sp)
    a644:	1813003a 	cmpeq	r9,r3,zero
    a648:	483e581e 	bne	r9,zero,9fac <_strtod_r+0xdcc>
    a64c:	003f0306 	br	a25c <_strtod_r+0x107c>
    a650:	980f883a 	mov	r7,r19
    a654:	003ed406 	br	a1a8 <_strtod_r+0xfc8>
    a658:	d8001415 	stw	zero,80(sp)
    a65c:	003f6706 	br	a3fc <_strtod_r+0x121c>
    a660:	8009883a 	mov	r4,r16
    a664:	01400074 	movhi	r5,1
    a668:	2949bf04 	addi	r5,r5,9980
    a66c:	d9800d04 	addi	r6,sp,52
    a670:	000c1d00 	call	c1d0 <__hexnan>
    a674:	00c00144 	movi	r3,5
    a678:	10ffc31e 	bne	r2,r3,a588 <_strtod_r+0x13a8>
    a67c:	d8800e17 	ldw	r2,56(sp)
    a680:	d9c00d17 	ldw	r7,52(sp)
    a684:	119ffc34 	orhi	r6,r2,32752
    a688:	e1800115 	stw	r6,4(fp)
    a68c:	e1c00015 	stw	r7,0(fp)
    a690:	003b4a06 	br	93bc <_strtod_r+0x1dc>
    a694:	18fff804 	addi	r3,r3,-32
    a698:	00bfffc4 	movi	r2,-1
    a69c:	10c4983a 	sll	r2,r2,r3
    a6a0:	208c703a 	and	r6,r4,r2
    a6a4:	e1800115 	stw	r6,4(fp)
    a6a8:	003f7506 	br	a480 <_strtod_r+0x12a0>
    a6ac:	00bfffc4 	movi	r2,-1
    a6b0:	10c4983a 	sll	r2,r2,r3
    a6b4:	e0c00017 	ldw	r3,0(fp)
    a6b8:	188e703a 	and	r7,r3,r2
    a6bc:	e1c00015 	stw	r7,0(fp)
    a6c0:	003f6f06 	br	a480 <_strtod_r+0x12a0>

0000a6c4 <strtof>:
    a6c4:	defffa04 	addi	sp,sp,-24
    a6c8:	dd000415 	stw	r20,16(sp)
    a6cc:	05000074 	movhi	r20,1
    a6d0:	a50e7f04 	addi	r20,r20,14844
    a6d4:	2007883a 	mov	r3,r4
    a6d8:	a1000017 	ldw	r4,0(r20)
    a6dc:	280d883a 	mov	r6,r5
    a6e0:	180b883a 	mov	r5,r3
    a6e4:	dfc00515 	stw	ra,20(sp)
    a6e8:	dcc00315 	stw	r19,12(sp)
    a6ec:	dc800215 	stw	r18,8(sp)
    a6f0:	dc400115 	stw	r17,4(sp)
    a6f4:	dc000015 	stw	r16,0(sp)
    a6f8:	00091e00 	call	91e0 <_strtod_r>
    a6fc:	180b883a 	mov	r5,r3
    a700:	1009883a 	mov	r4,r2
    a704:	1823883a 	mov	r17,r3
    a708:	1021883a 	mov	r16,r2
    a70c:	000e3c80 	call	e3c8 <__truncdfsf2>
    a710:	1009883a 	mov	r4,r2
    a714:	000b883a 	mov	r5,zero
    a718:	1025883a 	mov	r18,r2
    a71c:	1027883a 	mov	r19,r2
    a720:	000d2400 	call	d240 <__nesf2>
    a724:	000d883a 	mov	r6,zero
    a728:	000f883a 	mov	r7,zero
    a72c:	8009883a 	mov	r4,r16
    a730:	880b883a 	mov	r5,r17
    a734:	10000e1e 	bne	r2,zero,a770 <strtof+0xac>
    a738:	000df500 	call	df50 <__nedf2>
    a73c:	10000c26 	beq	r2,zero,a770 <strtof+0xac>
    a740:	a0c00017 	ldw	r3,0(r20)
    a744:	00800884 	movi	r2,34
    a748:	18800015 	stw	r2,0(r3)
    a74c:	9805883a 	mov	r2,r19
    a750:	dfc00517 	ldw	ra,20(sp)
    a754:	dd000417 	ldw	r20,16(sp)
    a758:	dcc00317 	ldw	r19,12(sp)
    a75c:	dc800217 	ldw	r18,8(sp)
    a760:	dc400117 	ldw	r17,4(sp)
    a764:	dc000017 	ldw	r16,0(sp)
    a768:	dec00604 	addi	sp,sp,24
    a76c:	f800283a 	ret
    a770:	9009883a 	mov	r4,r18
    a774:	015fe034 	movhi	r5,32640
    a778:	297fffc4 	addi	r5,r5,-1
    a77c:	000d2b80 	call	d2b8 <__gtsf2>
    a780:	00ffffc4 	movi	r3,-1
    a784:	011ffc34 	movhi	r4,32752
    a788:	213fffc4 	addi	r4,r4,-1
    a78c:	200f883a 	mov	r7,r4
    a790:	180d883a 	mov	r6,r3
    a794:	8009883a 	mov	r4,r16
    a798:	880b883a 	mov	r5,r17
    a79c:	00800f16 	blt	zero,r2,a7dc <strtof+0x118>
    a7a0:	9009883a 	mov	r4,r18
    a7a4:	017fe034 	movhi	r5,65408
    a7a8:	297fffc4 	addi	r5,r5,-1
    a7ac:	000d3300 	call	d330 <__ltsf2>
    a7b0:	023fffc4 	movi	r8,-1
    a7b4:	027ffc34 	movhi	r9,65520
    a7b8:	4a7fffc4 	addi	r9,r9,-1
    a7bc:	880b883a 	mov	r5,r17
    a7c0:	480f883a 	mov	r7,r9
    a7c4:	8009883a 	mov	r4,r16
    a7c8:	400d883a 	mov	r6,r8
    a7cc:	103fdf0e 	bge	r2,zero,a74c <strtof+0x88>
    a7d0:	000e0e80 	call	e0e8 <__ltdf2>
    a7d4:	103fda0e 	bge	r2,zero,a740 <strtof+0x7c>
    a7d8:	003fdc06 	br	a74c <strtof+0x88>
    a7dc:	000dfd80 	call	dfd8 <__gtdf2>
    a7e0:	00bfd70e 	bge	zero,r2,a740 <strtof+0x7c>
    a7e4:	003fee06 	br	a7a0 <strtof+0xdc>

0000a7e8 <strtod>:
    a7e8:	01800074 	movhi	r6,1
    a7ec:	318e7f04 	addi	r6,r6,14844
    a7f0:	2007883a 	mov	r3,r4
    a7f4:	31000017 	ldw	r4,0(r6)
    a7f8:	280d883a 	mov	r6,r5
    a7fc:	180b883a 	mov	r5,r3
    a800:	00091e01 	jmpi	91e0 <_strtod_r>

0000a804 <_strtol_r>:
    a804:	defff304 	addi	sp,sp,-52
    a808:	00800074 	movhi	r2,1
    a80c:	108e7e04 	addi	r2,r2,14840
    a810:	dcc00615 	stw	r19,24(sp)
    a814:	14c00017 	ldw	r19,0(r2)
    a818:	ddc00a15 	stw	r23,40(sp)
    a81c:	dc000315 	stw	r16,12(sp)
    a820:	dfc00c15 	stw	ra,48(sp)
    a824:	df000b15 	stw	fp,44(sp)
    a828:	dd800915 	stw	r22,36(sp)
    a82c:	dd400815 	stw	r21,32(sp)
    a830:	dd000715 	stw	r20,28(sp)
    a834:	dc800515 	stw	r18,20(sp)
    a838:	dc400415 	stw	r17,16(sp)
    a83c:	282f883a 	mov	r23,r5
    a840:	d9000015 	stw	r4,0(sp)
    a844:	d9800115 	stw	r6,4(sp)
    a848:	2821883a 	mov	r16,r5
    a84c:	84400007 	ldb	r17,0(r16)
    a850:	84000044 	addi	r16,r16,1
    a854:	9c47883a 	add	r3,r19,r17
    a858:	18800003 	ldbu	r2,0(r3)
    a85c:	1080020c 	andi	r2,r2,8
    a860:	103ffa1e 	bne	r2,zero,a84c <_strtol_r+0x48>
    a864:	00800b44 	movi	r2,45
    a868:	88805c26 	beq	r17,r2,a9dc <_strtol_r+0x1d8>
    a86c:	00800ac4 	movi	r2,43
    a870:	88805726 	beq	r17,r2,a9d0 <_strtol_r+0x1cc>
    a874:	0039883a 	mov	fp,zero
    a878:	3807003a 	cmpeq	r3,r7,zero
    a87c:	1800431e 	bne	r3,zero,a98c <_strtol_r+0x188>
    a880:	00800404 	movi	r2,16
    a884:	38804126 	beq	r7,r2,a98c <_strtol_r+0x188>
    a888:	3829883a 	mov	r20,r7
    a88c:	e02cc03a 	cmpne	r22,fp,zero
    a890:	b0004b1e 	bne	r22,zero,a9c0 <_strtol_r+0x1bc>
    a894:	04a00034 	movhi	r18,32768
    a898:	94bfffc4 	addi	r18,r18,-1
    a89c:	9009883a 	mov	r4,r18
    a8a0:	a00b883a 	mov	r5,r20
    a8a4:	d9c00215 	stw	r7,8(sp)
    a8a8:	000e7140 	call	e714 <__umodsi3>
    a8ac:	9009883a 	mov	r4,r18
    a8b0:	a00b883a 	mov	r5,r20
    a8b4:	102b883a 	mov	r21,r2
    a8b8:	000e70c0 	call	e70c <__udivsi3>
    a8bc:	1011883a 	mov	r8,r2
    a8c0:	9c45883a 	add	r2,r19,r17
    a8c4:	11000003 	ldbu	r4,0(r2)
    a8c8:	000b883a 	mov	r5,zero
    a8cc:	000d883a 	mov	r6,zero
    a8d0:	20c0010c 	andi	r3,r4,4
    a8d4:	d9c00217 	ldw	r7,8(sp)
    a8d8:	18000e26 	beq	r3,zero,a914 <_strtol_r+0x110>
    a8dc:	88fff404 	addi	r3,r17,-48
    a8e0:	19c0140e 	bge	r3,r7,a934 <_strtol_r+0x130>
    a8e4:	30003116 	blt	r6,zero,a9ac <_strtol_r+0x1a8>
    a8e8:	41403036 	bltu	r8,r5,a9ac <_strtol_r+0x1a8>
    a8ec:	2a002e26 	beq	r5,r8,a9a8 <_strtol_r+0x1a4>
    a8f0:	2d05383a 	mul	r2,r5,r20
    a8f4:	01800044 	movi	r6,1
    a8f8:	10cb883a 	add	r5,r2,r3
    a8fc:	84400007 	ldb	r17,0(r16)
    a900:	84000044 	addi	r16,r16,1
    a904:	9c45883a 	add	r2,r19,r17
    a908:	11000003 	ldbu	r4,0(r2)
    a90c:	20c0010c 	andi	r3,r4,4
    a910:	183ff21e 	bne	r3,zero,a8dc <_strtol_r+0xd8>
    a914:	208000cc 	andi	r2,r4,3
    a918:	10000626 	beq	r2,zero,a934 <_strtol_r+0x130>
    a91c:	2080004c 	andi	r2,r4,1
    a920:	1005003a 	cmpeq	r2,r2,zero
    a924:	1000231e 	bne	r2,zero,a9b4 <_strtol_r+0x1b0>
    a928:	00800dc4 	movi	r2,55
    a92c:	8887c83a 	sub	r3,r17,r2
    a930:	19ffec16 	blt	r3,r7,a8e4 <_strtol_r+0xe0>
    a934:	30002d16 	blt	r6,zero,a9ec <_strtol_r+0x1e8>
    a938:	b000231e 	bne	r22,zero,a9c8 <_strtol_r+0x1c4>
    a93c:	2807883a 	mov	r3,r5
    a940:	d8800117 	ldw	r2,4(sp)
    a944:	10000426 	beq	r2,zero,a958 <_strtol_r+0x154>
    a948:	30000126 	beq	r6,zero,a950 <_strtol_r+0x14c>
    a94c:	85ffffc4 	addi	r23,r16,-1
    a950:	d9000117 	ldw	r4,4(sp)
    a954:	25c00015 	stw	r23,0(r4)
    a958:	1805883a 	mov	r2,r3
    a95c:	dfc00c17 	ldw	ra,48(sp)
    a960:	df000b17 	ldw	fp,44(sp)
    a964:	ddc00a17 	ldw	r23,40(sp)
    a968:	dd800917 	ldw	r22,36(sp)
    a96c:	dd400817 	ldw	r21,32(sp)
    a970:	dd000717 	ldw	r20,28(sp)
    a974:	dcc00617 	ldw	r19,24(sp)
    a978:	dc800517 	ldw	r18,20(sp)
    a97c:	dc400417 	ldw	r17,16(sp)
    a980:	dc000317 	ldw	r16,12(sp)
    a984:	dec00d04 	addi	sp,sp,52
    a988:	f800283a 	ret
    a98c:	00800c04 	movi	r2,48
    a990:	88801d26 	beq	r17,r2,aa08 <_strtol_r+0x204>
    a994:	183fbc26 	beq	r3,zero,a888 <_strtol_r+0x84>
    a998:	00800c04 	movi	r2,48
    a99c:	88802726 	beq	r17,r2,aa3c <_strtol_r+0x238>
    a9a0:	01c00284 	movi	r7,10
    a9a4:	003fb806 	br	a888 <_strtol_r+0x84>
    a9a8:	a8ffd10e 	bge	r21,r3,a8f0 <_strtol_r+0xec>
    a9ac:	01bfffc4 	movi	r6,-1
    a9b0:	003fd206 	br	a8fc <_strtol_r+0xf8>
    a9b4:	008015c4 	movi	r2,87
    a9b8:	8887c83a 	sub	r3,r17,r2
    a9bc:	003fdc06 	br	a930 <_strtol_r+0x12c>
    a9c0:	04a00034 	movhi	r18,32768
    a9c4:	003fb506 	br	a89c <_strtol_r+0x98>
    a9c8:	0147c83a 	sub	r3,zero,r5
    a9cc:	003fdc06 	br	a940 <_strtol_r+0x13c>
    a9d0:	84400007 	ldb	r17,0(r16)
    a9d4:	84000044 	addi	r16,r16,1
    a9d8:	003fa606 	br	a874 <_strtol_r+0x70>
    a9dc:	84400007 	ldb	r17,0(r16)
    a9e0:	07000044 	movi	fp,1
    a9e4:	84000044 	addi	r16,r16,1
    a9e8:	003fa306 	br	a878 <_strtol_r+0x74>
    a9ec:	e005003a 	cmpeq	r2,fp,zero
    a9f0:	10000f1e 	bne	r2,zero,aa30 <_strtol_r+0x22c>
    a9f4:	00e00034 	movhi	r3,32768
    a9f8:	d9000017 	ldw	r4,0(sp)
    a9fc:	00800884 	movi	r2,34
    aa00:	20800015 	stw	r2,0(r4)
    aa04:	003fce06 	br	a940 <_strtol_r+0x13c>
    aa08:	81000007 	ldb	r4,0(r16)
    aa0c:	00801e04 	movi	r2,120
    aa10:	20800226 	beq	r4,r2,aa1c <_strtol_r+0x218>
    aa14:	00801604 	movi	r2,88
    aa18:	20bfde1e 	bne	r4,r2,a994 <_strtol_r+0x190>
    aa1c:	84400047 	ldb	r17,1(r16)
    aa20:	01c00404 	movi	r7,16
    aa24:	84000084 	addi	r16,r16,2
    aa28:	3829883a 	mov	r20,r7
    aa2c:	003f9706 	br	a88c <_strtol_r+0x88>
    aa30:	00e00034 	movhi	r3,32768
    aa34:	18ffffc4 	addi	r3,r3,-1
    aa38:	003fef06 	br	a9f8 <_strtol_r+0x1f4>
    aa3c:	01c00204 	movi	r7,8
    aa40:	3829883a 	mov	r20,r7
    aa44:	003f9106 	br	a88c <_strtol_r+0x88>

0000aa48 <strtol>:
    aa48:	00800074 	movhi	r2,1
    aa4c:	108e7f04 	addi	r2,r2,14844
    aa50:	2013883a 	mov	r9,r4
    aa54:	11000017 	ldw	r4,0(r2)
    aa58:	2805883a 	mov	r2,r5
    aa5c:	300f883a 	mov	r7,r6
    aa60:	480b883a 	mov	r5,r9
    aa64:	100d883a 	mov	r6,r2
    aa68:	000a8041 	jmpi	a804 <_strtol_r>

0000aa6c <_strtoll_r>:
    aa6c:	defff004 	addi	sp,sp,-64
    aa70:	00800074 	movhi	r2,1
    aa74:	108e7e04 	addi	r2,r2,14840
    aa78:	df000e15 	stw	fp,56(sp)
    aa7c:	17000017 	ldw	fp,0(r2)
    aa80:	ddc00d15 	stw	r23,52(sp)
    aa84:	dd000a15 	stw	r20,40(sp)
    aa88:	dfc00f15 	stw	ra,60(sp)
    aa8c:	dd800c15 	stw	r22,48(sp)
    aa90:	dd400b15 	stw	r21,44(sp)
    aa94:	dcc00915 	stw	r19,36(sp)
    aa98:	dc800815 	stw	r18,32(sp)
    aa9c:	dc400715 	stw	r17,28(sp)
    aaa0:	dc000615 	stw	r16,24(sp)
    aaa4:	d9400315 	stw	r5,12(sp)
    aaa8:	d9000215 	stw	r4,8(sp)
    aaac:	d9800415 	stw	r6,16(sp)
    aab0:	382f883a 	mov	r23,r7
    aab4:	2829883a 	mov	r20,r5
    aab8:	a4c00007 	ldb	r19,0(r20)
    aabc:	a5000044 	addi	r20,r20,1
    aac0:	e4c7883a 	add	r3,fp,r19
    aac4:	18800003 	ldbu	r2,0(r3)
    aac8:	1080020c 	andi	r2,r2,8
    aacc:	103ffa1e 	bne	r2,zero,aab8 <_strtoll_r+0x4c>
    aad0:	00800b44 	movi	r2,45
    aad4:	98808826 	beq	r19,r2,acf8 <_strtoll_r+0x28c>
    aad8:	00800ac4 	movi	r2,43
    aadc:	98808326 	beq	r19,r2,acec <_strtoll_r+0x280>
    aae0:	d8000115 	stw	zero,4(sp)
    aae4:	b807003a 	cmpeq	r3,r23,zero
    aae8:	18005f1e 	bne	r3,zero,ac68 <_strtoll_r+0x1fc>
    aaec:	00800404 	movi	r2,16
    aaf0:	b8805d26 	beq	r23,r2,ac68 <_strtoll_r+0x1fc>
    aaf4:	b82dd7fa 	srai	r22,r23,31
    aaf8:	b82b883a 	mov	r21,r23
    aafc:	d8c00117 	ldw	r3,4(sp)
    ab00:	1806c03a 	cmpne	r3,r3,zero
    ab04:	d8c00515 	stw	r3,20(sp)
    ab08:	1800631e 	bne	r3,zero,ac98 <_strtoll_r+0x22c>
    ab0c:	043fffc4 	movi	r16,-1
    ab10:	04600034 	movhi	r17,32768
    ab14:	8c7fffc4 	addi	r17,r17,-1
    ab18:	880b883a 	mov	r5,r17
    ab1c:	8009883a 	mov	r4,r16
    ab20:	a80d883a 	mov	r6,r21
    ab24:	b00f883a 	mov	r7,r22
    ab28:	000cc900 	call	cc90 <__umoddi3>
    ab2c:	880b883a 	mov	r5,r17
    ab30:	8009883a 	mov	r4,r16
    ab34:	b00f883a 	mov	r7,r22
    ab38:	a80d883a 	mov	r6,r21
    ab3c:	d8800015 	stw	r2,0(sp)
    ab40:	000c6b40 	call	c6b4 <__udivdi3>
    ab44:	1023883a 	mov	r17,r2
    ab48:	e4c5883a 	add	r2,fp,r19
    ab4c:	11000003 	ldbu	r4,0(r2)
    ab50:	1825883a 	mov	r18,r3
    ab54:	0015883a 	mov	r10,zero
    ab58:	20c0010c 	andi	r3,r4,4
    ab5c:	0017883a 	mov	r11,zero
    ab60:	000f883a 	mov	r7,zero
    ab64:	18001a26 	beq	r3,zero,abd0 <_strtoll_r+0x164>
    ab68:	9c3ff404 	addi	r16,r19,-48
    ab6c:	85c0200e 	bge	r16,r23,abf0 <_strtoll_r+0x184>
    ab70:	38003b16 	blt	r7,zero,ac60 <_strtoll_r+0x1f4>
    ab74:	92c03a36 	bltu	r18,r11,ac60 <_strtoll_r+0x1f4>
    ab78:	5c803826 	beq	r11,r18,ac5c <_strtoll_r+0x1f0>
    ab7c:	54404c26 	beq	r10,r17,acb0 <_strtoll_r+0x244>
    ab80:	580b883a 	mov	r5,r11
    ab84:	5009883a 	mov	r4,r10
    ab88:	a80d883a 	mov	r6,r21
    ab8c:	b00f883a 	mov	r7,r22
    ab90:	000c5780 	call	c578 <__muldi3>
    ab94:	8013d7fa 	srai	r9,r16,31
    ab98:	100d883a 	mov	r6,r2
    ab9c:	1405883a 	add	r2,r2,r16
    aba0:	118d803a 	cmpltu	r6,r2,r6
    aba4:	1a47883a 	add	r3,r3,r9
    aba8:	30cd883a 	add	r6,r6,r3
    abac:	1015883a 	mov	r10,r2
    abb0:	3017883a 	mov	r11,r6
    abb4:	01c00044 	movi	r7,1
    abb8:	a4c00007 	ldb	r19,0(r20)
    abbc:	a5000044 	addi	r20,r20,1
    abc0:	e4c5883a 	add	r2,fp,r19
    abc4:	11000003 	ldbu	r4,0(r2)
    abc8:	20c0010c 	andi	r3,r4,4
    abcc:	183fe61e 	bne	r3,zero,ab68 <_strtoll_r+0xfc>
    abd0:	208000cc 	andi	r2,r4,3
    abd4:	10000626 	beq	r2,zero,abf0 <_strtoll_r+0x184>
    abd8:	2080004c 	andi	r2,r4,1
    abdc:	1005003a 	cmpeq	r2,r2,zero
    abe0:	1000301e 	bne	r2,zero,aca4 <_strtoll_r+0x238>
    abe4:	02000dc4 	movi	r8,55
    abe8:	9a21c83a 	sub	r16,r19,r8
    abec:	85ffe016 	blt	r16,r23,ab70 <_strtoll_r+0x104>
    abf0:	38004616 	blt	r7,zero,ad0c <_strtoll_r+0x2a0>
    abf4:	d8800517 	ldw	r2,20(sp)
    abf8:	1000341e 	bne	r2,zero,accc <_strtoll_r+0x260>
    abfc:	500b883a 	mov	r5,r10
    ac00:	580d883a 	mov	r6,r11
    ac04:	d8c00417 	ldw	r3,16(sp)
    ac08:	18000626 	beq	r3,zero,ac24 <_strtoll_r+0x1b8>
    ac0c:	38000226 	beq	r7,zero,ac18 <_strtoll_r+0x1ac>
    ac10:	a53fffc4 	addi	r20,r20,-1
    ac14:	dd000315 	stw	r20,12(sp)
    ac18:	d8c00317 	ldw	r3,12(sp)
    ac1c:	d8800417 	ldw	r2,16(sp)
    ac20:	10c00015 	stw	r3,0(r2)
    ac24:	2805883a 	mov	r2,r5
    ac28:	3007883a 	mov	r3,r6
    ac2c:	dfc00f17 	ldw	ra,60(sp)
    ac30:	df000e17 	ldw	fp,56(sp)
    ac34:	ddc00d17 	ldw	r23,52(sp)
    ac38:	dd800c17 	ldw	r22,48(sp)
    ac3c:	dd400b17 	ldw	r21,44(sp)
    ac40:	dd000a17 	ldw	r20,40(sp)
    ac44:	dcc00917 	ldw	r19,36(sp)
    ac48:	dc800817 	ldw	r18,32(sp)
    ac4c:	dc400717 	ldw	r17,28(sp)
    ac50:	dc000617 	ldw	r16,24(sp)
    ac54:	dec01004 	addi	sp,sp,64
    ac58:	f800283a 	ret
    ac5c:	8abfc72e 	bgeu	r17,r10,ab7c <_strtoll_r+0x110>
    ac60:	01ffffc4 	movi	r7,-1
    ac64:	003fd406 	br	abb8 <_strtoll_r+0x14c>
    ac68:	00800c04 	movi	r2,48
    ac6c:	98803226 	beq	r19,r2,ad38 <_strtoll_r+0x2cc>
    ac70:	183fa026 	beq	r3,zero,aaf4 <_strtoll_r+0x88>
    ac74:	00800c04 	movi	r2,48
    ac78:	98803e26 	beq	r19,r2,ad74 <_strtoll_r+0x308>
    ac7c:	d8c00117 	ldw	r3,4(sp)
    ac80:	05c00284 	movi	r23,10
    ac84:	b82b883a 	mov	r21,r23
    ac88:	1806c03a 	cmpne	r3,r3,zero
    ac8c:	002d883a 	mov	r22,zero
    ac90:	d8c00515 	stw	r3,20(sp)
    ac94:	183f9d26 	beq	r3,zero,ab0c <_strtoll_r+0xa0>
    ac98:	0021883a 	mov	r16,zero
    ac9c:	04600034 	movhi	r17,32768
    aca0:	003f9d06 	br	ab18 <_strtoll_r+0xac>
    aca4:	020015c4 	movi	r8,87
    aca8:	9a21c83a 	sub	r16,r19,r8
    acac:	003fcf06 	br	abec <_strtoll_r+0x180>
    acb0:	5cbfb31e 	bne	r11,r18,ab80 <_strtoll_r+0x114>
    acb4:	d8800017 	ldw	r2,0(sp)
    acb8:	143fb10e 	bge	r2,r16,ab80 <_strtoll_r+0x114>
    acbc:	8815883a 	mov	r10,r17
    acc0:	9017883a 	mov	r11,r18
    acc4:	01ffffc4 	movi	r7,-1
    acc8:	003fbb06 	br	abb8 <_strtoll_r+0x14c>
    accc:	0009883a 	mov	r4,zero
    acd0:	2285c83a 	sub	r2,r4,r10
    acd4:	2089803a 	cmpltu	r4,r4,r2
    acd8:	02c7c83a 	sub	r3,zero,r11
    acdc:	1909c83a 	sub	r4,r3,r4
    ace0:	100b883a 	mov	r5,r2
    ace4:	200d883a 	mov	r6,r4
    ace8:	003fc606 	br	ac04 <_strtoll_r+0x198>
    acec:	a4c00007 	ldb	r19,0(r20)
    acf0:	a5000044 	addi	r20,r20,1
    acf4:	003f7a06 	br	aae0 <_strtoll_r+0x74>
    acf8:	a4c00007 	ldb	r19,0(r20)
    acfc:	00800044 	movi	r2,1
    ad00:	a5000044 	addi	r20,r20,1
    ad04:	d8800115 	stw	r2,4(sp)
    ad08:	003f7606 	br	aae4 <_strtoll_r+0x78>
    ad0c:	d8c00117 	ldw	r3,4(sp)
    ad10:	1805003a 	cmpeq	r2,r3,zero
    ad14:	1000131e 	bne	r2,zero,ad64 <_strtoll_r+0x2f8>
    ad18:	0005883a 	mov	r2,zero
    ad1c:	00e00034 	movhi	r3,32768
    ad20:	100b883a 	mov	r5,r2
    ad24:	180d883a 	mov	r6,r3
    ad28:	d8c00217 	ldw	r3,8(sp)
    ad2c:	00800884 	movi	r2,34
    ad30:	18800015 	stw	r2,0(r3)
    ad34:	003fb306 	br	ac04 <_strtoll_r+0x198>
    ad38:	a1000007 	ldb	r4,0(r20)
    ad3c:	00801e04 	movi	r2,120
    ad40:	20800226 	beq	r4,r2,ad4c <_strtoll_r+0x2e0>
    ad44:	00801604 	movi	r2,88
    ad48:	20bfc91e 	bne	r4,r2,ac70 <_strtoll_r+0x204>
    ad4c:	a4c00047 	ldb	r19,1(r20)
    ad50:	05c00404 	movi	r23,16
    ad54:	b82b883a 	mov	r21,r23
    ad58:	a5000084 	addi	r20,r20,2
    ad5c:	002d883a 	mov	r22,zero
    ad60:	003f6606 	br	aafc <_strtoll_r+0x90>
    ad64:	017fffc4 	movi	r5,-1
    ad68:	01a00034 	movhi	r6,32768
    ad6c:	31bfffc4 	addi	r6,r6,-1
    ad70:	003fed06 	br	ad28 <_strtoll_r+0x2bc>
    ad74:	05c00204 	movi	r23,8
    ad78:	b82b883a 	mov	r21,r23
    ad7c:	002d883a 	mov	r22,zero
    ad80:	003f5e06 	br	aafc <_strtoll_r+0x90>

0000ad84 <_strtoul_r>:
    ad84:	defff604 	addi	sp,sp,-40
    ad88:	00800074 	movhi	r2,1
    ad8c:	108e7e04 	addi	r2,r2,14840
    ad90:	dd000415 	stw	r20,16(sp)
    ad94:	15000017 	ldw	r20,0(r2)
    ad98:	ddc00715 	stw	r23,28(sp)
    ad9c:	dd800615 	stw	r22,24(sp)
    ada0:	dd400515 	stw	r21,20(sp)
    ada4:	dc800215 	stw	r18,8(sp)
    ada8:	dc000015 	stw	r16,0(sp)
    adac:	dfc00915 	stw	ra,36(sp)
    adb0:	df000815 	stw	fp,32(sp)
    adb4:	dcc00315 	stw	r19,12(sp)
    adb8:	dc400115 	stw	r17,4(sp)
    adbc:	282b883a 	mov	r21,r5
    adc0:	202f883a 	mov	r23,r4
    adc4:	302d883a 	mov	r22,r6
    adc8:	3825883a 	mov	r18,r7
    adcc:	2821883a 	mov	r16,r5
    add0:	84400007 	ldb	r17,0(r16)
    add4:	84000044 	addi	r16,r16,1
    add8:	a447883a 	add	r3,r20,r17
    addc:	18800003 	ldbu	r2,0(r3)
    ade0:	1080020c 	andi	r2,r2,8
    ade4:	103ffa1e 	bne	r2,zero,add0 <_strtoul_r+0x4c>
    ade8:	00800b44 	movi	r2,45
    adec:	88805626 	beq	r17,r2,af48 <_strtoul_r+0x1c4>
    adf0:	00800ac4 	movi	r2,43
    adf4:	88805126 	beq	r17,r2,af3c <_strtoul_r+0x1b8>
    adf8:	0039883a 	mov	fp,zero
    adfc:	9007003a 	cmpeq	r3,r18,zero
    ae00:	18003b1e 	bne	r3,zero,aef0 <_strtoul_r+0x16c>
    ae04:	00800404 	movi	r2,16
    ae08:	90803926 	beq	r18,r2,aef0 <_strtoul_r+0x16c>
    ae0c:	013fffc4 	movi	r4,-1
    ae10:	900b883a 	mov	r5,r18
    ae14:	000e70c0 	call	e70c <__udivsi3>
    ae18:	013fffc4 	movi	r4,-1
    ae1c:	900b883a 	mov	r5,r18
    ae20:	1027883a 	mov	r19,r2
    ae24:	000e7140 	call	e714 <__umodsi3>
    ae28:	1011883a 	mov	r8,r2
    ae2c:	900f883a 	mov	r7,r18
    ae30:	a445883a 	add	r2,r20,r17
    ae34:	11000003 	ldbu	r4,0(r2)
    ae38:	000b883a 	mov	r5,zero
    ae3c:	000d883a 	mov	r6,zero
    ae40:	20c0010c 	andi	r3,r4,4
    ae44:	18000e26 	beq	r3,zero,ae80 <_strtoul_r+0xfc>
    ae48:	88fff404 	addi	r3,r17,-48
    ae4c:	1c80140e 	bge	r3,r18,aea0 <_strtoul_r+0x11c>
    ae50:	30003316 	blt	r6,zero,af20 <_strtoul_r+0x19c>
    ae54:	99403236 	bltu	r19,r5,af20 <_strtoul_r+0x19c>
    ae58:	2cc03026 	beq	r5,r19,af1c <_strtoul_r+0x198>
    ae5c:	29c5383a 	mul	r2,r5,r7
    ae60:	01800044 	movi	r6,1
    ae64:	10cb883a 	add	r5,r2,r3
    ae68:	84400007 	ldb	r17,0(r16)
    ae6c:	84000044 	addi	r16,r16,1
    ae70:	a445883a 	add	r2,r20,r17
    ae74:	11000003 	ldbu	r4,0(r2)
    ae78:	20c0010c 	andi	r3,r4,4
    ae7c:	183ff21e 	bne	r3,zero,ae48 <_strtoul_r+0xc4>
    ae80:	208000cc 	andi	r2,r4,3
    ae84:	10000626 	beq	r2,zero,aea0 <_strtoul_r+0x11c>
    ae88:	2080004c 	andi	r2,r4,1
    ae8c:	1005003a 	cmpeq	r2,r2,zero
    ae90:	1000251e 	bne	r2,zero,af28 <_strtoul_r+0x1a4>
    ae94:	00800dc4 	movi	r2,55
    ae98:	8887c83a 	sub	r3,r17,r2
    ae9c:	1cbfec16 	blt	r3,r18,ae50 <_strtoul_r+0xcc>
    aea0:	3000400e 	bge	r6,zero,afa4 <_strtoul_r+0x220>
    aea4:	00800884 	movi	r2,34
    aea8:	017fffc4 	movi	r5,-1
    aeac:	b8800015 	stw	r2,0(r23)
    aeb0:	b0000226 	beq	r22,zero,aebc <_strtoul_r+0x138>
    aeb4:	30001f1e 	bne	r6,zero,af34 <_strtoul_r+0x1b0>
    aeb8:	b5400015 	stw	r21,0(r22)
    aebc:	2805883a 	mov	r2,r5
    aec0:	dfc00917 	ldw	ra,36(sp)
    aec4:	df000817 	ldw	fp,32(sp)
    aec8:	ddc00717 	ldw	r23,28(sp)
    aecc:	dd800617 	ldw	r22,24(sp)
    aed0:	dd400517 	ldw	r21,20(sp)
    aed4:	dd000417 	ldw	r20,16(sp)
    aed8:	dcc00317 	ldw	r19,12(sp)
    aedc:	dc800217 	ldw	r18,8(sp)
    aee0:	dc400117 	ldw	r17,4(sp)
    aee4:	dc000017 	ldw	r16,0(sp)
    aee8:	dec00a04 	addi	sp,sp,40
    aeec:	f800283a 	ret
    aef0:	00800c04 	movi	r2,48
    aef4:	88801826 	beq	r17,r2,af58 <_strtoul_r+0x1d4>
    aef8:	183fc426 	beq	r3,zero,ae0c <_strtoul_r+0x88>
    aefc:	00800c04 	movi	r2,48
    af00:	88802226 	beq	r17,r2,af8c <_strtoul_r+0x208>
    af04:	04800284 	movi	r18,10
    af08:	900f883a 	mov	r7,r18
    af0c:	04c666b4 	movhi	r19,6554
    af10:	9ce66644 	addi	r19,r19,-26215
    af14:	02000144 	movi	r8,5
    af18:	003fc506 	br	ae30 <_strtoul_r+0xac>
    af1c:	40ffcf0e 	bge	r8,r3,ae5c <_strtoul_r+0xd8>
    af20:	01bfffc4 	movi	r6,-1
    af24:	003fd006 	br	ae68 <_strtoul_r+0xe4>
    af28:	008015c4 	movi	r2,87
    af2c:	8887c83a 	sub	r3,r17,r2
    af30:	003fda06 	br	ae9c <_strtoul_r+0x118>
    af34:	857fffc4 	addi	r21,r16,-1
    af38:	003fdf06 	br	aeb8 <_strtoul_r+0x134>
    af3c:	84400007 	ldb	r17,0(r16)
    af40:	84000044 	addi	r16,r16,1
    af44:	003fac06 	br	adf8 <_strtoul_r+0x74>
    af48:	84400007 	ldb	r17,0(r16)
    af4c:	07000044 	movi	fp,1
    af50:	84000044 	addi	r16,r16,1
    af54:	003fa906 	br	adfc <_strtoul_r+0x78>
    af58:	81000007 	ldb	r4,0(r16)
    af5c:	00801e04 	movi	r2,120
    af60:	20800226 	beq	r4,r2,af6c <_strtoul_r+0x1e8>
    af64:	00801604 	movi	r2,88
    af68:	20bfe31e 	bne	r4,r2,aef8 <_strtoul_r+0x174>
    af6c:	84400047 	ldb	r17,1(r16)
    af70:	04800404 	movi	r18,16
    af74:	84000084 	addi	r16,r16,2
    af78:	900f883a 	mov	r7,r18
    af7c:	04c40034 	movhi	r19,4096
    af80:	9cffffc4 	addi	r19,r19,-1
    af84:	020003c4 	movi	r8,15
    af88:	003fa906 	br	ae30 <_strtoul_r+0xac>
    af8c:	04800204 	movi	r18,8
    af90:	900f883a 	mov	r7,r18
    af94:	04c80034 	movhi	r19,8192
    af98:	9cffffc4 	addi	r19,r19,-1
    af9c:	020001c4 	movi	r8,7
    afa0:	003fa306 	br	ae30 <_strtoul_r+0xac>
    afa4:	e005003a 	cmpeq	r2,fp,zero
    afa8:	103fc11e 	bne	r2,zero,aeb0 <_strtoul_r+0x12c>
    afac:	014bc83a 	sub	r5,zero,r5
    afb0:	003fbf06 	br	aeb0 <_strtoul_r+0x12c>

0000afb4 <strtoul>:
    afb4:	00800074 	movhi	r2,1
    afb8:	108e7f04 	addi	r2,r2,14844
    afbc:	2013883a 	mov	r9,r4
    afc0:	11000017 	ldw	r4,0(r2)
    afc4:	2805883a 	mov	r2,r5
    afc8:	300f883a 	mov	r7,r6
    afcc:	480b883a 	mov	r5,r9
    afd0:	100d883a 	mov	r6,r2
    afd4:	000ad841 	jmpi	ad84 <_strtoul_r>

0000afd8 <_strtoull_r>:
    afd8:	defff104 	addi	sp,sp,-60
    afdc:	00800074 	movhi	r2,1
    afe0:	108e7e04 	addi	r2,r2,14840
    afe4:	df000d15 	stw	fp,52(sp)
    afe8:	17000017 	ldw	fp,0(r2)
    afec:	ddc00c15 	stw	r23,48(sp)
    aff0:	dcc00815 	stw	r19,32(sp)
    aff4:	dfc00e15 	stw	ra,56(sp)
    aff8:	dd800b15 	stw	r22,44(sp)
    affc:	dd400a15 	stw	r21,40(sp)
    b000:	dd000915 	stw	r20,36(sp)
    b004:	dc800715 	stw	r18,28(sp)
    b008:	dc400615 	stw	r17,24(sp)
    b00c:	dc000515 	stw	r16,20(sp)
    b010:	d9400215 	stw	r5,8(sp)
    b014:	d9000115 	stw	r4,4(sp)
    b018:	d9800315 	stw	r6,12(sp)
    b01c:	382f883a 	mov	r23,r7
    b020:	2827883a 	mov	r19,r5
    b024:	9d000007 	ldb	r20,0(r19)
    b028:	9cc00044 	addi	r19,r19,1
    b02c:	e507883a 	add	r3,fp,r20
    b030:	18800003 	ldbu	r2,0(r3)
    b034:	1080020c 	andi	r2,r2,8
    b038:	103ffa1e 	bne	r2,zero,b024 <_strtoull_r+0x4c>
    b03c:	00800b44 	movi	r2,45
    b040:	a0807a26 	beq	r20,r2,b22c <_strtoull_r+0x254>
    b044:	00800ac4 	movi	r2,43
    b048:	a0807526 	beq	r20,r2,b220 <_strtoull_r+0x248>
    b04c:	d8000015 	stw	zero,0(sp)
    b050:	b807003a 	cmpeq	r3,r23,zero
    b054:	18005a1e 	bne	r3,zero,b1c0 <_strtoull_r+0x1e8>
    b058:	00800404 	movi	r2,16
    b05c:	b8805826 	beq	r23,r2,b1c0 <_strtoull_r+0x1e8>
    b060:	b82dd7fa 	srai	r22,r23,31
    b064:	043fffc4 	movi	r16,-1
    b068:	8009883a 	mov	r4,r16
    b06c:	800b883a 	mov	r5,r16
    b070:	b80d883a 	mov	r6,r23
    b074:	b00f883a 	mov	r7,r22
    b078:	000c6b40 	call	c6b4 <__udivdi3>
    b07c:	8009883a 	mov	r4,r16
    b080:	800b883a 	mov	r5,r16
    b084:	b80d883a 	mov	r6,r23
    b088:	b00f883a 	mov	r7,r22
    b08c:	1023883a 	mov	r17,r2
    b090:	1825883a 	mov	r18,r3
    b094:	000cc900 	call	cc90 <__umoddi3>
    b098:	b82b883a 	mov	r21,r23
    b09c:	1019883a 	mov	r12,r2
    b0a0:	e505883a 	add	r2,fp,r20
    b0a4:	11000003 	ldbu	r4,0(r2)
    b0a8:	0015883a 	mov	r10,zero
    b0ac:	0017883a 	mov	r11,zero
    b0b0:	20c0010c 	andi	r3,r4,4
    b0b4:	000d883a 	mov	r6,zero
    b0b8:	18001c26 	beq	r3,zero,b12c <_strtoull_r+0x154>
    b0bc:	a43ff404 	addi	r16,r20,-48
    b0c0:	85c0220e 	bge	r16,r23,b14c <_strtoull_r+0x174>
    b0c4:	30003c16 	blt	r6,zero,b1b8 <_strtoull_r+0x1e0>
    b0c8:	92c03b36 	bltu	r18,r11,b1b8 <_strtoull_r+0x1e0>
    b0cc:	5c803926 	beq	r11,r18,b1b4 <_strtoull_r+0x1dc>
    b0d0:	54404c26 	beq	r10,r17,b204 <_strtoull_r+0x22c>
    b0d4:	580b883a 	mov	r5,r11
    b0d8:	5009883a 	mov	r4,r10
    b0dc:	a80d883a 	mov	r6,r21
    b0e0:	b00f883a 	mov	r7,r22
    b0e4:	db000415 	stw	r12,16(sp)
    b0e8:	000c5780 	call	c578 <__muldi3>
    b0ec:	8013d7fa 	srai	r9,r16,31
    b0f0:	100d883a 	mov	r6,r2
    b0f4:	1405883a 	add	r2,r2,r16
    b0f8:	118d803a 	cmpltu	r6,r2,r6
    b0fc:	1a47883a 	add	r3,r3,r9
    b100:	db000417 	ldw	r12,16(sp)
    b104:	30cd883a 	add	r6,r6,r3
    b108:	3017883a 	mov	r11,r6
    b10c:	1015883a 	mov	r10,r2
    b110:	01800044 	movi	r6,1
    b114:	9d000007 	ldb	r20,0(r19)
    b118:	9cc00044 	addi	r19,r19,1
    b11c:	e505883a 	add	r2,fp,r20
    b120:	11000003 	ldbu	r4,0(r2)
    b124:	20c0010c 	andi	r3,r4,4
    b128:	183fe41e 	bne	r3,zero,b0bc <_strtoull_r+0xe4>
    b12c:	208000cc 	andi	r2,r4,3
    b130:	10000626 	beq	r2,zero,b14c <_strtoull_r+0x174>
    b134:	2080004c 	andi	r2,r4,1
    b138:	1005003a 	cmpeq	r2,r2,zero
    b13c:	10002e1e 	bne	r2,zero,b1f8 <_strtoull_r+0x220>
    b140:	02000dc4 	movi	r8,55
    b144:	a221c83a 	sub	r16,r20,r8
    b148:	85ffde16 	blt	r16,r23,b0c4 <_strtoull_r+0xec>
    b14c:	3000530e 	bge	r6,zero,b29c <_strtoull_r+0x2c4>
    b150:	d8c00117 	ldw	r3,4(sp)
    b154:	02bfffc4 	movi	r10,-1
    b158:	00800884 	movi	r2,34
    b15c:	5017883a 	mov	r11,r10
    b160:	18800015 	stw	r2,0(r3)
    b164:	d8800317 	ldw	r2,12(sp)
    b168:	10000426 	beq	r2,zero,b17c <_strtoull_r+0x1a4>
    b16c:	3000291e 	bne	r6,zero,b214 <_strtoull_r+0x23c>
    b170:	d8800217 	ldw	r2,8(sp)
    b174:	d8c00317 	ldw	r3,12(sp)
    b178:	18800015 	stw	r2,0(r3)
    b17c:	5005883a 	mov	r2,r10
    b180:	5807883a 	mov	r3,r11
    b184:	dfc00e17 	ldw	ra,56(sp)
    b188:	df000d17 	ldw	fp,52(sp)
    b18c:	ddc00c17 	ldw	r23,48(sp)
    b190:	dd800b17 	ldw	r22,44(sp)
    b194:	dd400a17 	ldw	r21,40(sp)
    b198:	dd000917 	ldw	r20,36(sp)
    b19c:	dcc00817 	ldw	r19,32(sp)
    b1a0:	dc800717 	ldw	r18,28(sp)
    b1a4:	dc400617 	ldw	r17,24(sp)
    b1a8:	dc000517 	ldw	r16,20(sp)
    b1ac:	dec00f04 	addi	sp,sp,60
    b1b0:	f800283a 	ret
    b1b4:	8abfc62e 	bgeu	r17,r10,b0d0 <_strtoull_r+0xf8>
    b1b8:	01bfffc4 	movi	r6,-1
    b1bc:	003fd506 	br	b114 <_strtoull_r+0x13c>
    b1c0:	00800c04 	movi	r2,48
    b1c4:	a0801e26 	beq	r20,r2,b240 <_strtoull_r+0x268>
    b1c8:	183fa526 	beq	r3,zero,b060 <_strtoull_r+0x88>
    b1cc:	00800c04 	movi	r2,48
    b1d0:	a0802a26 	beq	r20,r2,b27c <_strtoull_r+0x2a4>
    b1d4:	05c00284 	movi	r23,10
    b1d8:	b82b883a 	mov	r21,r23
    b1dc:	046666b4 	movhi	r17,39322
    b1e0:	8c666644 	addi	r17,r17,-26215
    b1e4:	002d883a 	mov	r22,zero
    b1e8:	048666b4 	movhi	r18,6554
    b1ec:	94a66644 	addi	r18,r18,-26215
    b1f0:	03000144 	movi	r12,5
    b1f4:	003faa06 	br	b0a0 <_strtoull_r+0xc8>
    b1f8:	020015c4 	movi	r8,87
    b1fc:	a221c83a 	sub	r16,r20,r8
    b200:	003fd106 	br	b148 <_strtoull_r+0x170>
    b204:	5cbfb31e 	bne	r11,r18,b0d4 <_strtoull_r+0xfc>
    b208:	643fb20e 	bge	r12,r16,b0d4 <_strtoull_r+0xfc>
    b20c:	01bfffc4 	movi	r6,-1
    b210:	003fc006 	br	b114 <_strtoull_r+0x13c>
    b214:	9cffffc4 	addi	r19,r19,-1
    b218:	dcc00215 	stw	r19,8(sp)
    b21c:	003fd406 	br	b170 <_strtoull_r+0x198>
    b220:	9d000007 	ldb	r20,0(r19)
    b224:	9cc00044 	addi	r19,r19,1
    b228:	003f8806 	br	b04c <_strtoull_r+0x74>
    b22c:	9d000007 	ldb	r20,0(r19)
    b230:	00800044 	movi	r2,1
    b234:	9cc00044 	addi	r19,r19,1
    b238:	d8800015 	stw	r2,0(sp)
    b23c:	003f8406 	br	b050 <_strtoull_r+0x78>
    b240:	99000007 	ldb	r4,0(r19)
    b244:	00801e04 	movi	r2,120
    b248:	20800226 	beq	r4,r2,b254 <_strtoull_r+0x27c>
    b24c:	00801604 	movi	r2,88
    b250:	20bfdd1e 	bne	r4,r2,b1c8 <_strtoull_r+0x1f0>
    b254:	9d000047 	ldb	r20,1(r19)
    b258:	05c00404 	movi	r23,16
    b25c:	b82b883a 	mov	r21,r23
    b260:	047fffc4 	movi	r17,-1
    b264:	9cc00084 	addi	r19,r19,2
    b268:	002d883a 	mov	r22,zero
    b26c:	04840034 	movhi	r18,4096
    b270:	94bfffc4 	addi	r18,r18,-1
    b274:	030003c4 	movi	r12,15
    b278:	003f8906 	br	b0a0 <_strtoull_r+0xc8>
    b27c:	05c00204 	movi	r23,8
    b280:	b82b883a 	mov	r21,r23
    b284:	047fffc4 	movi	r17,-1
    b288:	002d883a 	mov	r22,zero
    b28c:	04880034 	movhi	r18,8192
    b290:	94bfffc4 	addi	r18,r18,-1
    b294:	030001c4 	movi	r12,7
    b298:	003f8106 	br	b0a0 <_strtoull_r+0xc8>
    b29c:	d8c00017 	ldw	r3,0(sp)
    b2a0:	1805003a 	cmpeq	r2,r3,zero
    b2a4:	103faf1e 	bne	r2,zero,b164 <_strtoull_r+0x18c>
    b2a8:	0009883a 	mov	r4,zero
    b2ac:	2285c83a 	sub	r2,r4,r10
    b2b0:	02c7c83a 	sub	r3,zero,r11
    b2b4:	2089803a 	cmpltu	r4,r4,r2
    b2b8:	1909c83a 	sub	r4,r3,r4
    b2bc:	1015883a 	mov	r10,r2
    b2c0:	2017883a 	mov	r11,r4
    b2c4:	003fa706 	br	b164 <_strtoull_r+0x18c>

0000b2c8 <__submore>:
    b2c8:	defffa04 	addi	sp,sp,-24
    b2cc:	28c00c17 	ldw	r3,48(r5)
    b2d0:	dc800215 	stw	r18,8(sp)
    b2d4:	2825883a 	mov	r18,r5
    b2d8:	dc000015 	stw	r16,0(sp)
    b2dc:	90801004 	addi	r2,r18,64
    b2e0:	04010004 	movi	r16,1024
    b2e4:	dfc00515 	stw	ra,20(sp)
    b2e8:	dd000415 	stw	r20,16(sp)
    b2ec:	dcc00315 	stw	r19,12(sp)
    b2f0:	dc400115 	stw	r17,4(sp)
    b2f4:	800b883a 	mov	r5,r16
    b2f8:	18801b26 	beq	r3,r2,b368 <__submore+0xa0>
    b2fc:	94400d17 	ldw	r17,52(r18)
    b300:	180b883a 	mov	r5,r3
    b304:	8c69883a 	add	r20,r17,r17
    b308:	a00d883a 	mov	r6,r20
    b30c:	00084cc0 	call	84cc <_realloc_r>
    b310:	1467883a 	add	r19,r2,r17
    b314:	1021883a 	mov	r16,r2
    b318:	880d883a 	mov	r6,r17
    b31c:	9809883a 	mov	r4,r19
    b320:	100b883a 	mov	r5,r2
    b324:	10000e26 	beq	r2,zero,b360 <__submore+0x98>
    b328:	00072c00 	call	72c0 <memcpy>
    b32c:	000d883a 	mov	r6,zero
    b330:	95000d15 	stw	r20,52(r18)
    b334:	94c00015 	stw	r19,0(r18)
    b338:	94000c15 	stw	r16,48(r18)
    b33c:	3005883a 	mov	r2,r6
    b340:	dfc00517 	ldw	ra,20(sp)
    b344:	dd000417 	ldw	r20,16(sp)
    b348:	dcc00317 	ldw	r19,12(sp)
    b34c:	dc800217 	ldw	r18,8(sp)
    b350:	dc400117 	ldw	r17,4(sp)
    b354:	dc000017 	ldw	r16,0(sp)
    b358:	dec00604 	addi	sp,sp,24
    b35c:	f800283a 	ret
    b360:	01bfffc4 	movi	r6,-1
    b364:	003ff506 	br	b33c <__submore+0x74>
    b368:	000699c0 	call	699c <_malloc_r>
    b36c:	1009883a 	mov	r4,r2
    b370:	1140ff44 	addi	r5,r2,1021
    b374:	000d883a 	mov	r6,zero
    b378:	103ff926 	beq	r2,zero,b360 <__submore+0x98>
    b37c:	90801083 	ldbu	r2,66(r18)
    b380:	94000d15 	stw	r16,52(r18)
    b384:	91000c15 	stw	r4,48(r18)
    b388:	28800085 	stb	r2,2(r5)
    b38c:	90c01043 	ldbu	r3,65(r18)
    b390:	28c00045 	stb	r3,1(r5)
    b394:	90801003 	ldbu	r2,64(r18)
    b398:	2080ff45 	stb	r2,1021(r4)
    b39c:	91400015 	stw	r5,0(r18)
    b3a0:	003fe606 	br	b33c <__submore+0x74>

0000b3a4 <_ungetc_r>:
    b3a4:	defffc04 	addi	sp,sp,-16
    b3a8:	00bfffc4 	movi	r2,-1
    b3ac:	dc400215 	stw	r17,8(sp)
    b3b0:	dc000115 	stw	r16,4(sp)
    b3b4:	dfc00315 	stw	ra,12(sp)
    b3b8:	2821883a 	mov	r16,r5
    b3bc:	2023883a 	mov	r17,r4
    b3c0:	28801826 	beq	r5,r2,b424 <_ungetc_r+0x80>
    b3c4:	20000226 	beq	r4,zero,b3d0 <_ungetc_r+0x2c>
    b3c8:	20800e17 	ldw	r2,56(r4)
    b3cc:	10001b26 	beq	r2,zero,b43c <_ungetc_r+0x98>
    b3d0:	3100030b 	ldhu	r4,12(r6)
    b3d4:	00bff7c4 	movi	r2,-33
    b3d8:	2084703a 	and	r2,r4,r2
    b3dc:	117fffcc 	andi	r5,r2,65535
    b3e0:	28c0010c 	andi	r3,r5,4
    b3e4:	1009883a 	mov	r4,r2
    b3e8:	3080030d 	sth	r2,12(r6)
    b3ec:	18003526 	beq	r3,zero,b4c4 <_ungetc_r+0x120>
    b3f0:	30800c17 	ldw	r2,48(r6)
    b3f4:	84003fcc 	andi	r16,r16,255
    b3f8:	10001426 	beq	r2,zero,b44c <_ungetc_r+0xa8>
    b3fc:	30c00117 	ldw	r3,4(r6)
    b400:	30800d17 	ldw	r2,52(r6)
    b404:	1880380e 	bge	r3,r2,b4e8 <_ungetc_r+0x144>
    b408:	30c00017 	ldw	r3,0(r6)
    b40c:	19ffffc4 	addi	r7,r3,-1
    b410:	31c00015 	stw	r7,0(r6)
    b414:	1c3fffc5 	stb	r16,-1(r3)
    b418:	30800117 	ldw	r2,4(r6)
    b41c:	10800044 	addi	r2,r2,1
    b420:	30800115 	stw	r2,4(r6)
    b424:	8005883a 	mov	r2,r16
    b428:	dfc00317 	ldw	ra,12(sp)
    b42c:	dc400217 	ldw	r17,8(sp)
    b430:	dc000117 	ldw	r16,4(sp)
    b434:	dec00404 	addi	sp,sp,16
    b438:	f800283a 	ret
    b43c:	d9800015 	stw	r6,0(sp)
    b440:	00058280 	call	5828 <__sinit>
    b444:	d9800017 	ldw	r6,0(sp)
    b448:	003fe106 	br	b3d0 <_ungetc_r+0x2c>
    b44c:	30800417 	ldw	r2,16(r6)
    b450:	10002326 	beq	r2,zero,b4e0 <_ungetc_r+0x13c>
    b454:	31c00017 	ldw	r7,0(r6)
    b458:	11c0022e 	bgeu	r2,r7,b464 <_ungetc_r+0xc0>
    b45c:	38bfffc3 	ldbu	r2,-1(r7)
    b460:	80801226 	beq	r16,r2,b4ac <_ungetc_r+0x108>
    b464:	30c00117 	ldw	r3,4(r6)
    b468:	00800044 	movi	r2,1
    b46c:	30800115 	stw	r2,4(r6)
    b470:	008000c4 	movi	r2,3
    b474:	31001004 	addi	r4,r6,64
    b478:	31401084 	addi	r5,r6,66
    b47c:	30800d15 	stw	r2,52(r6)
    b480:	8005883a 	mov	r2,r16
    b484:	30c00f15 	stw	r3,60(r6)
    b488:	31c00e15 	stw	r7,56(r6)
    b48c:	31000c15 	stw	r4,48(r6)
    b490:	31400015 	stw	r5,0(r6)
    b494:	34001085 	stb	r16,66(r6)
    b498:	dfc00317 	ldw	ra,12(sp)
    b49c:	dc400217 	ldw	r17,8(sp)
    b4a0:	dc000117 	ldw	r16,4(sp)
    b4a4:	dec00404 	addi	sp,sp,16
    b4a8:	f800283a 	ret
    b4ac:	30800117 	ldw	r2,4(r6)
    b4b0:	39ffffc4 	addi	r7,r7,-1
    b4b4:	31c00015 	stw	r7,0(r6)
    b4b8:	10800044 	addi	r2,r2,1
    b4bc:	30800115 	stw	r2,4(r6)
    b4c0:	003fd806 	br	b424 <_ungetc_r+0x80>
    b4c4:	2880040c 	andi	r2,r5,16
    b4c8:	10000d26 	beq	r2,zero,b500 <_ungetc_r+0x15c>
    b4cc:	2880020c 	andi	r2,r5,8
    b4d0:	10000d1e 	bne	r2,zero,b508 <_ungetc_r+0x164>
    b4d4:	20800114 	ori	r2,r4,4
    b4d8:	3080030d 	sth	r2,12(r6)
    b4dc:	003fc406 	br	b3f0 <_ungetc_r+0x4c>
    b4e0:	31c00017 	ldw	r7,0(r6)
    b4e4:	003fdf06 	br	b464 <_ungetc_r+0xc0>
    b4e8:	300b883a 	mov	r5,r6
    b4ec:	8809883a 	mov	r4,r17
    b4f0:	d9800015 	stw	r6,0(sp)
    b4f4:	000b2c80 	call	b2c8 <__submore>
    b4f8:	d9800017 	ldw	r6,0(sp)
    b4fc:	103fc226 	beq	r2,zero,b408 <_ungetc_r+0x64>
    b500:	043fffc4 	movi	r16,-1
    b504:	003fc706 	br	b424 <_ungetc_r+0x80>
    b508:	300b883a 	mov	r5,r6
    b50c:	8809883a 	mov	r4,r17
    b510:	d9800015 	stw	r6,0(sp)
    b514:	00055900 	call	5590 <_fflush_r>
    b518:	d9800017 	ldw	r6,0(sp)
    b51c:	103ff81e 	bne	r2,zero,b500 <_ungetc_r+0x15c>
    b520:	3100030b 	ldhu	r4,12(r6)
    b524:	00bffdc4 	movi	r2,-9
    b528:	30000215 	stw	zero,8(r6)
    b52c:	2084703a 	and	r2,r4,r2
    b530:	1009883a 	mov	r4,r2
    b534:	3080030d 	sth	r2,12(r6)
    b538:	30000615 	stw	zero,24(r6)
    b53c:	003fe506 	br	b4d4 <_ungetc_r+0x130>

0000b540 <ungetc>:
    b540:	01800074 	movhi	r6,1
    b544:	318e7f04 	addi	r6,r6,14844
    b548:	2007883a 	mov	r3,r4
    b54c:	31000017 	ldw	r4,0(r6)
    b550:	280d883a 	mov	r6,r5
    b554:	180b883a 	mov	r5,r3
    b558:	000b3a41 	jmpi	b3a4 <_ungetc_r>

0000b55c <_write_r>:
    b55c:	defffd04 	addi	sp,sp,-12
    b560:	dc000015 	stw	r16,0(sp)
    b564:	04000074 	movhi	r16,1
    b568:	84156a04 	addi	r16,r16,21928
    b56c:	dc400115 	stw	r17,4(sp)
    b570:	80000015 	stw	zero,0(r16)
    b574:	2023883a 	mov	r17,r4
    b578:	2809883a 	mov	r4,r5
    b57c:	300b883a 	mov	r5,r6
    b580:	380d883a 	mov	r6,r7
    b584:	dfc00215 	stw	ra,8(sp)
    b588:	000f5f00 	call	f5f0 <write>
    b58c:	1007883a 	mov	r3,r2
    b590:	00bfffc4 	movi	r2,-1
    b594:	18800626 	beq	r3,r2,b5b0 <_write_r+0x54>
    b598:	1805883a 	mov	r2,r3
    b59c:	dfc00217 	ldw	ra,8(sp)
    b5a0:	dc400117 	ldw	r17,4(sp)
    b5a4:	dc000017 	ldw	r16,0(sp)
    b5a8:	dec00304 	addi	sp,sp,12
    b5ac:	f800283a 	ret
    b5b0:	80800017 	ldw	r2,0(r16)
    b5b4:	103ff826 	beq	r2,zero,b598 <_write_r+0x3c>
    b5b8:	88800015 	stw	r2,0(r17)
    b5bc:	1805883a 	mov	r2,r3
    b5c0:	dfc00217 	ldw	ra,8(sp)
    b5c4:	dc400117 	ldw	r17,4(sp)
    b5c8:	dc000017 	ldw	r16,0(sp)
    b5cc:	dec00304 	addi	sp,sp,12
    b5d0:	f800283a 	ret

0000b5d4 <_calloc_r>:
    b5d4:	298b383a 	mul	r5,r5,r6
    b5d8:	defffe04 	addi	sp,sp,-8
    b5dc:	dc000015 	stw	r16,0(sp)
    b5e0:	dfc00115 	stw	ra,4(sp)
    b5e4:	000699c0 	call	699c <_malloc_r>
    b5e8:	1021883a 	mov	r16,r2
    b5ec:	01c00904 	movi	r7,36
    b5f0:	10000d26 	beq	r2,zero,b628 <_calloc_r+0x54>
    b5f4:	10ffff17 	ldw	r3,-4(r2)
    b5f8:	1009883a 	mov	r4,r2
    b5fc:	00bfff04 	movi	r2,-4
    b600:	1886703a 	and	r3,r3,r2
    b604:	1887883a 	add	r3,r3,r2
    b608:	180d883a 	mov	r6,r3
    b60c:	000b883a 	mov	r5,zero
    b610:	38c01736 	bltu	r7,r3,b670 <_calloc_r+0x9c>
    b614:	008004c4 	movi	r2,19
    b618:	10c00836 	bltu	r2,r3,b63c <_calloc_r+0x68>
    b61c:	20000215 	stw	zero,8(r4)
    b620:	20000015 	stw	zero,0(r4)
    b624:	20000115 	stw	zero,4(r4)
    b628:	8005883a 	mov	r2,r16
    b62c:	dfc00117 	ldw	ra,4(sp)
    b630:	dc000017 	ldw	r16,0(sp)
    b634:	dec00204 	addi	sp,sp,8
    b638:	f800283a 	ret
    b63c:	008006c4 	movi	r2,27
    b640:	80000015 	stw	zero,0(r16)
    b644:	80000115 	stw	zero,4(r16)
    b648:	81000204 	addi	r4,r16,8
    b64c:	10fff32e 	bgeu	r2,r3,b61c <_calloc_r+0x48>
    b650:	80000215 	stw	zero,8(r16)
    b654:	80000315 	stw	zero,12(r16)
    b658:	81000404 	addi	r4,r16,16
    b65c:	19ffef1e 	bne	r3,r7,b61c <_calloc_r+0x48>
    b660:	81000604 	addi	r4,r16,24
    b664:	80000415 	stw	zero,16(r16)
    b668:	80000515 	stw	zero,20(r16)
    b66c:	003feb06 	br	b61c <_calloc_r+0x48>
    b670:	00074400 	call	7440 <memset>
    b674:	8005883a 	mov	r2,r16
    b678:	dfc00117 	ldw	ra,4(sp)
    b67c:	dc000017 	ldw	r16,0(sp)
    b680:	dec00204 	addi	sp,sp,8
    b684:	f800283a 	ret

0000b688 <_close_r>:
    b688:	defffd04 	addi	sp,sp,-12
    b68c:	dc000015 	stw	r16,0(sp)
    b690:	04000074 	movhi	r16,1
    b694:	84156a04 	addi	r16,r16,21928
    b698:	dc400115 	stw	r17,4(sp)
    b69c:	80000015 	stw	zero,0(r16)
    b6a0:	2023883a 	mov	r17,r4
    b6a4:	2809883a 	mov	r4,r5
    b6a8:	dfc00215 	stw	ra,8(sp)
    b6ac:	000eee40 	call	eee4 <close>
    b6b0:	1007883a 	mov	r3,r2
    b6b4:	00bfffc4 	movi	r2,-1
    b6b8:	18800626 	beq	r3,r2,b6d4 <_close_r+0x4c>
    b6bc:	1805883a 	mov	r2,r3
    b6c0:	dfc00217 	ldw	ra,8(sp)
    b6c4:	dc400117 	ldw	r17,4(sp)
    b6c8:	dc000017 	ldw	r16,0(sp)
    b6cc:	dec00304 	addi	sp,sp,12
    b6d0:	f800283a 	ret
    b6d4:	80800017 	ldw	r2,0(r16)
    b6d8:	103ff826 	beq	r2,zero,b6bc <_close_r+0x34>
    b6dc:	88800015 	stw	r2,0(r17)
    b6e0:	1805883a 	mov	r2,r3
    b6e4:	dfc00217 	ldw	ra,8(sp)
    b6e8:	dc400117 	ldw	r17,4(sp)
    b6ec:	dc000017 	ldw	r16,0(sp)
    b6f0:	dec00304 	addi	sp,sp,12
    b6f4:	f800283a 	ret

0000b6f8 <_fclose_r>:
    b6f8:	defffc04 	addi	sp,sp,-16
    b6fc:	dc400115 	stw	r17,4(sp)
    b700:	dc000015 	stw	r16,0(sp)
    b704:	dfc00315 	stw	ra,12(sp)
    b708:	dc800215 	stw	r18,8(sp)
    b70c:	2821883a 	mov	r16,r5
    b710:	2023883a 	mov	r17,r4
    b714:	28002926 	beq	r5,zero,b7bc <_fclose_r+0xc4>
    b718:	00058180 	call	5818 <__sfp_lock_acquire>
    b71c:	88000226 	beq	r17,zero,b728 <_fclose_r+0x30>
    b720:	88800e17 	ldw	r2,56(r17)
    b724:	10002d26 	beq	r2,zero,b7dc <_fclose_r+0xe4>
    b728:	8080030f 	ldh	r2,12(r16)
    b72c:	10002226 	beq	r2,zero,b7b8 <_fclose_r+0xc0>
    b730:	8809883a 	mov	r4,r17
    b734:	800b883a 	mov	r5,r16
    b738:	00055900 	call	5590 <_fflush_r>
    b73c:	1025883a 	mov	r18,r2
    b740:	80800b17 	ldw	r2,44(r16)
    b744:	10000426 	beq	r2,zero,b758 <_fclose_r+0x60>
    b748:	81400717 	ldw	r5,28(r16)
    b74c:	8809883a 	mov	r4,r17
    b750:	103ee83a 	callr	r2
    b754:	10002a16 	blt	r2,zero,b800 <_fclose_r+0x108>
    b758:	8080030b 	ldhu	r2,12(r16)
    b75c:	1080200c 	andi	r2,r2,128
    b760:	1000231e 	bne	r2,zero,b7f0 <_fclose_r+0xf8>
    b764:	81400c17 	ldw	r5,48(r16)
    b768:	28000526 	beq	r5,zero,b780 <_fclose_r+0x88>
    b76c:	80801004 	addi	r2,r16,64
    b770:	28800226 	beq	r5,r2,b77c <_fclose_r+0x84>
    b774:	8809883a 	mov	r4,r17
    b778:	0005de80 	call	5de8 <_free_r>
    b77c:	80000c15 	stw	zero,48(r16)
    b780:	81401117 	ldw	r5,68(r16)
    b784:	28000326 	beq	r5,zero,b794 <_fclose_r+0x9c>
    b788:	8809883a 	mov	r4,r17
    b78c:	0005de80 	call	5de8 <_free_r>
    b790:	80001115 	stw	zero,68(r16)
    b794:	8000030d 	sth	zero,12(r16)
    b798:	000581c0 	call	581c <__sfp_lock_release>
    b79c:	9005883a 	mov	r2,r18
    b7a0:	dfc00317 	ldw	ra,12(sp)
    b7a4:	dc800217 	ldw	r18,8(sp)
    b7a8:	dc400117 	ldw	r17,4(sp)
    b7ac:	dc000017 	ldw	r16,0(sp)
    b7b0:	dec00404 	addi	sp,sp,16
    b7b4:	f800283a 	ret
    b7b8:	000581c0 	call	581c <__sfp_lock_release>
    b7bc:	0025883a 	mov	r18,zero
    b7c0:	9005883a 	mov	r2,r18
    b7c4:	dfc00317 	ldw	ra,12(sp)
    b7c8:	dc800217 	ldw	r18,8(sp)
    b7cc:	dc400117 	ldw	r17,4(sp)
    b7d0:	dc000017 	ldw	r16,0(sp)
    b7d4:	dec00404 	addi	sp,sp,16
    b7d8:	f800283a 	ret
    b7dc:	8809883a 	mov	r4,r17
    b7e0:	00058280 	call	5828 <__sinit>
    b7e4:	8080030f 	ldh	r2,12(r16)
    b7e8:	103fd11e 	bne	r2,zero,b730 <_fclose_r+0x38>
    b7ec:	003ff206 	br	b7b8 <_fclose_r+0xc0>
    b7f0:	81400417 	ldw	r5,16(r16)
    b7f4:	8809883a 	mov	r4,r17
    b7f8:	0005de80 	call	5de8 <_free_r>
    b7fc:	003fd906 	br	b764 <_fclose_r+0x6c>
    b800:	04bfffc4 	movi	r18,-1
    b804:	003fd406 	br	b758 <_fclose_r+0x60>

0000b808 <fclose>:
    b808:	00800074 	movhi	r2,1
    b80c:	108e7f04 	addi	r2,r2,14844
    b810:	200b883a 	mov	r5,r4
    b814:	11000017 	ldw	r4,0(r2)
    b818:	000b6f81 	jmpi	b6f8 <_fclose_r>

0000b81c <_fstat_r>:
    b81c:	defffd04 	addi	sp,sp,-12
    b820:	dc000015 	stw	r16,0(sp)
    b824:	04000074 	movhi	r16,1
    b828:	84156a04 	addi	r16,r16,21928
    b82c:	dc400115 	stw	r17,4(sp)
    b830:	80000015 	stw	zero,0(r16)
    b834:	2023883a 	mov	r17,r4
    b838:	2809883a 	mov	r4,r5
    b83c:	300b883a 	mov	r5,r6
    b840:	dfc00215 	stw	ra,8(sp)
    b844:	000efc80 	call	efc8 <fstat>
    b848:	1007883a 	mov	r3,r2
    b84c:	00bfffc4 	movi	r2,-1
    b850:	18800626 	beq	r3,r2,b86c <_fstat_r+0x50>
    b854:	1805883a 	mov	r2,r3
    b858:	dfc00217 	ldw	ra,8(sp)
    b85c:	dc400117 	ldw	r17,4(sp)
    b860:	dc000017 	ldw	r16,0(sp)
    b864:	dec00304 	addi	sp,sp,12
    b868:	f800283a 	ret
    b86c:	80800017 	ldw	r2,0(r16)
    b870:	103ff826 	beq	r2,zero,b854 <_fstat_r+0x38>
    b874:	88800015 	stw	r2,0(r17)
    b878:	1805883a 	mov	r2,r3
    b87c:	dfc00217 	ldw	ra,8(sp)
    b880:	dc400117 	ldw	r17,4(sp)
    b884:	dc000017 	ldw	r16,0(sp)
    b888:	dec00304 	addi	sp,sp,12
    b88c:	f800283a 	ret

0000b890 <htinit>:
    b890:	28800003 	ldbu	r2,0(r5)
    b894:	10000626 	beq	r2,zero,b8b0 <htinit+0x20>
    b898:	1105883a 	add	r2,r2,r4
    b89c:	11800005 	stb	r6,0(r2)
    b8a0:	28800043 	ldbu	r2,1(r5)
    b8a4:	31800044 	addi	r6,r6,1
    b8a8:	29400044 	addi	r5,r5,1
    b8ac:	103ffa1e 	bne	r2,zero,b898 <htinit+0x8>
    b8b0:	f800283a 	ret

0000b8b4 <__hexdig_init>:
    b8b4:	defffd04 	addi	sp,sp,-12
    b8b8:	dc400015 	stw	r17,0(sp)
    b8bc:	04400074 	movhi	r17,1
    b8c0:	8c557b04 	addi	r17,r17,21996
    b8c4:	dcc00115 	stw	r19,4(sp)
    b8c8:	8809883a 	mov	r4,r17
    b8cc:	04c00684 	movi	r19,26
    b8d0:	01400074 	movhi	r5,1
    b8d4:	29475704 	addi	r5,r5,7516
    b8d8:	01800404 	movi	r6,16
    b8dc:	dfc00215 	stw	ra,8(sp)
    b8e0:	000b8900 	call	b890 <htinit>
    b8e4:	980d883a 	mov	r6,r19
    b8e8:	8809883a 	mov	r4,r17
    b8ec:	01400074 	movhi	r5,1
    b8f0:	29475a04 	addi	r5,r5,7528
    b8f4:	000b8900 	call	b890 <htinit>
    b8f8:	8809883a 	mov	r4,r17
    b8fc:	980d883a 	mov	r6,r19
    b900:	01400074 	movhi	r5,1
    b904:	29475c04 	addi	r5,r5,7536
    b908:	dfc00217 	ldw	ra,8(sp)
    b90c:	dcc00117 	ldw	r19,4(sp)
    b910:	dc400017 	ldw	r17,0(sp)
    b914:	dec00304 	addi	sp,sp,12
    b918:	000b8901 	jmpi	b890 <htinit>

0000b91c <rshift>:
    b91c:	2807d17a 	srai	r3,r5,5
    b920:	20800417 	ldw	r2,16(r4)
    b924:	22400504 	addi	r9,r4,20
    b928:	480f883a 	mov	r7,r9
    b92c:	1880190e 	bge	r3,r2,b994 <rshift+0x78>
    b930:	1085883a 	add	r2,r2,r2
    b934:	18c7883a 	add	r3,r3,r3
    b938:	1085883a 	add	r2,r2,r2
    b93c:	18c7883a 	add	r3,r3,r3
    b940:	294007cc 	andi	r5,r5,31
    b944:	4891883a 	add	r8,r9,r2
    b948:	48cd883a 	add	r6,r9,r3
    b94c:	28001726 	beq	r5,zero,b9ac <rshift+0x90>
    b950:	30c00017 	ldw	r3,0(r6)
    b954:	00800804 	movi	r2,32
    b958:	31800104 	addi	r6,r6,4
    b95c:	1155c83a 	sub	r10,r2,r5
    b960:	1946d83a 	srl	r3,r3,r5
    b964:	3200092e 	bgeu	r6,r8,b98c <rshift+0x70>
    b968:	30800017 	ldw	r2,0(r6)
    b96c:	1284983a 	sll	r2,r2,r10
    b970:	10c4b03a 	or	r2,r2,r3
    b974:	38800015 	stw	r2,0(r7)
    b978:	30c00017 	ldw	r3,0(r6)
    b97c:	31800104 	addi	r6,r6,4
    b980:	39c00104 	addi	r7,r7,4
    b984:	1946d83a 	srl	r3,r3,r5
    b988:	323ff736 	bltu	r6,r8,b968 <rshift+0x4c>
    b98c:	38c00015 	stw	r3,0(r7)
    b990:	18000c1e 	bne	r3,zero,b9c4 <rshift+0xa8>
    b994:	3a45c83a 	sub	r2,r7,r9
    b998:	1005d0ba 	srai	r2,r2,2
    b99c:	20800415 	stw	r2,16(r4)
    b9a0:	1000011e 	bne	r2,zero,b9a8 <rshift+0x8c>
    b9a4:	20000515 	stw	zero,20(r4)
    b9a8:	f800283a 	ret
    b9ac:	323ff92e 	bgeu	r6,r8,b994 <rshift+0x78>
    b9b0:	30800017 	ldw	r2,0(r6)
    b9b4:	31800104 	addi	r6,r6,4
    b9b8:	38800015 	stw	r2,0(r7)
    b9bc:	39c00104 	addi	r7,r7,4
    b9c0:	003ffa06 	br	b9ac <rshift+0x90>
    b9c4:	39c00104 	addi	r7,r7,4
    b9c8:	003ff206 	br	b994 <rshift+0x78>

0000b9cc <__gethex>:
    b9cc:	defff304 	addi	sp,sp,-52
    b9d0:	dd400815 	stw	r21,32(sp)
    b9d4:	dd000715 	stw	r20,28(sp)
    b9d8:	dcc00615 	stw	r19,24(sp)
    b9dc:	dc400415 	stw	r17,16(sp)
    b9e0:	dfc00c15 	stw	ra,48(sp)
    b9e4:	df000b15 	stw	fp,44(sp)
    b9e8:	ddc00a15 	stw	r23,40(sp)
    b9ec:	dd800915 	stw	r22,36(sp)
    b9f0:	dc800515 	stw	r18,20(sp)
    b9f4:	dc000315 	stw	r16,12(sp)
    b9f8:	04400074 	movhi	r17,1
    b9fc:	8c557b04 	addi	r17,r17,21996
    ba00:	88800c03 	ldbu	r2,48(r17)
    ba04:	202b883a 	mov	r21,r4
    ba08:	2827883a 	mov	r19,r5
    ba0c:	3029883a 	mov	r20,r6
    ba10:	d9c00115 	stw	r7,4(sp)
    ba14:	10006e26 	beq	r2,zero,bbd0 <__gethex+0x204>
    ba18:	99800017 	ldw	r6,0(r19)
    ba1c:	00800c04 	movi	r2,48
    ba20:	31000083 	ldbu	r4,2(r6)
    ba24:	30c00084 	addi	r3,r6,2
    ba28:	20806f1e 	bne	r4,r2,bbe8 <__gethex+0x21c>
    ba2c:	200b883a 	mov	r5,r4
    ba30:	3007883a 	mov	r3,r6
    ba34:	188000c3 	ldbu	r2,3(r3)
    ba38:	18c00044 	addi	r3,r3,1
    ba3c:	1009883a 	mov	r4,r2
    ba40:	117ffc26 	beq	r2,r5,ba34 <__gethex+0x68>
    ba44:	1997c83a 	sub	r11,r3,r6
    ba48:	19400084 	addi	r5,r3,2
    ba4c:	2445883a 	add	r2,r4,r17
    ba50:	10c00003 	ldbu	r3,0(r2)
    ba54:	18002d26 	beq	r3,zero,bb0c <__gethex+0x140>
    ba58:	29000003 	ldbu	r4,0(r5)
    ba5c:	2825883a 	mov	r18,r5
    ba60:	000d883a 	mov	r6,zero
    ba64:	0013883a 	mov	r9,zero
    ba68:	21003fcc 	andi	r4,r4,255
    ba6c:	2445883a 	add	r2,r4,r17
    ba70:	10c00003 	ldbu	r3,0(r2)
    ba74:	18000526 	beq	r3,zero,ba8c <__gethex+0xc0>
    ba78:	29400044 	addi	r5,r5,1
    ba7c:	29000003 	ldbu	r4,0(r5)
    ba80:	2445883a 	add	r2,r4,r17
    ba84:	10c00003 	ldbu	r3,0(r2)
    ba88:	183ffb1e 	bne	r3,zero,ba78 <__gethex+0xac>
    ba8c:	00800b84 	movi	r2,46
    ba90:	20805826 	beq	r4,r2,bbf4 <__gethex+0x228>
    ba94:	30007a26 	beq	r6,zero,bc80 <__gethex+0x2b4>
    ba98:	2985c83a 	sub	r2,r5,r6
    ba9c:	1085883a 	add	r2,r2,r2
    baa0:	1085883a 	add	r2,r2,r2
    baa4:	00adc83a 	sub	r22,zero,r2
    baa8:	2821883a 	mov	r16,r5
    baac:	80c00003 	ldbu	r3,0(r16)
    bab0:	00801404 	movi	r2,80
    bab4:	18801e26 	beq	r3,r2,bb30 <__gethex+0x164>
    bab8:	00801c04 	movi	r2,112
    babc:	18801c26 	beq	r3,r2,bb30 <__gethex+0x164>
    bac0:	800d883a 	mov	r6,r16
    bac4:	4805003a 	cmpeq	r2,r9,zero
    bac8:	99800015 	stw	r6,0(r19)
    bacc:	1000861e 	bne	r2,zero,bce8 <__gethex+0x31c>
    bad0:	58003d26 	beq	r11,zero,bbc8 <__gethex+0x1fc>
    bad4:	0025883a 	mov	r18,zero
    bad8:	9005883a 	mov	r2,r18
    badc:	dfc00c17 	ldw	ra,48(sp)
    bae0:	df000b17 	ldw	fp,44(sp)
    bae4:	ddc00a17 	ldw	r23,40(sp)
    bae8:	dd800917 	ldw	r22,36(sp)
    baec:	dd400817 	ldw	r21,32(sp)
    baf0:	dd000717 	ldw	r20,28(sp)
    baf4:	dcc00617 	ldw	r19,24(sp)
    baf8:	dc800517 	ldw	r18,20(sp)
    bafc:	dc400417 	ldw	r17,16(sp)
    bb00:	dc000317 	ldw	r16,12(sp)
    bb04:	dec00d04 	addi	sp,sp,52
    bb08:	f800283a 	ret
    bb0c:	00800b84 	movi	r2,46
    bb10:	20804a26 	beq	r4,r2,bc3c <__gethex+0x270>
    bb14:	2821883a 	mov	r16,r5
    bb18:	80c00003 	ldbu	r3,0(r16)
    bb1c:	00801404 	movi	r2,80
    bb20:	2825883a 	mov	r18,r5
    bb24:	02400044 	movi	r9,1
    bb28:	002d883a 	mov	r22,zero
    bb2c:	18bfe21e 	bne	r3,r2,bab8 <__gethex+0xec>
    bb30:	80c00043 	ldbu	r3,1(r16)
    bb34:	00800ac4 	movi	r2,43
    bb38:	81000044 	addi	r4,r16,1
    bb3c:	18804a26 	beq	r3,r2,bc68 <__gethex+0x29c>
    bb40:	00800b44 	movi	r2,45
    bb44:	18804c26 	beq	r3,r2,bc78 <__gethex+0x2ac>
    bb48:	0015883a 	mov	r10,zero
    bb4c:	1c45883a 	add	r2,r3,r17
    bb50:	10800003 	ldbu	r2,0(r2)
    bb54:	103fda26 	beq	r2,zero,bac0 <__gethex+0xf4>
    bb58:	02000644 	movi	r8,25
    bb5c:	40bfd816 	blt	r8,r2,bac0 <__gethex+0xf4>
    bb60:	20c00043 	ldbu	r3,1(r4)
    bb64:	11fffc04 	addi	r7,r2,-16
    bb68:	00800074 	movhi	r2,1
    bb6c:	10957b04 	addi	r2,r2,21996
    bb70:	1887883a 	add	r3,r3,r2
    bb74:	18800003 	ldbu	r2,0(r3)
    bb78:	21800044 	addi	r6,r4,1
    bb7c:	10000d26 	beq	r2,zero,bbb4 <__gethex+0x1e8>
    bb80:	100b883a 	mov	r5,r2
    bb84:	4080020e 	bge	r8,r2,bb90 <__gethex+0x1c4>
    bb88:	00000a06 	br	bbb4 <__gethex+0x1e8>
    bb8c:	41000916 	blt	r8,r4,bbb4 <__gethex+0x1e8>
    bb90:	31800044 	addi	r6,r6,1
    bb94:	30800003 	ldbu	r2,0(r6)
    bb98:	38c002a4 	muli	r3,r7,10
    bb9c:	1445883a 	add	r2,r2,r17
    bba0:	11000003 	ldbu	r4,0(r2)
    bba4:	1947883a 	add	r3,r3,r5
    bba8:	19fffc04 	addi	r7,r3,-16
    bbac:	200b883a 	mov	r5,r4
    bbb0:	203ff61e 	bne	r4,zero,bb8c <__gethex+0x1c0>
    bbb4:	5005003a 	cmpeq	r2,r10,zero
    bbb8:	1000011e 	bne	r2,zero,bbc0 <__gethex+0x1f4>
    bbbc:	01cfc83a 	sub	r7,zero,r7
    bbc0:	b1ed883a 	add	r22,r22,r7
    bbc4:	003fbf06 	br	bac4 <__gethex+0xf8>
    bbc8:	04800184 	movi	r18,6
    bbcc:	003fc206 	br	bad8 <__gethex+0x10c>
    bbd0:	000b8b40 	call	b8b4 <__hexdig_init>
    bbd4:	99800017 	ldw	r6,0(r19)
    bbd8:	00800c04 	movi	r2,48
    bbdc:	31000083 	ldbu	r4,2(r6)
    bbe0:	30c00084 	addi	r3,r6,2
    bbe4:	20bf9126 	beq	r4,r2,ba2c <__gethex+0x60>
    bbe8:	180b883a 	mov	r5,r3
    bbec:	0017883a 	mov	r11,zero
    bbf0:	003f9606 	br	ba4c <__gethex+0x80>
    bbf4:	303fa81e 	bne	r6,zero,ba98 <__gethex+0xcc>
    bbf8:	29400044 	addi	r5,r5,1
    bbfc:	28800003 	ldbu	r2,0(r5)
    bc00:	1445883a 	add	r2,r2,r17
    bc04:	10c00003 	ldbu	r3,0(r2)
    bc08:	1800ad26 	beq	r3,zero,bec0 <__gethex+0x4f4>
    bc0c:	2809883a 	mov	r4,r5
    bc10:	21000044 	addi	r4,r4,1
    bc14:	20800003 	ldbu	r2,0(r4)
    bc18:	1445883a 	add	r2,r2,r17
    bc1c:	10c00003 	ldbu	r3,0(r2)
    bc20:	183ffb1e 	bne	r3,zero,bc10 <__gethex+0x244>
    bc24:	2145c83a 	sub	r2,r4,r5
    bc28:	1085883a 	add	r2,r2,r2
    bc2c:	1085883a 	add	r2,r2,r2
    bc30:	00adc83a 	sub	r22,zero,r2
    bc34:	200b883a 	mov	r5,r4
    bc38:	003f9b06 	br	baa8 <__gethex+0xdc>
    bc3c:	29000043 	ldbu	r4,1(r5)
    bc40:	00800074 	movhi	r2,1
    bc44:	10957b04 	addi	r2,r2,21996
    bc48:	2c000044 	addi	r16,r5,1
    bc4c:	2085883a 	add	r2,r4,r2
    bc50:	10c00003 	ldbu	r3,0(r2)
    bc54:	18000d1e 	bne	r3,zero,bc8c <__gethex+0x2c0>
    bc58:	2825883a 	mov	r18,r5
    bc5c:	02400044 	movi	r9,1
    bc60:	002d883a 	mov	r22,zero
    bc64:	003f9106 	br	baac <__gethex+0xe0>
    bc68:	0015883a 	mov	r10,zero
    bc6c:	21000044 	addi	r4,r4,1
    bc70:	20c00003 	ldbu	r3,0(r4)
    bc74:	003fb506 	br	bb4c <__gethex+0x180>
    bc78:	02800044 	movi	r10,1
    bc7c:	003ffb06 	br	bc6c <__gethex+0x2a0>
    bc80:	2821883a 	mov	r16,r5
    bc84:	002d883a 	mov	r22,zero
    bc88:	003f8806 	br	baac <__gethex+0xe0>
    bc8c:	00800c04 	movi	r2,48
    bc90:	20800e1e 	bne	r4,r2,bccc <__gethex+0x300>
    bc94:	2007883a 	mov	r3,r4
    bc98:	800b883a 	mov	r5,r16
    bc9c:	29400044 	addi	r5,r5,1
    bca0:	29000003 	ldbu	r4,0(r5)
    bca4:	20803fcc 	andi	r2,r4,255
    bca8:	10fffc26 	beq	r2,r3,bc9c <__gethex+0x2d0>
    bcac:	1445883a 	add	r2,r2,r17
    bcb0:	10c00003 	ldbu	r3,0(r2)
    bcb4:	1800071e 	bne	r3,zero,bcd4 <__gethex+0x308>
    bcb8:	02c00044 	movi	r11,1
    bcbc:	800d883a 	mov	r6,r16
    bcc0:	2825883a 	mov	r18,r5
    bcc4:	5813883a 	mov	r9,r11
    bcc8:	003f6706 	br	ba68 <__gethex+0x9c>
    bccc:	81000003 	ldbu	r4,0(r16)
    bcd0:	800b883a 	mov	r5,r16
    bcd4:	800d883a 	mov	r6,r16
    bcd8:	2825883a 	mov	r18,r5
    bcdc:	02c00044 	movi	r11,1
    bce0:	0013883a 	mov	r9,zero
    bce4:	003f6006 	br	ba68 <__gethex+0x9c>
    bce8:	8485c83a 	sub	r2,r16,r18
    bcec:	10bfffc4 	addi	r2,r2,-1
    bcf0:	00c001c4 	movi	r3,7
    bcf4:	1880700e 	bge	r3,r2,beb8 <__gethex+0x4ec>
    bcf8:	000b883a 	mov	r5,zero
    bcfc:	1005d07a 	srai	r2,r2,1
    bd00:	29400044 	addi	r5,r5,1
    bd04:	18bffd16 	blt	r3,r2,bcfc <__gethex+0x330>
    bd08:	a809883a 	mov	r4,r21
    bd0c:	0007a580 	call	7a58 <_Balloc>
    bd10:	1027883a 	mov	r19,r2
    bd14:	10800504 	addi	r2,r2,20
    bd18:	d8800215 	stw	r2,8(sp)
    bd1c:	9400522e 	bgeu	r18,r16,be68 <__gethex+0x49c>
    bd20:	da000217 	ldw	r8,8(sp)
    bd24:	800b883a 	mov	r5,r16
    bd28:	000f883a 	mov	r7,zero
    bd2c:	0009883a 	mov	r4,zero
    bd30:	02400b84 	movi	r9,46
    bd34:	02800804 	movi	r10,32
    bd38:	297fffc4 	addi	r5,r5,-1
    bd3c:	28c00003 	ldbu	r3,0(r5)
    bd40:	1a400826 	beq	r3,r9,bd64 <__gethex+0x398>
    bd44:	380d883a 	mov	r6,r7
    bd48:	3a802726 	beq	r7,r10,bde8 <__gethex+0x41c>
    bd4c:	39c00104 	addi	r7,r7,4
    bd50:	1c47883a 	add	r3,r3,r17
    bd54:	18800003 	ldbu	r2,0(r3)
    bd58:	108003cc 	andi	r2,r2,15
    bd5c:	1184983a 	sll	r2,r2,r6
    bd60:	2088b03a 	or	r4,r4,r2
    bd64:	917ff436 	bltu	r18,r5,bd38 <__gethex+0x36c>
    bd68:	d8c00217 	ldw	r3,8(sp)
    bd6c:	40800104 	addi	r2,r8,4
    bd70:	41000015 	stw	r4,0(r8)
    bd74:	10c5c83a 	sub	r2,r2,r3
    bd78:	1021d0ba 	srai	r16,r2,2
    bd7c:	9c000415 	stw	r16,16(r19)
    bd80:	00075000 	call	7500 <__hi0bits>
    bd84:	8006917a 	slli	r3,r16,5
    bd88:	a5c00017 	ldw	r23,0(r20)
    bd8c:	1885c83a 	sub	r2,r3,r2
    bd90:	b8801c16 	blt	r23,r2,be04 <__gethex+0x438>
    bd94:	15c00a16 	blt	r2,r23,bdc0 <__gethex+0x3f4>
    bd98:	0039883a 	mov	fp,zero
    bd9c:	a0800217 	ldw	r2,8(r20)
    bda0:	1580340e 	bge	r2,r22,be74 <__gethex+0x4a8>
    bda4:	a809883a 	mov	r4,r21
    bda8:	980b883a 	mov	r5,r19
    bdac:	00074d80 	call	74d8 <_Bfree>
    bdb0:	d8c00d17 	ldw	r3,52(sp)
    bdb4:	048028c4 	movi	r18,163
    bdb8:	18000015 	stw	zero,0(r3)
    bdbc:	003f4606 	br	bad8 <__gethex+0x10c>
    bdc0:	b8a1c83a 	sub	r16,r23,r2
    bdc4:	980b883a 	mov	r5,r19
    bdc8:	a809883a 	mov	r4,r21
    bdcc:	800d883a 	mov	r6,r16
    bdd0:	0007e1c0 	call	7e1c <__lshift>
    bdd4:	1027883a 	mov	r19,r2
    bdd8:	b42dc83a 	sub	r22,r22,r16
    bddc:	10800504 	addi	r2,r2,20
    bde0:	d8800215 	stw	r2,8(sp)
    bde4:	003fec06 	br	bd98 <__gethex+0x3cc>
    bde8:	41000015 	stw	r4,0(r8)
    bdec:	28c00003 	ldbu	r3,0(r5)
    bdf0:	01c00104 	movi	r7,4
    bdf4:	000d883a 	mov	r6,zero
    bdf8:	41d1883a 	add	r8,r8,r7
    bdfc:	0009883a 	mov	r4,zero
    be00:	003fd306 	br	bd50 <__gethex+0x384>
    be04:	15e1c83a 	sub	r16,r2,r23
    be08:	9809883a 	mov	r4,r19
    be0c:	800b883a 	mov	r5,r16
    be10:	00079d00 	call	79d0 <__any_on>
    be14:	1000061e 	bne	r2,zero,be30 <__gethex+0x464>
    be18:	0039883a 	mov	fp,zero
    be1c:	9809883a 	mov	r4,r19
    be20:	800b883a 	mov	r5,r16
    be24:	000b91c0 	call	b91c <rshift>
    be28:	b42d883a 	add	r22,r22,r16
    be2c:	003fdb06 	br	bd9c <__gethex+0x3d0>
    be30:	817fffc4 	addi	r5,r16,-1
    be34:	2805d17a 	srai	r2,r5,5
    be38:	d8c00217 	ldw	r3,8(sp)
    be3c:	290007cc 	andi	r4,r5,31
    be40:	1085883a 	add	r2,r2,r2
    be44:	1085883a 	add	r2,r2,r2
    be48:	01800044 	movi	r6,1
    be4c:	10c5883a 	add	r2,r2,r3
    be50:	3108983a 	sll	r4,r6,r4
    be54:	10c00017 	ldw	r3,0(r2)
    be58:	20c8703a 	and	r4,r4,r3
    be5c:	20001a1e 	bne	r4,zero,bec8 <__gethex+0x4fc>
    be60:	3039883a 	mov	fp,r6
    be64:	003fed06 	br	be1c <__gethex+0x450>
    be68:	1011883a 	mov	r8,r2
    be6c:	0009883a 	mov	r4,zero
    be70:	003fbd06 	br	bd68 <__gethex+0x39c>
    be74:	a1000117 	ldw	r4,4(r20)
    be78:	b1001a16 	blt	r22,r4,bee4 <__gethex+0x518>
    be7c:	04800044 	movi	r18,1
    be80:	e0000826 	beq	fp,zero,bea4 <__gethex+0x4d8>
    be84:	a1000317 	ldw	r4,12(r20)
    be88:	00800084 	movi	r2,2
    be8c:	20809426 	beq	r4,r2,c0e0 <__gethex+0x714>
    be90:	008000c4 	movi	r2,3
    be94:	20805826 	beq	r4,r2,bff8 <__gethex+0x62c>
    be98:	00800044 	movi	r2,1
    be9c:	20803f26 	beq	r4,r2,bf9c <__gethex+0x5d0>
    bea0:	94800414 	ori	r18,r18,16
    bea4:	d8800d17 	ldw	r2,52(sp)
    bea8:	d8c00117 	ldw	r3,4(sp)
    beac:	14c00015 	stw	r19,0(r2)
    beb0:	1d800015 	stw	r22,0(r3)
    beb4:	003f0806 	br	bad8 <__gethex+0x10c>
    beb8:	000b883a 	mov	r5,zero
    bebc:	003f9206 	br	bd08 <__gethex+0x33c>
    bec0:	002d883a 	mov	r22,zero
    bec4:	003ef806 	br	baa8 <__gethex+0xdc>
    bec8:	3140160e 	bge	r6,r5,bf24 <__gethex+0x558>
    becc:	9809883a 	mov	r4,r19
    bed0:	817fff84 	addi	r5,r16,-2
    bed4:	00079d00 	call	79d0 <__any_on>
    bed8:	10001226 	beq	r2,zero,bf24 <__gethex+0x558>
    bedc:	070000c4 	movi	fp,3
    bee0:	003fce06 	br	be1c <__gethex+0x450>
    bee4:	25a3c83a 	sub	r17,r4,r22
    bee8:	8dc01016 	blt	r17,r23,bf2c <__gethex+0x560>
    beec:	a0c00317 	ldw	r3,12(r20)
    bef0:	00800084 	movi	r2,2
    bef4:	18809326 	beq	r3,r2,c144 <__gethex+0x778>
    bef8:	008000c4 	movi	r2,3
    befc:	18808e26 	beq	r3,r2,c138 <__gethex+0x76c>
    bf00:	00800044 	movi	r2,1
    bf04:	18807b26 	beq	r3,r2,c0f4 <__gethex+0x728>
    bf08:	a809883a 	mov	r4,r21
    bf0c:	980b883a 	mov	r5,r19
    bf10:	00074d80 	call	74d8 <_Bfree>
    bf14:	d8c00d17 	ldw	r3,52(sp)
    bf18:	04801404 	movi	r18,80
    bf1c:	18000015 	stw	zero,0(r3)
    bf20:	003eed06 	br	bad8 <__gethex+0x10c>
    bf24:	07000084 	movi	fp,2
    bf28:	003fbc06 	br	be1c <__gethex+0x450>
    bf2c:	8c3fffc4 	addi	r16,r17,-1
    bf30:	e0001426 	beq	fp,zero,bf84 <__gethex+0x5b8>
    bf34:	07000044 	movi	fp,1
    bf38:	8005d17a 	srai	r2,r16,5
    bf3c:	d8c00217 	ldw	r3,8(sp)
    bf40:	814007cc 	andi	r5,r16,31
    bf44:	1085883a 	add	r2,r2,r2
    bf48:	1085883a 	add	r2,r2,r2
    bf4c:	10c5883a 	add	r2,r2,r3
    bf50:	00c00044 	movi	r3,1
    bf54:	1946983a 	sll	r3,r3,r5
    bf58:	11000017 	ldw	r4,0(r2)
    bf5c:	1906703a 	and	r3,r3,r4
    bf60:	18000126 	beq	r3,zero,bf68 <__gethex+0x59c>
    bf64:	e7000094 	ori	fp,fp,2
    bf68:	880b883a 	mov	r5,r17
    bf6c:	9809883a 	mov	r4,r19
    bf70:	000b91c0 	call	b91c <rshift>
    bf74:	a5800117 	ldw	r22,4(r20)
    bf78:	bc6fc83a 	sub	r23,r23,r17
    bf7c:	04800084 	movi	r18,2
    bf80:	003fbf06 	br	be80 <__gethex+0x4b4>
    bf84:	043fec0e 	bge	zero,r16,bf38 <__gethex+0x56c>
    bf88:	9809883a 	mov	r4,r19
    bf8c:	800b883a 	mov	r5,r16
    bf90:	00079d00 	call	79d0 <__any_on>
    bf94:	1039883a 	mov	fp,r2
    bf98:	003fe706 	br	bf38 <__gethex+0x56c>
    bf9c:	e080008c 	andi	r2,fp,2
    bfa0:	103fbf26 	beq	r2,zero,bea0 <__gethex+0x4d4>
    bfa4:	d8c00217 	ldw	r3,8(sp)
    bfa8:	18800017 	ldw	r2,0(r3)
    bfac:	e084b03a 	or	r2,fp,r2
    bfb0:	1104703a 	and	r2,r2,r4
    bfb4:	103fba26 	beq	r2,zero,bea0 <__gethex+0x4d4>
    bfb8:	9c000417 	ldw	r16,16(r19)
    bfbc:	d8c00217 	ldw	r3,8(sp)
    bfc0:	017fffc4 	movi	r5,-1
    bfc4:	8405883a 	add	r2,r16,r16
    bfc8:	10b9883a 	add	fp,r2,r2
    bfcc:	1f09883a 	add	r4,r3,fp
    bfd0:	dc000015 	stw	r16,0(sp)
    bfd4:	00000306 	br	bfe4 <__gethex+0x618>
    bfd8:	18000015 	stw	zero,0(r3)
    bfdc:	18c00104 	addi	r3,r3,4
    bfe0:	1900082e 	bgeu	r3,r4,c004 <__gethex+0x638>
    bfe4:	18800017 	ldw	r2,0(r3)
    bfe8:	117ffb26 	beq	r2,r5,bfd8 <__gethex+0x60c>
    bfec:	10800044 	addi	r2,r2,1
    bff0:	18800015 	stw	r2,0(r3)
    bff4:	00001f06 	br	c074 <__gethex+0x6a8>
    bff8:	d8800e17 	ldw	r2,56(sp)
    bffc:	103fa826 	beq	r2,zero,bea0 <__gethex+0x4d4>
    c000:	003fed06 	br	bfb8 <__gethex+0x5ec>
    c004:	98800217 	ldw	r2,8(r19)
    c008:	80801316 	blt	r16,r2,c058 <__gethex+0x68c>
    c00c:	99400117 	ldw	r5,4(r19)
    c010:	a809883a 	mov	r4,r21
    c014:	29400044 	addi	r5,r5,1
    c018:	0007a580 	call	7a58 <_Balloc>
    c01c:	99800417 	ldw	r6,16(r19)
    c020:	99400304 	addi	r5,r19,12
    c024:	11000304 	addi	r4,r2,12
    c028:	318d883a 	add	r6,r6,r6
    c02c:	318d883a 	add	r6,r6,r6
    c030:	31800204 	addi	r6,r6,8
    c034:	1023883a 	mov	r17,r2
    c038:	00072c00 	call	72c0 <memcpy>
    c03c:	980b883a 	mov	r5,r19
    c040:	a809883a 	mov	r4,r21
    c044:	00074d80 	call	74d8 <_Bfree>
    c048:	8c000417 	ldw	r16,16(r17)
    c04c:	88800504 	addi	r2,r17,20
    c050:	8827883a 	mov	r19,r17
    c054:	d8800215 	stw	r2,8(sp)
    c058:	8405883a 	add	r2,r16,r16
    c05c:	1085883a 	add	r2,r2,r2
    c060:	14c5883a 	add	r2,r2,r19
    c064:	84000044 	addi	r16,r16,1
    c068:	00c00044 	movi	r3,1
    c06c:	10c00515 	stw	r3,20(r2)
    c070:	9c000415 	stw	r16,16(r19)
    c074:	00800084 	movi	r2,2
    c078:	90801426 	beq	r18,r2,c0cc <__gethex+0x700>
    c07c:	d8800017 	ldw	r2,0(sp)
    c080:	14000b16 	blt	r2,r16,c0b0 <__gethex+0x6e4>
    c084:	bc0007cc 	andi	r16,r23,31
    c088:	8000021e 	bne	r16,zero,c094 <__gethex+0x6c8>
    c08c:	94800814 	ori	r18,r18,32
    c090:	003f8406 	br	bea4 <__gethex+0x4d8>
    c094:	d8c00217 	ldw	r3,8(sp)
    c098:	1f05883a 	add	r2,r3,fp
    c09c:	113fff17 	ldw	r4,-4(r2)
    c0a0:	00075000 	call	7500 <__hi0bits>
    c0a4:	00c00804 	movi	r3,32
    c0a8:	1c07c83a 	sub	r3,r3,r16
    c0ac:	10fff70e 	bge	r2,r3,c08c <__gethex+0x6c0>
    c0b0:	9809883a 	mov	r4,r19
    c0b4:	01400044 	movi	r5,1
    c0b8:	000b91c0 	call	b91c <rshift>
    c0bc:	a0800217 	ldw	r2,8(r20)
    c0c0:	b5800044 	addi	r22,r22,1
    c0c4:	15bf3716 	blt	r2,r22,bda4 <__gethex+0x3d8>
    c0c8:	003ff006 	br	c08c <__gethex+0x6c0>
    c0cc:	a0800017 	ldw	r2,0(r20)
    c0d0:	10bfffc4 	addi	r2,r2,-1
    c0d4:	b8801e26 	beq	r23,r2,c150 <__gethex+0x784>
    c0d8:	04800884 	movi	r18,34
    c0dc:	003f7106 	br	bea4 <__gethex+0x4d8>
    c0e0:	d8c00e17 	ldw	r3,56(sp)
    c0e4:	00800044 	movi	r2,1
    c0e8:	10c5c83a 	sub	r2,r2,r3
    c0ec:	103f6c26 	beq	r2,zero,bea0 <__gethex+0x4d4>
    c0f0:	003fb106 	br	bfb8 <__gethex+0x5ec>
    c0f4:	bc7f841e 	bne	r23,r17,bf08 <__gethex+0x53c>
    c0f8:	1dc0050e 	bge	r3,r23,c110 <__gethex+0x744>
    c0fc:	b8cbc83a 	sub	r5,r23,r3
    c100:	9809883a 	mov	r4,r19
    c104:	00079d00 	call	79d0 <__any_on>
    c108:	103f7f26 	beq	r2,zero,bf08 <__gethex+0x53c>
    c10c:	a1000117 	ldw	r4,4(r20)
    c110:	d8800117 	ldw	r2,4(sp)
    c114:	d8c00217 	ldw	r3,8(sp)
    c118:	04000044 	movi	r16,1
    c11c:	11000015 	stw	r4,0(r2)
    c120:	d8800d17 	ldw	r2,52(sp)
    c124:	04801884 	movi	r18,98
    c128:	1c000015 	stw	r16,0(r3)
    c12c:	14c00015 	stw	r19,0(r2)
    c130:	9c000415 	stw	r16,16(r19)
    c134:	003e6806 	br	bad8 <__gethex+0x10c>
    c138:	d8c00e17 	ldw	r3,56(sp)
    c13c:	183f7226 	beq	r3,zero,bf08 <__gethex+0x53c>
    c140:	003ff306 	br	c110 <__gethex+0x744>
    c144:	d8800e17 	ldw	r2,56(sp)
    c148:	103ff126 	beq	r2,zero,c110 <__gethex+0x744>
    c14c:	003f6e06 	br	bf08 <__gethex+0x53c>
    c150:	b805d17a 	srai	r2,r23,5
    c154:	d8c00217 	ldw	r3,8(sp)
    c158:	b94007cc 	andi	r5,r23,31
    c15c:	1085883a 	add	r2,r2,r2
    c160:	1085883a 	add	r2,r2,r2
    c164:	10c5883a 	add	r2,r2,r3
    c168:	00c00044 	movi	r3,1
    c16c:	1946983a 	sll	r3,r3,r5
    c170:	11000017 	ldw	r4,0(r2)
    c174:	1906703a 	and	r3,r3,r4
    c178:	183fd726 	beq	r3,zero,c0d8 <__gethex+0x70c>
    c17c:	04800844 	movi	r18,33
    c180:	003f4806 	br	bea4 <__gethex+0x4d8>

0000c184 <L_shift>:
    c184:	00800204 	movi	r2,8
    c188:	1185c83a 	sub	r2,r2,r6
    c18c:	1085883a 	add	r2,r2,r2
    c190:	21c00017 	ldw	r7,0(r4)
    c194:	1093883a 	add	r9,r2,r2
    c198:	00800804 	movi	r2,32
    c19c:	200d883a 	mov	r6,r4
    c1a0:	1251c83a 	sub	r8,r2,r9
    c1a4:	31800104 	addi	r6,r6,4
    c1a8:	3805883a 	mov	r2,r7
    c1ac:	31c00017 	ldw	r7,0(r6)
    c1b0:	3a08983a 	sll	r4,r7,r8
    c1b4:	3a46d83a 	srl	r3,r7,r9
    c1b8:	1104b03a 	or	r2,r2,r4
    c1bc:	180f883a 	mov	r7,r3
    c1c0:	30bfff15 	stw	r2,-4(r6)
    c1c4:	30c00015 	stw	r3,0(r6)
    c1c8:	317ff636 	bltu	r6,r5,c1a4 <L_shift+0x20>
    c1cc:	f800283a 	ret

0000c1d0 <__hexnan>:
    c1d0:	defff404 	addi	sp,sp,-48
    c1d4:	dd800815 	stw	r22,32(sp)
    c1d8:	05800074 	movhi	r22,1
    c1dc:	b5957b04 	addi	r22,r22,21996
    c1e0:	b0800c03 	ldbu	r2,48(r22)
    c1e4:	dcc00515 	stw	r19,20(sp)
    c1e8:	dc000215 	stw	r16,8(sp)
    c1ec:	dfc00b15 	stw	ra,44(sp)
    c1f0:	df000a15 	stw	fp,40(sp)
    c1f4:	ddc00915 	stw	r23,36(sp)
    c1f8:	dd400715 	stw	r21,28(sp)
    c1fc:	dd000615 	stw	r20,24(sp)
    c200:	dc800415 	stw	r18,16(sp)
    c204:	dc400315 	stw	r17,12(sp)
    c208:	d9000115 	stw	r4,4(sp)
    c20c:	2821883a 	mov	r16,r5
    c210:	3027883a 	mov	r19,r6
    c214:	10007426 	beq	r2,zero,c3e8 <__hexnan+0x218>
    c218:	80c00017 	ldw	r3,0(r16)
    c21c:	1805d17a 	srai	r2,r3,5
    c220:	18c007cc 	andi	r3,r3,31
    c224:	1839003a 	cmpeq	fp,r3,zero
    c228:	1085883a 	add	r2,r2,r2
    c22c:	1085883a 	add	r2,r2,r2
    c230:	d8c00015 	stw	r3,0(sp)
    c234:	14c5883a 	add	r2,r2,r19
    c238:	e000011e 	bne	fp,zero,c240 <__hexnan+0x70>
    c23c:	10800104 	addi	r2,r2,4
    c240:	d8c00117 	ldw	r3,4(sp)
    c244:	153fff04 	addi	r20,r2,-4
    c248:	a021883a 	mov	r16,r20
    c24c:	1c400017 	ldw	r17,0(r3)
    c250:	a02b883a 	mov	r21,r20
    c254:	0025883a 	mov	r18,zero
    c258:	002f883a 	mov	r23,zero
    c25c:	000d883a 	mov	r6,zero
    c260:	103fff15 	stw	zero,-4(r2)
    c264:	8c400044 	addi	r17,r17,1
    c268:	89000003 	ldbu	r4,0(r17)
    c26c:	20000e26 	beq	r4,zero,c2a8 <__hexnan+0xd8>
    c270:	2585883a 	add	r2,r4,r22
    c274:	10c00003 	ldbu	r3,0(r2)
    c278:	18002e1e 	bne	r3,zero,c334 <__hexnan+0x164>
    c27c:	00800804 	movi	r2,32
    c280:	11005536 	bltu	r2,r4,c3d8 <__hexnan+0x208>
    c284:	bcbff70e 	bge	r23,r18,c264 <__hexnan+0x94>
    c288:	8540022e 	bgeu	r16,r21,c294 <__hexnan+0xc4>
    c28c:	008001c4 	movi	r2,7
    c290:	11803c0e 	bge	r2,r6,c384 <__hexnan+0x1b4>
    c294:	9c003536 	bltu	r19,r16,c36c <__hexnan+0x19c>
    c298:	8c400044 	addi	r17,r17,1
    c29c:	89000003 	ldbu	r4,0(r17)
    c2a0:	01800204 	movi	r6,8
    c2a4:	203ff21e 	bne	r4,zero,c270 <__hexnan+0xa0>
    c2a8:	90004d26 	beq	r18,zero,c3e0 <__hexnan+0x210>
    c2ac:	85404336 	bltu	r16,r21,c3bc <__hexnan+0x1ec>
    c2b0:	9c00382e 	bgeu	r19,r16,c394 <__hexnan+0x1c4>
    c2b4:	9807883a 	mov	r3,r19
    c2b8:	80800017 	ldw	r2,0(r16)
    c2bc:	84000104 	addi	r16,r16,4
    c2c0:	18800015 	stw	r2,0(r3)
    c2c4:	18c00104 	addi	r3,r3,4
    c2c8:	a43ffb2e 	bgeu	r20,r16,c2b8 <__hexnan+0xe8>
    c2cc:	18000015 	stw	zero,0(r3)
    c2d0:	18c00104 	addi	r3,r3,4
    c2d4:	a0fffd2e 	bgeu	r20,r3,c2cc <__hexnan+0xfc>
    c2d8:	a0800017 	ldw	r2,0(r20)
    c2dc:	1000071e 	bne	r2,zero,c2fc <__hexnan+0x12c>
    c2e0:	9d004326 	beq	r19,r20,c3f0 <__hexnan+0x220>
    c2e4:	a007883a 	mov	r3,r20
    c2e8:	00000106 	br	c2f0 <__hexnan+0x120>
    c2ec:	98c04026 	beq	r19,r3,c3f0 <__hexnan+0x220>
    c2f0:	18ffff04 	addi	r3,r3,-4
    c2f4:	18800017 	ldw	r2,0(r3)
    c2f8:	103ffc26 	beq	r2,zero,c2ec <__hexnan+0x11c>
    c2fc:	00c00144 	movi	r3,5
    c300:	1805883a 	mov	r2,r3
    c304:	dfc00b17 	ldw	ra,44(sp)
    c308:	df000a17 	ldw	fp,40(sp)
    c30c:	ddc00917 	ldw	r23,36(sp)
    c310:	dd800817 	ldw	r22,32(sp)
    c314:	dd400717 	ldw	r21,28(sp)
    c318:	dd000617 	ldw	r20,24(sp)
    c31c:	dcc00517 	ldw	r19,20(sp)
    c320:	dc800417 	ldw	r18,16(sp)
    c324:	dc400317 	ldw	r17,12(sp)
    c328:	dc000217 	ldw	r16,8(sp)
    c32c:	dec00c04 	addi	sp,sp,48
    c330:	f800283a 	ret
    c334:	31800044 	addi	r6,r6,1
    c338:	00800204 	movi	r2,8
    c33c:	94800044 	addi	r18,r18,1
    c340:	1180040e 	bge	r2,r6,c354 <__hexnan+0x184>
    c344:	9c3fc72e 	bgeu	r19,r16,c264 <__hexnan+0x94>
    c348:	843fff04 	addi	r16,r16,-4
    c34c:	80000015 	stw	zero,0(r16)
    c350:	01800044 	movi	r6,1
    c354:	80800017 	ldw	r2,0(r16)
    c358:	18c003cc 	andi	r3,r3,15
    c35c:	1004913a 	slli	r2,r2,4
    c360:	10c4b03a 	or	r2,r2,r3
    c364:	80800015 	stw	r2,0(r16)
    c368:	003fbe06 	br	c264 <__hexnan+0x94>
    c36c:	843fff04 	addi	r16,r16,-4
    c370:	802b883a 	mov	r21,r16
    c374:	902f883a 	mov	r23,r18
    c378:	000d883a 	mov	r6,zero
    c37c:	80000015 	stw	zero,0(r16)
    c380:	003fb806 	br	c264 <__hexnan+0x94>
    c384:	8009883a 	mov	r4,r16
    c388:	a80b883a 	mov	r5,r21
    c38c:	000c1840 	call	c184 <L_shift>
    c390:	003fc006 	br	c294 <__hexnan+0xc4>
    c394:	e03fd01e 	bne	fp,zero,c2d8 <__hexnan+0x108>
    c398:	d8c00017 	ldw	r3,0(sp)
    c39c:	00800804 	movi	r2,32
    c3a0:	10c5c83a 	sub	r2,r2,r3
    c3a4:	00ffffc4 	movi	r3,-1
    c3a8:	1886d83a 	srl	r3,r3,r2
    c3ac:	a0800017 	ldw	r2,0(r20)
    c3b0:	10c4703a 	and	r2,r2,r3
    c3b4:	a0800015 	stw	r2,0(r20)
    c3b8:	003fc806 	br	c2dc <__hexnan+0x10c>
    c3bc:	008001c4 	movi	r2,7
    c3c0:	11bfbb16 	blt	r2,r6,c2b0 <__hexnan+0xe0>
    c3c4:	a80b883a 	mov	r5,r21
    c3c8:	8009883a 	mov	r4,r16
    c3cc:	000c1840 	call	c184 <L_shift>
    c3d0:	9c3ff02e 	bgeu	r19,r16,c394 <__hexnan+0x1c4>
    c3d4:	003fb706 	br	c2b4 <__hexnan+0xe4>
    c3d8:	00800a44 	movi	r2,41
    c3dc:	20800826 	beq	r4,r2,c400 <__hexnan+0x230>
    c3e0:	00c00104 	movi	r3,4
    c3e4:	003fc606 	br	c300 <__hexnan+0x130>
    c3e8:	000b8b40 	call	b8b4 <__hexdig_init>
    c3ec:	003f8a06 	br	c218 <__hexnan+0x48>
    c3f0:	00800044 	movi	r2,1
    c3f4:	00c00144 	movi	r3,5
    c3f8:	98800015 	stw	r2,0(r19)
    c3fc:	003fc006 	br	c300 <__hexnan+0x130>
    c400:	903ff726 	beq	r18,zero,c3e0 <__hexnan+0x210>
    c404:	d8c00117 	ldw	r3,4(sp)
    c408:	88800044 	addi	r2,r17,1
    c40c:	18800015 	stw	r2,0(r3)
    c410:	857fa72e 	bgeu	r16,r21,c2b0 <__hexnan+0xe0>
    c414:	003fe906 	br	c3bc <__hexnan+0x1ec>

0000c418 <_isatty_r>:
    c418:	defffd04 	addi	sp,sp,-12
    c41c:	dc000015 	stw	r16,0(sp)
    c420:	04000074 	movhi	r16,1
    c424:	84156a04 	addi	r16,r16,21928
    c428:	dc400115 	stw	r17,4(sp)
    c42c:	80000015 	stw	zero,0(r16)
    c430:	2023883a 	mov	r17,r4
    c434:	2809883a 	mov	r4,r5
    c438:	dfc00215 	stw	ra,8(sp)
    c43c:	000f0480 	call	f048 <isatty>
    c440:	1007883a 	mov	r3,r2
    c444:	00bfffc4 	movi	r2,-1
    c448:	18800626 	beq	r3,r2,c464 <_isatty_r+0x4c>
    c44c:	1805883a 	mov	r2,r3
    c450:	dfc00217 	ldw	ra,8(sp)
    c454:	dc400117 	ldw	r17,4(sp)
    c458:	dc000017 	ldw	r16,0(sp)
    c45c:	dec00304 	addi	sp,sp,12
    c460:	f800283a 	ret
    c464:	80800017 	ldw	r2,0(r16)
    c468:	103ff826 	beq	r2,zero,c44c <_isatty_r+0x34>
    c46c:	88800015 	stw	r2,0(r17)
    c470:	1805883a 	mov	r2,r3
    c474:	dfc00217 	ldw	ra,8(sp)
    c478:	dc400117 	ldw	r17,4(sp)
    c47c:	dc000017 	ldw	r16,0(sp)
    c480:	dec00304 	addi	sp,sp,12
    c484:	f800283a 	ret

0000c488 <_lseek_r>:
    c488:	defffd04 	addi	sp,sp,-12
    c48c:	dc000015 	stw	r16,0(sp)
    c490:	04000074 	movhi	r16,1
    c494:	84156a04 	addi	r16,r16,21928
    c498:	dc400115 	stw	r17,4(sp)
    c49c:	80000015 	stw	zero,0(r16)
    c4a0:	2023883a 	mov	r17,r4
    c4a4:	2809883a 	mov	r4,r5
    c4a8:	300b883a 	mov	r5,r6
    c4ac:	380d883a 	mov	r6,r7
    c4b0:	dfc00215 	stw	ra,8(sp)
    c4b4:	000f1900 	call	f190 <lseek>
    c4b8:	1007883a 	mov	r3,r2
    c4bc:	00bfffc4 	movi	r2,-1
    c4c0:	18800626 	beq	r3,r2,c4dc <_lseek_r+0x54>
    c4c4:	1805883a 	mov	r2,r3
    c4c8:	dfc00217 	ldw	ra,8(sp)
    c4cc:	dc400117 	ldw	r17,4(sp)
    c4d0:	dc000017 	ldw	r16,0(sp)
    c4d4:	dec00304 	addi	sp,sp,12
    c4d8:	f800283a 	ret
    c4dc:	80800017 	ldw	r2,0(r16)
    c4e0:	103ff826 	beq	r2,zero,c4c4 <_lseek_r+0x3c>
    c4e4:	88800015 	stw	r2,0(r17)
    c4e8:	1805883a 	mov	r2,r3
    c4ec:	dfc00217 	ldw	ra,8(sp)
    c4f0:	dc400117 	ldw	r17,4(sp)
    c4f4:	dc000017 	ldw	r16,0(sp)
    c4f8:	dec00304 	addi	sp,sp,12
    c4fc:	f800283a 	ret

0000c500 <_read_r>:
    c500:	defffd04 	addi	sp,sp,-12
    c504:	dc000015 	stw	r16,0(sp)
    c508:	04000074 	movhi	r16,1
    c50c:	84156a04 	addi	r16,r16,21928
    c510:	dc400115 	stw	r17,4(sp)
    c514:	80000015 	stw	zero,0(r16)
    c518:	2023883a 	mov	r17,r4
    c51c:	2809883a 	mov	r4,r5
    c520:	300b883a 	mov	r5,r6
    c524:	380d883a 	mov	r6,r7
    c528:	dfc00215 	stw	ra,8(sp)
    c52c:	000f4840 	call	f484 <read>
    c530:	1007883a 	mov	r3,r2
    c534:	00bfffc4 	movi	r2,-1
    c538:	18800626 	beq	r3,r2,c554 <_read_r+0x54>
    c53c:	1805883a 	mov	r2,r3
    c540:	dfc00217 	ldw	ra,8(sp)
    c544:	dc400117 	ldw	r17,4(sp)
    c548:	dc000017 	ldw	r16,0(sp)
    c54c:	dec00304 	addi	sp,sp,12
    c550:	f800283a 	ret
    c554:	80800017 	ldw	r2,0(r16)
    c558:	103ff826 	beq	r2,zero,c53c <_read_r+0x3c>
    c55c:	88800015 	stw	r2,0(r17)
    c560:	1805883a 	mov	r2,r3
    c564:	dfc00217 	ldw	ra,8(sp)
    c568:	dc400117 	ldw	r17,4(sp)
    c56c:	dc000017 	ldw	r16,0(sp)
    c570:	dec00304 	addi	sp,sp,12
    c574:	f800283a 	ret

0000c578 <__muldi3>:
    c578:	2011883a 	mov	r8,r4
    c57c:	427fffcc 	andi	r9,r8,65535
    c580:	4018d43a 	srli	r12,r8,16
    c584:	32bfffcc 	andi	r10,r6,65535
    c588:	3016d43a 	srli	r11,r6,16
    c58c:	4a85383a 	mul	r2,r9,r10
    c590:	6295383a 	mul	r10,r12,r10
    c594:	4ad3383a 	mul	r9,r9,r11
    c598:	113fffcc 	andi	r4,r2,65535
    c59c:	1004d43a 	srli	r2,r2,16
    c5a0:	4a93883a 	add	r9,r9,r10
    c5a4:	3807883a 	mov	r3,r7
    c5a8:	1245883a 	add	r2,r2,r9
    c5ac:	280f883a 	mov	r7,r5
    c5b0:	180b883a 	mov	r5,r3
    c5b4:	1006943a 	slli	r3,r2,16
    c5b8:	defffd04 	addi	sp,sp,-12
    c5bc:	dc800215 	stw	r18,8(sp)
    c5c0:	1907883a 	add	r3,r3,r4
    c5c4:	dc400115 	stw	r17,4(sp)
    c5c8:	dc000015 	stw	r16,0(sp)
    c5cc:	4165383a 	mul	r18,r8,r5
    c5d0:	31e3383a 	mul	r17,r6,r7
    c5d4:	1012d43a 	srli	r9,r2,16
    c5d8:	62d9383a 	mul	r12,r12,r11
    c5dc:	181f883a 	mov	r15,r3
    c5e0:	1280022e 	bgeu	r2,r10,c5ec <__muldi3+0x74>
    c5e4:	00800074 	movhi	r2,1
    c5e8:	6099883a 	add	r12,r12,r2
    c5ec:	624d883a 	add	r6,r12,r9
    c5f0:	9187883a 	add	r3,r18,r6
    c5f4:	88c7883a 	add	r3,r17,r3
    c5f8:	7805883a 	mov	r2,r15
    c5fc:	dc800217 	ldw	r18,8(sp)
    c600:	dc400117 	ldw	r17,4(sp)
    c604:	dc000017 	ldw	r16,0(sp)
    c608:	dec00304 	addi	sp,sp,12
    c60c:	f800283a 	ret

0000c610 <__fixunsdfsi>:
    c610:	defffb04 	addi	sp,sp,-20
    c614:	dc400115 	stw	r17,4(sp)
    c618:	dc000015 	stw	r16,0(sp)
    c61c:	04507834 	movhi	r17,16864
    c620:	0021883a 	mov	r16,zero
    c624:	800d883a 	mov	r6,r16
    c628:	880f883a 	mov	r7,r17
    c62c:	dcc00315 	stw	r19,12(sp)
    c630:	dc800215 	stw	r18,8(sp)
    c634:	2827883a 	mov	r19,r5
    c638:	2025883a 	mov	r18,r4
    c63c:	dfc00415 	stw	ra,16(sp)
    c640:	000e0600 	call	e060 <__gedf2>
    c644:	000d883a 	mov	r6,zero
    c648:	880f883a 	mov	r7,r17
    c64c:	980b883a 	mov	r5,r19
    c650:	9009883a 	mov	r4,r18
    c654:	10000d16 	blt	r2,zero,c68c <__fixunsdfsi+0x7c>
    c658:	000d7b80 	call	d7b8 <__subdf3>
    c65c:	180b883a 	mov	r5,r3
    c660:	1009883a 	mov	r4,r2
    c664:	000e2f00 	call	e2f0 <__fixdfsi>
    c668:	00e00034 	movhi	r3,32768
    c66c:	10c5883a 	add	r2,r2,r3
    c670:	dfc00417 	ldw	ra,16(sp)
    c674:	dcc00317 	ldw	r19,12(sp)
    c678:	dc800217 	ldw	r18,8(sp)
    c67c:	dc400117 	ldw	r17,4(sp)
    c680:	dc000017 	ldw	r16,0(sp)
    c684:	dec00504 	addi	sp,sp,20
    c688:	f800283a 	ret
    c68c:	980b883a 	mov	r5,r19
    c690:	9009883a 	mov	r4,r18
    c694:	000e2f00 	call	e2f0 <__fixdfsi>
    c698:	dfc00417 	ldw	ra,16(sp)
    c69c:	dcc00317 	ldw	r19,12(sp)
    c6a0:	dc800217 	ldw	r18,8(sp)
    c6a4:	dc400117 	ldw	r17,4(sp)
    c6a8:	dc000017 	ldw	r16,0(sp)
    c6ac:	dec00504 	addi	sp,sp,20
    c6b0:	f800283a 	ret

0000c6b4 <__udivdi3>:
    c6b4:	defff004 	addi	sp,sp,-64
    c6b8:	2005883a 	mov	r2,r4
    c6bc:	3011883a 	mov	r8,r6
    c6c0:	df000e15 	stw	fp,56(sp)
    c6c4:	dd000a15 	stw	r20,40(sp)
    c6c8:	dc000615 	stw	r16,24(sp)
    c6cc:	dfc00f15 	stw	ra,60(sp)
    c6d0:	ddc00d15 	stw	r23,52(sp)
    c6d4:	dd800c15 	stw	r22,48(sp)
    c6d8:	dd400b15 	stw	r21,44(sp)
    c6dc:	dcc00915 	stw	r19,36(sp)
    c6e0:	dc800815 	stw	r18,32(sp)
    c6e4:	dc400715 	stw	r17,28(sp)
    c6e8:	4021883a 	mov	r16,r8
    c6ec:	1039883a 	mov	fp,r2
    c6f0:	2829883a 	mov	r20,r5
    c6f4:	38003b1e 	bne	r7,zero,c7e4 <__udivdi3+0x130>
    c6f8:	2a005c36 	bltu	r5,r8,c86c <__udivdi3+0x1b8>
    c6fc:	4000a626 	beq	r8,zero,c998 <__udivdi3+0x2e4>
    c700:	00bfffd4 	movui	r2,65535
    c704:	14009e36 	bltu	r2,r16,c980 <__udivdi3+0x2cc>
    c708:	00803fc4 	movi	r2,255
    c70c:	14013d36 	bltu	r2,r16,cc04 <__udivdi3+0x550>
    c710:	000b883a 	mov	r5,zero
    c714:	0005883a 	mov	r2,zero
    c718:	8084d83a 	srl	r2,r16,r2
    c71c:	01000074 	movhi	r4,1
    c720:	21076304 	addi	r4,r4,7564
    c724:	01800804 	movi	r6,32
    c728:	1105883a 	add	r2,r2,r4
    c72c:	10c00003 	ldbu	r3,0(r2)
    c730:	28c7883a 	add	r3,r5,r3
    c734:	30edc83a 	sub	r22,r6,r3
    c738:	b000ee1e 	bne	r22,zero,caf4 <__udivdi3+0x440>
    c73c:	802ad43a 	srli	r21,r16,16
    c740:	00800044 	movi	r2,1
    c744:	a423c83a 	sub	r17,r20,r16
    c748:	85ffffcc 	andi	r23,r16,65535
    c74c:	d8800315 	stw	r2,12(sp)
    c750:	8809883a 	mov	r4,r17
    c754:	a80b883a 	mov	r5,r21
    c758:	000e70c0 	call	e70c <__udivsi3>
    c75c:	8809883a 	mov	r4,r17
    c760:	a80b883a 	mov	r5,r21
    c764:	102d883a 	mov	r22,r2
    c768:	000e7140 	call	e714 <__umodsi3>
    c76c:	1004943a 	slli	r2,r2,16
    c770:	e006d43a 	srli	r3,fp,16
    c774:	bda3383a 	mul	r17,r23,r22
    c778:	10c4b03a 	or	r2,r2,r3
    c77c:	1440042e 	bgeu	r2,r17,c790 <__udivdi3+0xdc>
    c780:	1405883a 	add	r2,r2,r16
    c784:	b5bfffc4 	addi	r22,r22,-1
    c788:	14000136 	bltu	r2,r16,c790 <__udivdi3+0xdc>
    c78c:	14413d36 	bltu	r2,r17,cc84 <__udivdi3+0x5d0>
    c790:	1463c83a 	sub	r17,r2,r17
    c794:	8809883a 	mov	r4,r17
    c798:	a80b883a 	mov	r5,r21
    c79c:	000e70c0 	call	e70c <__udivsi3>
    c7a0:	8809883a 	mov	r4,r17
    c7a4:	a80b883a 	mov	r5,r21
    c7a8:	1029883a 	mov	r20,r2
    c7ac:	000e7140 	call	e714 <__umodsi3>
    c7b0:	1004943a 	slli	r2,r2,16
    c7b4:	bd09383a 	mul	r4,r23,r20
    c7b8:	e0ffffcc 	andi	r3,fp,65535
    c7bc:	10c4b03a 	or	r2,r2,r3
    c7c0:	1100042e 	bgeu	r2,r4,c7d4 <__udivdi3+0x120>
    c7c4:	8085883a 	add	r2,r16,r2
    c7c8:	a53fffc4 	addi	r20,r20,-1
    c7cc:	14000136 	bltu	r2,r16,c7d4 <__udivdi3+0x120>
    c7d0:	11012036 	bltu	r2,r4,cc54 <__udivdi3+0x5a0>
    c7d4:	b004943a 	slli	r2,r22,16
    c7d8:	d9000317 	ldw	r4,12(sp)
    c7dc:	a084b03a 	or	r2,r20,r2
    c7e0:	00001506 	br	c838 <__udivdi3+0x184>
    c7e4:	380d883a 	mov	r6,r7
    c7e8:	29c06236 	bltu	r5,r7,c974 <__udivdi3+0x2c0>
    c7ec:	00bfffd4 	movui	r2,65535
    c7f0:	11c05a36 	bltu	r2,r7,c95c <__udivdi3+0x2a8>
    c7f4:	00803fc4 	movi	r2,255
    c7f8:	11c0fc36 	bltu	r2,r7,cbec <__udivdi3+0x538>
    c7fc:	000b883a 	mov	r5,zero
    c800:	0005883a 	mov	r2,zero
    c804:	3084d83a 	srl	r2,r6,r2
    c808:	01000074 	movhi	r4,1
    c80c:	21076304 	addi	r4,r4,7564
    c810:	01c00804 	movi	r7,32
    c814:	1105883a 	add	r2,r2,r4
    c818:	10c00003 	ldbu	r3,0(r2)
    c81c:	28c7883a 	add	r3,r5,r3
    c820:	38efc83a 	sub	r23,r7,r3
    c824:	b800691e 	bne	r23,zero,c9cc <__udivdi3+0x318>
    c828:	35000136 	bltu	r6,r20,c830 <__udivdi3+0x17c>
    c82c:	e4005136 	bltu	fp,r16,c974 <__udivdi3+0x2c0>
    c830:	00800044 	movi	r2,1
    c834:	0009883a 	mov	r4,zero
    c838:	2007883a 	mov	r3,r4
    c83c:	dfc00f17 	ldw	ra,60(sp)
    c840:	df000e17 	ldw	fp,56(sp)
    c844:	ddc00d17 	ldw	r23,52(sp)
    c848:	dd800c17 	ldw	r22,48(sp)
    c84c:	dd400b17 	ldw	r21,44(sp)
    c850:	dd000a17 	ldw	r20,40(sp)
    c854:	dcc00917 	ldw	r19,36(sp)
    c858:	dc800817 	ldw	r18,32(sp)
    c85c:	dc400717 	ldw	r17,28(sp)
    c860:	dc000617 	ldw	r16,24(sp)
    c864:	dec01004 	addi	sp,sp,64
    c868:	f800283a 	ret
    c86c:	00bfffd4 	movui	r2,65535
    c870:	12005036 	bltu	r2,r8,c9b4 <__udivdi3+0x300>
    c874:	00803fc4 	movi	r2,255
    c878:	1200e836 	bltu	r2,r8,cc1c <__udivdi3+0x568>
    c87c:	000b883a 	mov	r5,zero
    c880:	0005883a 	mov	r2,zero
    c884:	8084d83a 	srl	r2,r16,r2
    c888:	01000074 	movhi	r4,1
    c88c:	21076304 	addi	r4,r4,7564
    c890:	01800804 	movi	r6,32
    c894:	1105883a 	add	r2,r2,r4
    c898:	10c00003 	ldbu	r3,0(r2)
    c89c:	28c7883a 	add	r3,r5,r3
    c8a0:	30cbc83a 	sub	r5,r6,r3
    c8a4:	28000626 	beq	r5,zero,c8c0 <__udivdi3+0x20c>
    c8a8:	3145c83a 	sub	r2,r6,r5
    c8ac:	e084d83a 	srl	r2,fp,r2
    c8b0:	a146983a 	sll	r3,r20,r5
    c8b4:	e178983a 	sll	fp,fp,r5
    c8b8:	8160983a 	sll	r16,r16,r5
    c8bc:	18a8b03a 	or	r20,r3,r2
    c8c0:	802ad43a 	srli	r21,r16,16
    c8c4:	a009883a 	mov	r4,r20
    c8c8:	85ffffcc 	andi	r23,r16,65535
    c8cc:	a80b883a 	mov	r5,r21
    c8d0:	000e70c0 	call	e70c <__udivsi3>
    c8d4:	a009883a 	mov	r4,r20
    c8d8:	a80b883a 	mov	r5,r21
    c8dc:	102d883a 	mov	r22,r2
    c8e0:	000e7140 	call	e714 <__umodsi3>
    c8e4:	1004943a 	slli	r2,r2,16
    c8e8:	e006d43a 	srli	r3,fp,16
    c8ec:	bda3383a 	mul	r17,r23,r22
    c8f0:	10c4b03a 	or	r2,r2,r3
    c8f4:	1440042e 	bgeu	r2,r17,c908 <__udivdi3+0x254>
    c8f8:	1405883a 	add	r2,r2,r16
    c8fc:	b5bfffc4 	addi	r22,r22,-1
    c900:	14000136 	bltu	r2,r16,c908 <__udivdi3+0x254>
    c904:	1440d536 	bltu	r2,r17,cc5c <__udivdi3+0x5a8>
    c908:	1463c83a 	sub	r17,r2,r17
    c90c:	8809883a 	mov	r4,r17
    c910:	a80b883a 	mov	r5,r21
    c914:	000e70c0 	call	e70c <__udivsi3>
    c918:	8809883a 	mov	r4,r17
    c91c:	a80b883a 	mov	r5,r21
    c920:	1029883a 	mov	r20,r2
    c924:	000e7140 	call	e714 <__umodsi3>
    c928:	1004943a 	slli	r2,r2,16
    c92c:	bd09383a 	mul	r4,r23,r20
    c930:	e0ffffcc 	andi	r3,fp,65535
    c934:	10c4b03a 	or	r2,r2,r3
    c938:	1100042e 	bgeu	r2,r4,c94c <__udivdi3+0x298>
    c93c:	8085883a 	add	r2,r16,r2
    c940:	a53fffc4 	addi	r20,r20,-1
    c944:	14000136 	bltu	r2,r16,c94c <__udivdi3+0x298>
    c948:	1100c736 	bltu	r2,r4,cc68 <__udivdi3+0x5b4>
    c94c:	b004943a 	slli	r2,r22,16
    c950:	0009883a 	mov	r4,zero
    c954:	a084b03a 	or	r2,r20,r2
    c958:	003fb706 	br	c838 <__udivdi3+0x184>
    c95c:	00804034 	movhi	r2,256
    c960:	10bfffc4 	addi	r2,r2,-1
    c964:	11c0a436 	bltu	r2,r7,cbf8 <__udivdi3+0x544>
    c968:	01400404 	movi	r5,16
    c96c:	2805883a 	mov	r2,r5
    c970:	003fa406 	br	c804 <__udivdi3+0x150>
    c974:	0005883a 	mov	r2,zero
    c978:	0009883a 	mov	r4,zero
    c97c:	003fae06 	br	c838 <__udivdi3+0x184>
    c980:	00804034 	movhi	r2,256
    c984:	10bfffc4 	addi	r2,r2,-1
    c988:	1400a136 	bltu	r2,r16,cc10 <__udivdi3+0x55c>
    c98c:	01400404 	movi	r5,16
    c990:	2805883a 	mov	r2,r5
    c994:	003f6006 	br	c718 <__udivdi3+0x64>
    c998:	01000044 	movi	r4,1
    c99c:	000b883a 	mov	r5,zero
    c9a0:	000e70c0 	call	e70c <__udivsi3>
    c9a4:	1021883a 	mov	r16,r2
    c9a8:	00bfffd4 	movui	r2,65535
    c9ac:	143ff436 	bltu	r2,r16,c980 <__udivdi3+0x2cc>
    c9b0:	003f5506 	br	c708 <__udivdi3+0x54>
    c9b4:	00804034 	movhi	r2,256
    c9b8:	10bfffc4 	addi	r2,r2,-1
    c9bc:	12009a36 	bltu	r2,r8,cc28 <__udivdi3+0x574>
    c9c0:	01400404 	movi	r5,16
    c9c4:	2805883a 	mov	r2,r5
    c9c8:	003fae06 	br	c884 <__udivdi3+0x1d0>
    c9cc:	3dc5c83a 	sub	r2,r7,r23
    c9d0:	35c8983a 	sll	r4,r6,r23
    c9d4:	8086d83a 	srl	r3,r16,r2
    c9d8:	a0a2d83a 	srl	r17,r20,r2
    c9dc:	e084d83a 	srl	r2,fp,r2
    c9e0:	20eab03a 	or	r21,r4,r3
    c9e4:	a82cd43a 	srli	r22,r21,16
    c9e8:	a5c6983a 	sll	r3,r20,r23
    c9ec:	8809883a 	mov	r4,r17
    c9f0:	b00b883a 	mov	r5,r22
    c9f4:	1886b03a 	or	r3,r3,r2
    c9f8:	d8c00215 	stw	r3,8(sp)
    c9fc:	000e70c0 	call	e70c <__udivsi3>
    ca00:	8809883a 	mov	r4,r17
    ca04:	b00b883a 	mov	r5,r22
    ca08:	1029883a 	mov	r20,r2
    ca0c:	000e7140 	call	e714 <__umodsi3>
    ca10:	a8ffffcc 	andi	r3,r21,65535
    ca14:	d8c00515 	stw	r3,20(sp)
    ca18:	d9000217 	ldw	r4,8(sp)
    ca1c:	d9400517 	ldw	r5,20(sp)
    ca20:	1004943a 	slli	r2,r2,16
    ca24:	2006d43a 	srli	r3,r4,16
    ca28:	85e0983a 	sll	r16,r16,r23
    ca2c:	2d23383a 	mul	r17,r5,r20
    ca30:	10c4b03a 	or	r2,r2,r3
    ca34:	dc000015 	stw	r16,0(sp)
    ca38:	1440032e 	bgeu	r2,r17,ca48 <__udivdi3+0x394>
    ca3c:	1545883a 	add	r2,r2,r21
    ca40:	a53fffc4 	addi	r20,r20,-1
    ca44:	15407f2e 	bgeu	r2,r21,cc44 <__udivdi3+0x590>
    ca48:	1463c83a 	sub	r17,r2,r17
    ca4c:	8809883a 	mov	r4,r17
    ca50:	b00b883a 	mov	r5,r22
    ca54:	000e70c0 	call	e70c <__udivsi3>
    ca58:	8809883a 	mov	r4,r17
    ca5c:	b00b883a 	mov	r5,r22
    ca60:	1021883a 	mov	r16,r2
    ca64:	000e7140 	call	e714 <__umodsi3>
    ca68:	d8c00517 	ldw	r3,20(sp)
    ca6c:	d9000217 	ldw	r4,8(sp)
    ca70:	1004943a 	slli	r2,r2,16
    ca74:	1c0f383a 	mul	r7,r3,r16
    ca78:	20ffffcc 	andi	r3,r4,65535
    ca7c:	10e2b03a 	or	r17,r2,r3
    ca80:	89c0032e 	bgeu	r17,r7,ca90 <__udivdi3+0x3dc>
    ca84:	8d63883a 	add	r17,r17,r21
    ca88:	843fffc4 	addi	r16,r16,-1
    ca8c:	8d40692e 	bgeu	r17,r21,cc34 <__udivdi3+0x580>
    ca90:	a008943a 	slli	r4,r20,16
    ca94:	d9400017 	ldw	r5,0(sp)
    ca98:	89e3c83a 	sub	r17,r17,r7
    ca9c:	8110b03a 	or	r8,r16,r4
    caa0:	280cd43a 	srli	r6,r5,16
    caa4:	28ffffcc 	andi	r3,r5,65535
    caa8:	40bfffcc 	andi	r2,r8,65535
    caac:	400ad43a 	srli	r5,r8,16
    cab0:	10d3383a 	mul	r9,r2,r3
    cab4:	1185383a 	mul	r2,r2,r6
    cab8:	28c7383a 	mul	r3,r5,r3
    cabc:	4808d43a 	srli	r4,r9,16
    cac0:	298b383a 	mul	r5,r5,r6
    cac4:	10c5883a 	add	r2,r2,r3
    cac8:	2089883a 	add	r4,r4,r2
    cacc:	20c0022e 	bgeu	r4,r3,cad8 <__udivdi3+0x424>
    cad0:	00800074 	movhi	r2,1
    cad4:	288b883a 	add	r5,r5,r2
    cad8:	2004d43a 	srli	r2,r4,16
    cadc:	288b883a 	add	r5,r5,r2
    cae0:	89403f36 	bltu	r17,r5,cbe0 <__udivdi3+0x52c>
    cae4:	89403926 	beq	r17,r5,cbcc <__udivdi3+0x518>
    cae8:	4005883a 	mov	r2,r8
    caec:	0009883a 	mov	r4,zero
    caf0:	003f5106 	br	c838 <__udivdi3+0x184>
    caf4:	85a0983a 	sll	r16,r16,r22
    caf8:	3585c83a 	sub	r2,r6,r22
    cafc:	a0a2d83a 	srl	r17,r20,r2
    cb00:	802ad43a 	srli	r21,r16,16
    cb04:	e084d83a 	srl	r2,fp,r2
    cb08:	a586983a 	sll	r3,r20,r22
    cb0c:	8809883a 	mov	r4,r17
    cb10:	a80b883a 	mov	r5,r21
    cb14:	1886b03a 	or	r3,r3,r2
    cb18:	d8c00115 	stw	r3,4(sp)
    cb1c:	000e70c0 	call	e70c <__udivsi3>
    cb20:	8809883a 	mov	r4,r17
    cb24:	a80b883a 	mov	r5,r21
    cb28:	d8800415 	stw	r2,16(sp)
    cb2c:	000e7140 	call	e714 <__umodsi3>
    cb30:	d9000117 	ldw	r4,4(sp)
    cb34:	d9400417 	ldw	r5,16(sp)
    cb38:	1004943a 	slli	r2,r2,16
    cb3c:	85ffffcc 	andi	r23,r16,65535
    cb40:	2006d43a 	srli	r3,r4,16
    cb44:	b963383a 	mul	r17,r23,r5
    cb48:	10c4b03a 	or	r2,r2,r3
    cb4c:	1440042e 	bgeu	r2,r17,cb60 <__udivdi3+0x4ac>
    cb50:	297fffc4 	addi	r5,r5,-1
    cb54:	1405883a 	add	r2,r2,r16
    cb58:	d9400415 	stw	r5,16(sp)
    cb5c:	1400442e 	bgeu	r2,r16,cc70 <__udivdi3+0x5bc>
    cb60:	1463c83a 	sub	r17,r2,r17
    cb64:	8809883a 	mov	r4,r17
    cb68:	a80b883a 	mov	r5,r21
    cb6c:	000e70c0 	call	e70c <__udivsi3>
    cb70:	8809883a 	mov	r4,r17
    cb74:	a80b883a 	mov	r5,r21
    cb78:	1029883a 	mov	r20,r2
    cb7c:	000e7140 	call	e714 <__umodsi3>
    cb80:	d9400117 	ldw	r5,4(sp)
    cb84:	1004943a 	slli	r2,r2,16
    cb88:	bd09383a 	mul	r4,r23,r20
    cb8c:	28ffffcc 	andi	r3,r5,65535
    cb90:	10c6b03a 	or	r3,r2,r3
    cb94:	1900062e 	bgeu	r3,r4,cbb0 <__udivdi3+0x4fc>
    cb98:	1c07883a 	add	r3,r3,r16
    cb9c:	a53fffc4 	addi	r20,r20,-1
    cba0:	1c000336 	bltu	r3,r16,cbb0 <__udivdi3+0x4fc>
    cba4:	1900022e 	bgeu	r3,r4,cbb0 <__udivdi3+0x4fc>
    cba8:	a53fffc4 	addi	r20,r20,-1
    cbac:	1c07883a 	add	r3,r3,r16
    cbb0:	d9400417 	ldw	r5,16(sp)
    cbb4:	e5b8983a 	sll	fp,fp,r22
    cbb8:	1923c83a 	sub	r17,r3,r4
    cbbc:	2804943a 	slli	r2,r5,16
    cbc0:	a0a8b03a 	or	r20,r20,r2
    cbc4:	dd000315 	stw	r20,12(sp)
    cbc8:	003ee106 	br	c750 <__udivdi3+0x9c>
    cbcc:	2004943a 	slli	r2,r4,16
    cbd0:	e5c8983a 	sll	r4,fp,r23
    cbd4:	48ffffcc 	andi	r3,r9,65535
    cbd8:	10c5883a 	add	r2,r2,r3
    cbdc:	20bfc22e 	bgeu	r4,r2,cae8 <__udivdi3+0x434>
    cbe0:	40bfffc4 	addi	r2,r8,-1
    cbe4:	0009883a 	mov	r4,zero
    cbe8:	003f1306 	br	c838 <__udivdi3+0x184>
    cbec:	01400204 	movi	r5,8
    cbf0:	2805883a 	mov	r2,r5
    cbf4:	003f0306 	br	c804 <__udivdi3+0x150>
    cbf8:	01400604 	movi	r5,24
    cbfc:	2805883a 	mov	r2,r5
    cc00:	003f0006 	br	c804 <__udivdi3+0x150>
    cc04:	01400204 	movi	r5,8
    cc08:	2805883a 	mov	r2,r5
    cc0c:	003ec206 	br	c718 <__udivdi3+0x64>
    cc10:	01400604 	movi	r5,24
    cc14:	2805883a 	mov	r2,r5
    cc18:	003ebf06 	br	c718 <__udivdi3+0x64>
    cc1c:	01400204 	movi	r5,8
    cc20:	2805883a 	mov	r2,r5
    cc24:	003f1706 	br	c884 <__udivdi3+0x1d0>
    cc28:	01400604 	movi	r5,24
    cc2c:	2805883a 	mov	r2,r5
    cc30:	003f1406 	br	c884 <__udivdi3+0x1d0>
    cc34:	89ff962e 	bgeu	r17,r7,ca90 <__udivdi3+0x3dc>
    cc38:	8d63883a 	add	r17,r17,r21
    cc3c:	843fffc4 	addi	r16,r16,-1
    cc40:	003f9306 	br	ca90 <__udivdi3+0x3dc>
    cc44:	147f802e 	bgeu	r2,r17,ca48 <__udivdi3+0x394>
    cc48:	a53fffc4 	addi	r20,r20,-1
    cc4c:	1545883a 	add	r2,r2,r21
    cc50:	003f7d06 	br	ca48 <__udivdi3+0x394>
    cc54:	a53fffc4 	addi	r20,r20,-1
    cc58:	003ede06 	br	c7d4 <__udivdi3+0x120>
    cc5c:	b5bfffc4 	addi	r22,r22,-1
    cc60:	1405883a 	add	r2,r2,r16
    cc64:	003f2806 	br	c908 <__udivdi3+0x254>
    cc68:	a53fffc4 	addi	r20,r20,-1
    cc6c:	003f3706 	br	c94c <__udivdi3+0x298>
    cc70:	147fbb2e 	bgeu	r2,r17,cb60 <__udivdi3+0x4ac>
    cc74:	297fffc4 	addi	r5,r5,-1
    cc78:	1405883a 	add	r2,r2,r16
    cc7c:	d9400415 	stw	r5,16(sp)
    cc80:	003fb706 	br	cb60 <__udivdi3+0x4ac>
    cc84:	b5bfffc4 	addi	r22,r22,-1
    cc88:	1405883a 	add	r2,r2,r16
    cc8c:	003ec006 	br	c790 <__udivdi3+0xdc>

0000cc90 <__umoddi3>:
    cc90:	defff104 	addi	sp,sp,-60
    cc94:	dd800b15 	stw	r22,44(sp)
    cc98:	dd000915 	stw	r20,36(sp)
    cc9c:	dc000515 	stw	r16,20(sp)
    cca0:	dfc00e15 	stw	ra,56(sp)
    cca4:	df000d15 	stw	fp,52(sp)
    cca8:	ddc00c15 	stw	r23,48(sp)
    ccac:	dd400a15 	stw	r21,40(sp)
    ccb0:	dcc00815 	stw	r19,32(sp)
    ccb4:	dc800715 	stw	r18,28(sp)
    ccb8:	dc400615 	stw	r17,24(sp)
    ccbc:	3021883a 	mov	r16,r6
    ccc0:	202d883a 	mov	r22,r4
    ccc4:	2829883a 	mov	r20,r5
    ccc8:	38002b1e 	bne	r7,zero,cd78 <__umoddi3+0xe8>
    cccc:	29805036 	bltu	r5,r6,ce10 <__umoddi3+0x180>
    ccd0:	30008a26 	beq	r6,zero,cefc <__umoddi3+0x26c>
    ccd4:	00bfffd4 	movui	r2,65535
    ccd8:	14008236 	bltu	r2,r16,cee4 <__umoddi3+0x254>
    ccdc:	00803fc4 	movi	r2,255
    cce0:	14013636 	bltu	r2,r16,d1bc <__umoddi3+0x52c>
    cce4:	000b883a 	mov	r5,zero
    cce8:	0005883a 	mov	r2,zero
    ccec:	8084d83a 	srl	r2,r16,r2
    ccf0:	01000074 	movhi	r4,1
    ccf4:	21076304 	addi	r4,r4,7564
    ccf8:	01800804 	movi	r6,32
    ccfc:	1105883a 	add	r2,r2,r4
    cd00:	10c00003 	ldbu	r3,0(r2)
    cd04:	28c7883a 	add	r3,r5,r3
    cd08:	30efc83a 	sub	r23,r6,r3
    cd0c:	b800941e 	bne	r23,zero,cf60 <__umoddi3+0x2d0>
    cd10:	802ad43a 	srli	r21,r16,16
    cd14:	a423c83a 	sub	r17,r20,r16
    cd18:	0039883a 	mov	fp,zero
    cd1c:	853fffcc 	andi	r20,r16,65535
    cd20:	8809883a 	mov	r4,r17
    cd24:	a80b883a 	mov	r5,r21
    cd28:	000e70c0 	call	e70c <__udivsi3>
    cd2c:	8809883a 	mov	r4,r17
    cd30:	a80b883a 	mov	r5,r21
    cd34:	a0a3383a 	mul	r17,r20,r2
    cd38:	000e7140 	call	e714 <__umodsi3>
    cd3c:	1004943a 	slli	r2,r2,16
    cd40:	b006d43a 	srli	r3,r22,16
    cd44:	10c4b03a 	or	r2,r2,r3
    cd48:	1440032e 	bgeu	r2,r17,cd58 <__umoddi3+0xc8>
    cd4c:	1405883a 	add	r2,r2,r16
    cd50:	14000136 	bltu	r2,r16,cd58 <__umoddi3+0xc8>
    cd54:	14413536 	bltu	r2,r17,d22c <__umoddi3+0x59c>
    cd58:	1463c83a 	sub	r17,r2,r17
    cd5c:	8809883a 	mov	r4,r17
    cd60:	a80b883a 	mov	r5,r21
    cd64:	000e70c0 	call	e70c <__udivsi3>
    cd68:	8809883a 	mov	r4,r17
    cd6c:	a0a3383a 	mul	r17,r20,r2
    cd70:	a80b883a 	mov	r5,r21
    cd74:	00004d06 	br	ceac <__umoddi3+0x21c>
    cd78:	380d883a 	mov	r6,r7
    cd7c:	29c0102e 	bgeu	r5,r7,cdc0 <__umoddi3+0x130>
    cd80:	2011883a 	mov	r8,r4
    cd84:	2813883a 	mov	r9,r5
    cd88:	4005883a 	mov	r2,r8
    cd8c:	4807883a 	mov	r3,r9
    cd90:	dfc00e17 	ldw	ra,56(sp)
    cd94:	df000d17 	ldw	fp,52(sp)
    cd98:	ddc00c17 	ldw	r23,48(sp)
    cd9c:	dd800b17 	ldw	r22,44(sp)
    cda0:	dd400a17 	ldw	r21,40(sp)
    cda4:	dd000917 	ldw	r20,36(sp)
    cda8:	dcc00817 	ldw	r19,32(sp)
    cdac:	dc800717 	ldw	r18,28(sp)
    cdb0:	dc400617 	ldw	r17,24(sp)
    cdb4:	dc000517 	ldw	r16,20(sp)
    cdb8:	dec00f04 	addi	sp,sp,60
    cdbc:	f800283a 	ret
    cdc0:	00bfffd4 	movui	r2,65535
    cdc4:	11c05a36 	bltu	r2,r7,cf30 <__umoddi3+0x2a0>
    cdc8:	00803fc4 	movi	r2,255
    cdcc:	11c0fe36 	bltu	r2,r7,d1c8 <__umoddi3+0x538>
    cdd0:	000b883a 	mov	r5,zero
    cdd4:	0005883a 	mov	r2,zero
    cdd8:	3084d83a 	srl	r2,r6,r2
    cddc:	01000074 	movhi	r4,1
    cde0:	21076304 	addi	r4,r4,7564
    cde4:	01c00804 	movi	r7,32
    cde8:	1105883a 	add	r2,r2,r4
    cdec:	10c00003 	ldbu	r3,0(r2)
    cdf0:	28c7883a 	add	r3,r5,r3
    cdf4:	38ebc83a 	sub	r21,r7,r3
    cdf8:	a800851e 	bne	r21,zero,d010 <__umoddi3+0x380>
    cdfc:	35005236 	bltu	r6,r20,cf48 <__umoddi3+0x2b8>
    ce00:	b400512e 	bgeu	r22,r16,cf48 <__umoddi3+0x2b8>
    ce04:	b011883a 	mov	r8,r22
    ce08:	a013883a 	mov	r9,r20
    ce0c:	003fde06 	br	cd88 <__umoddi3+0xf8>
    ce10:	00bfffd4 	movui	r2,65535
    ce14:	11804036 	bltu	r2,r6,cf18 <__umoddi3+0x288>
    ce18:	00803fc4 	movi	r2,255
    ce1c:	1180ed36 	bltu	r2,r6,d1d4 <__umoddi3+0x544>
    ce20:	000b883a 	mov	r5,zero
    ce24:	0005883a 	mov	r2,zero
    ce28:	8084d83a 	srl	r2,r16,r2
    ce2c:	01000074 	movhi	r4,1
    ce30:	21076304 	addi	r4,r4,7564
    ce34:	01800804 	movi	r6,32
    ce38:	1105883a 	add	r2,r2,r4
    ce3c:	10c00003 	ldbu	r3,0(r2)
    ce40:	28c7883a 	add	r3,r5,r3
    ce44:	30c7c83a 	sub	r3,r6,r3
    ce48:	1800bf1e 	bne	r3,zero,d148 <__umoddi3+0x4b8>
    ce4c:	0039883a 	mov	fp,zero
    ce50:	802ad43a 	srli	r21,r16,16
    ce54:	a009883a 	mov	r4,r20
    ce58:	85ffffcc 	andi	r23,r16,65535
    ce5c:	a80b883a 	mov	r5,r21
    ce60:	000e70c0 	call	e70c <__udivsi3>
    ce64:	a009883a 	mov	r4,r20
    ce68:	a80b883a 	mov	r5,r21
    ce6c:	b8a3383a 	mul	r17,r23,r2
    ce70:	000e7140 	call	e714 <__umodsi3>
    ce74:	1004943a 	slli	r2,r2,16
    ce78:	b006d43a 	srli	r3,r22,16
    ce7c:	10c4b03a 	or	r2,r2,r3
    ce80:	1440032e 	bgeu	r2,r17,ce90 <__umoddi3+0x200>
    ce84:	1405883a 	add	r2,r2,r16
    ce88:	14000136 	bltu	r2,r16,ce90 <__umoddi3+0x200>
    ce8c:	1440e536 	bltu	r2,r17,d224 <__umoddi3+0x594>
    ce90:	1463c83a 	sub	r17,r2,r17
    ce94:	8809883a 	mov	r4,r17
    ce98:	a80b883a 	mov	r5,r21
    ce9c:	000e70c0 	call	e70c <__udivsi3>
    cea0:	8809883a 	mov	r4,r17
    cea4:	b8a3383a 	mul	r17,r23,r2
    cea8:	a80b883a 	mov	r5,r21
    ceac:	000e7140 	call	e714 <__umodsi3>
    ceb0:	1004943a 	slli	r2,r2,16
    ceb4:	b0ffffcc 	andi	r3,r22,65535
    ceb8:	10c4b03a 	or	r2,r2,r3
    cebc:	1440042e 	bgeu	r2,r17,ced0 <__umoddi3+0x240>
    cec0:	1405883a 	add	r2,r2,r16
    cec4:	14000236 	bltu	r2,r16,ced0 <__umoddi3+0x240>
    cec8:	1440012e 	bgeu	r2,r17,ced0 <__umoddi3+0x240>
    cecc:	1405883a 	add	r2,r2,r16
    ced0:	1445c83a 	sub	r2,r2,r17
    ced4:	1724d83a 	srl	r18,r2,fp
    ced8:	0013883a 	mov	r9,zero
    cedc:	9011883a 	mov	r8,r18
    cee0:	003fa906 	br	cd88 <__umoddi3+0xf8>
    cee4:	00804034 	movhi	r2,256
    cee8:	10bfffc4 	addi	r2,r2,-1
    ceec:	1400b036 	bltu	r2,r16,d1b0 <__umoddi3+0x520>
    cef0:	01400404 	movi	r5,16
    cef4:	2805883a 	mov	r2,r5
    cef8:	003f7c06 	br	ccec <__umoddi3+0x5c>
    cefc:	01000044 	movi	r4,1
    cf00:	000b883a 	mov	r5,zero
    cf04:	000e70c0 	call	e70c <__udivsi3>
    cf08:	1021883a 	mov	r16,r2
    cf0c:	00bfffd4 	movui	r2,65535
    cf10:	143ff436 	bltu	r2,r16,cee4 <__umoddi3+0x254>
    cf14:	003f7106 	br	ccdc <__umoddi3+0x4c>
    cf18:	00804034 	movhi	r2,256
    cf1c:	10bfffc4 	addi	r2,r2,-1
    cf20:	1180af36 	bltu	r2,r6,d1e0 <__umoddi3+0x550>
    cf24:	01400404 	movi	r5,16
    cf28:	2805883a 	mov	r2,r5
    cf2c:	003fbe06 	br	ce28 <__umoddi3+0x198>
    cf30:	00804034 	movhi	r2,256
    cf34:	10bfffc4 	addi	r2,r2,-1
    cf38:	11c0ac36 	bltu	r2,r7,d1ec <__umoddi3+0x55c>
    cf3c:	01400404 	movi	r5,16
    cf40:	2805883a 	mov	r2,r5
    cf44:	003fa406 	br	cdd8 <__umoddi3+0x148>
    cf48:	b409c83a 	sub	r4,r22,r16
    cf4c:	b105803a 	cmpltu	r2,r22,r4
    cf50:	a187c83a 	sub	r3,r20,r6
    cf54:	18a9c83a 	sub	r20,r3,r2
    cf58:	202d883a 	mov	r22,r4
    cf5c:	003fa906 	br	ce04 <__umoddi3+0x174>
    cf60:	85e0983a 	sll	r16,r16,r23
    cf64:	35c5c83a 	sub	r2,r6,r23
    cf68:	a0a2d83a 	srl	r17,r20,r2
    cf6c:	802ad43a 	srli	r21,r16,16
    cf70:	b084d83a 	srl	r2,r22,r2
    cf74:	a5c6983a 	sll	r3,r20,r23
    cf78:	8809883a 	mov	r4,r17
    cf7c:	a80b883a 	mov	r5,r21
    cf80:	1886b03a 	or	r3,r3,r2
    cf84:	d8c00115 	stw	r3,4(sp)
    cf88:	853fffcc 	andi	r20,r16,65535
    cf8c:	000e70c0 	call	e70c <__udivsi3>
    cf90:	8809883a 	mov	r4,r17
    cf94:	a80b883a 	mov	r5,r21
    cf98:	a0a3383a 	mul	r17,r20,r2
    cf9c:	000e7140 	call	e714 <__umodsi3>
    cfa0:	d9000117 	ldw	r4,4(sp)
    cfa4:	1004943a 	slli	r2,r2,16
    cfa8:	b839883a 	mov	fp,r23
    cfac:	2006d43a 	srli	r3,r4,16
    cfb0:	10c4b03a 	or	r2,r2,r3
    cfb4:	1440022e 	bgeu	r2,r17,cfc0 <__umoddi3+0x330>
    cfb8:	1405883a 	add	r2,r2,r16
    cfbc:	1400962e 	bgeu	r2,r16,d218 <__umoddi3+0x588>
    cfc0:	1463c83a 	sub	r17,r2,r17
    cfc4:	8809883a 	mov	r4,r17
    cfc8:	a80b883a 	mov	r5,r21
    cfcc:	000e70c0 	call	e70c <__udivsi3>
    cfd0:	8809883a 	mov	r4,r17
    cfd4:	a80b883a 	mov	r5,r21
    cfd8:	a0a3383a 	mul	r17,r20,r2
    cfdc:	000e7140 	call	e714 <__umodsi3>
    cfe0:	d9400117 	ldw	r5,4(sp)
    cfe4:	1004943a 	slli	r2,r2,16
    cfe8:	28ffffcc 	andi	r3,r5,65535
    cfec:	10c4b03a 	or	r2,r2,r3
    cff0:	1440042e 	bgeu	r2,r17,d004 <__umoddi3+0x374>
    cff4:	1405883a 	add	r2,r2,r16
    cff8:	14000236 	bltu	r2,r16,d004 <__umoddi3+0x374>
    cffc:	1440012e 	bgeu	r2,r17,d004 <__umoddi3+0x374>
    d000:	1405883a 	add	r2,r2,r16
    d004:	b5ec983a 	sll	r22,r22,r23
    d008:	1463c83a 	sub	r17,r2,r17
    d00c:	003f4406 	br	cd20 <__umoddi3+0x90>
    d010:	3d4fc83a 	sub	r7,r7,r21
    d014:	3546983a 	sll	r3,r6,r21
    d018:	81c4d83a 	srl	r2,r16,r7
    d01c:	a1e2d83a 	srl	r17,r20,r7
    d020:	a54c983a 	sll	r6,r20,r21
    d024:	18aeb03a 	or	r23,r3,r2
    d028:	b828d43a 	srli	r20,r23,16
    d02c:	b1c4d83a 	srl	r2,r22,r7
    d030:	8809883a 	mov	r4,r17
    d034:	a00b883a 	mov	r5,r20
    d038:	308cb03a 	or	r6,r6,r2
    d03c:	d9c00315 	stw	r7,12(sp)
    d040:	d9800215 	stw	r6,8(sp)
    d044:	000e70c0 	call	e70c <__udivsi3>
    d048:	8809883a 	mov	r4,r17
    d04c:	a00b883a 	mov	r5,r20
    d050:	1039883a 	mov	fp,r2
    d054:	000e7140 	call	e714 <__umodsi3>
    d058:	b8ffffcc 	andi	r3,r23,65535
    d05c:	d8c00415 	stw	r3,16(sp)
    d060:	d9000217 	ldw	r4,8(sp)
    d064:	d9400417 	ldw	r5,16(sp)
    d068:	1004943a 	slli	r2,r2,16
    d06c:	2006d43a 	srli	r3,r4,16
    d070:	8560983a 	sll	r16,r16,r21
    d074:	2f23383a 	mul	r17,r5,fp
    d078:	10c4b03a 	or	r2,r2,r3
    d07c:	dc000015 	stw	r16,0(sp)
    d080:	b56c983a 	sll	r22,r22,r21
    d084:	1440032e 	bgeu	r2,r17,d094 <__umoddi3+0x404>
    d088:	15c5883a 	add	r2,r2,r23
    d08c:	e73fffc4 	addi	fp,fp,-1
    d090:	15c05d2e 	bgeu	r2,r23,d208 <__umoddi3+0x578>
    d094:	1463c83a 	sub	r17,r2,r17
    d098:	8809883a 	mov	r4,r17
    d09c:	a00b883a 	mov	r5,r20
    d0a0:	000e70c0 	call	e70c <__udivsi3>
    d0a4:	8809883a 	mov	r4,r17
    d0a8:	a00b883a 	mov	r5,r20
    d0ac:	1021883a 	mov	r16,r2
    d0b0:	000e7140 	call	e714 <__umodsi3>
    d0b4:	d8c00417 	ldw	r3,16(sp)
    d0b8:	d9000217 	ldw	r4,8(sp)
    d0bc:	1004943a 	slli	r2,r2,16
    d0c0:	1c23383a 	mul	r17,r3,r16
    d0c4:	20ffffcc 	andi	r3,r4,65535
    d0c8:	10ceb03a 	or	r7,r2,r3
    d0cc:	3c40032e 	bgeu	r7,r17,d0dc <__umoddi3+0x44c>
    d0d0:	3dcf883a 	add	r7,r7,r23
    d0d4:	843fffc4 	addi	r16,r16,-1
    d0d8:	3dc0472e 	bgeu	r7,r23,d1f8 <__umoddi3+0x568>
    d0dc:	e004943a 	slli	r2,fp,16
    d0e0:	d9400017 	ldw	r5,0(sp)
    d0e4:	3c4fc83a 	sub	r7,r7,r17
    d0e8:	8084b03a 	or	r2,r16,r2
    d0ec:	28ffffcc 	andi	r3,r5,65535
    d0f0:	280cd43a 	srli	r6,r5,16
    d0f4:	100ad43a 	srli	r5,r2,16
    d0f8:	10bfffcc 	andi	r2,r2,65535
    d0fc:	10d1383a 	mul	r8,r2,r3
    d100:	28c7383a 	mul	r3,r5,r3
    d104:	1185383a 	mul	r2,r2,r6
    d108:	4008d43a 	srli	r4,r8,16
    d10c:	298b383a 	mul	r5,r5,r6
    d110:	10c5883a 	add	r2,r2,r3
    d114:	2089883a 	add	r4,r4,r2
    d118:	20c0022e 	bgeu	r4,r3,d124 <__umoddi3+0x494>
    d11c:	00800074 	movhi	r2,1
    d120:	288b883a 	add	r5,r5,r2
    d124:	2004d43a 	srli	r2,r4,16
    d128:	2008943a 	slli	r4,r4,16
    d12c:	40ffffcc 	andi	r3,r8,65535
    d130:	288b883a 	add	r5,r5,r2
    d134:	20c9883a 	add	r4,r4,r3
    d138:	39400b36 	bltu	r7,r5,d168 <__umoddi3+0x4d8>
    d13c:	39403d26 	beq	r7,r5,d234 <__umoddi3+0x5a4>
    d140:	394bc83a 	sub	r5,r7,r5
    d144:	00000f06 	br	d184 <__umoddi3+0x4f4>
    d148:	30c5c83a 	sub	r2,r6,r3
    d14c:	1839883a 	mov	fp,r3
    d150:	b084d83a 	srl	r2,r22,r2
    d154:	a0c6983a 	sll	r3,r20,r3
    d158:	8720983a 	sll	r16,r16,fp
    d15c:	b72c983a 	sll	r22,r22,fp
    d160:	18a8b03a 	or	r20,r3,r2
    d164:	003f3a06 	br	ce50 <__umoddi3+0x1c0>
    d168:	d8c00017 	ldw	r3,0(sp)
    d16c:	20c5c83a 	sub	r2,r4,r3
    d170:	2089803a 	cmpltu	r4,r4,r2
    d174:	2dc7c83a 	sub	r3,r5,r23
    d178:	1907c83a 	sub	r3,r3,r4
    d17c:	38cbc83a 	sub	r5,r7,r3
    d180:	1009883a 	mov	r4,r2
    d184:	b105c83a 	sub	r2,r22,r4
    d188:	b087803a 	cmpltu	r3,r22,r2
    d18c:	28c7c83a 	sub	r3,r5,r3
    d190:	d9400317 	ldw	r5,12(sp)
    d194:	1544d83a 	srl	r2,r2,r21
    d198:	1948983a 	sll	r4,r3,r5
    d19c:	1d46d83a 	srl	r3,r3,r21
    d1a0:	20a4b03a 	or	r18,r4,r2
    d1a4:	9011883a 	mov	r8,r18
    d1a8:	1813883a 	mov	r9,r3
    d1ac:	003ef606 	br	cd88 <__umoddi3+0xf8>
    d1b0:	01400604 	movi	r5,24
    d1b4:	2805883a 	mov	r2,r5
    d1b8:	003ecc06 	br	ccec <__umoddi3+0x5c>
    d1bc:	01400204 	movi	r5,8
    d1c0:	2805883a 	mov	r2,r5
    d1c4:	003ec906 	br	ccec <__umoddi3+0x5c>
    d1c8:	01400204 	movi	r5,8
    d1cc:	2805883a 	mov	r2,r5
    d1d0:	003f0106 	br	cdd8 <__umoddi3+0x148>
    d1d4:	01400204 	movi	r5,8
    d1d8:	2805883a 	mov	r2,r5
    d1dc:	003f1206 	br	ce28 <__umoddi3+0x198>
    d1e0:	01400604 	movi	r5,24
    d1e4:	2805883a 	mov	r2,r5
    d1e8:	003f0f06 	br	ce28 <__umoddi3+0x198>
    d1ec:	01400604 	movi	r5,24
    d1f0:	2805883a 	mov	r2,r5
    d1f4:	003ef806 	br	cdd8 <__umoddi3+0x148>
    d1f8:	3c7fb82e 	bgeu	r7,r17,d0dc <__umoddi3+0x44c>
    d1fc:	843fffc4 	addi	r16,r16,-1
    d200:	3dcf883a 	add	r7,r7,r23
    d204:	003fb506 	br	d0dc <__umoddi3+0x44c>
    d208:	147fa22e 	bgeu	r2,r17,d094 <__umoddi3+0x404>
    d20c:	e73fffc4 	addi	fp,fp,-1
    d210:	15c5883a 	add	r2,r2,r23
    d214:	003f9f06 	br	d094 <__umoddi3+0x404>
    d218:	147f692e 	bgeu	r2,r17,cfc0 <__umoddi3+0x330>
    d21c:	1405883a 	add	r2,r2,r16
    d220:	003f6706 	br	cfc0 <__umoddi3+0x330>
    d224:	1405883a 	add	r2,r2,r16
    d228:	003f1906 	br	ce90 <__umoddi3+0x200>
    d22c:	1405883a 	add	r2,r2,r16
    d230:	003ec906 	br	cd58 <__umoddi3+0xc8>
    d234:	b13fcc36 	bltu	r22,r4,d168 <__umoddi3+0x4d8>
    d238:	000b883a 	mov	r5,zero
    d23c:	003fd106 	br	d184 <__umoddi3+0x4f4>

0000d240 <__nesf2>:
    d240:	defff304 	addi	sp,sp,-52
    d244:	dc400b15 	stw	r17,44(sp)
    d248:	dc400204 	addi	r17,sp,8
    d24c:	dc000a15 	stw	r16,40(sp)
    d250:	d9000015 	stw	r4,0(sp)
    d254:	d9400115 	stw	r5,4(sp)
    d258:	d809883a 	mov	r4,sp
    d25c:	880b883a 	mov	r5,r17
    d260:	dc000604 	addi	r16,sp,24
    d264:	dfc00c15 	stw	ra,48(sp)
    d268:	00004240 	call	424 <__unpack_f>
    d26c:	d9000104 	addi	r4,sp,4
    d270:	800b883a 	mov	r5,r16
    d274:	00004240 	call	424 <__unpack_f>
    d278:	d8800217 	ldw	r2,8(sp)
    d27c:	00c00044 	movi	r3,1
    d280:	180d883a 	mov	r6,r3
    d284:	1880062e 	bgeu	r3,r2,d2a0 <__nesf2+0x60>
    d288:	d8800617 	ldw	r2,24(sp)
    d28c:	8809883a 	mov	r4,r17
    d290:	800b883a 	mov	r5,r16
    d294:	1880022e 	bgeu	r3,r2,d2a0 <__nesf2+0x60>
    d298:	000e79c0 	call	e79c <__fpcmp_parts_f>
    d29c:	100d883a 	mov	r6,r2
    d2a0:	3005883a 	mov	r2,r6
    d2a4:	dfc00c17 	ldw	ra,48(sp)
    d2a8:	dc400b17 	ldw	r17,44(sp)
    d2ac:	dc000a17 	ldw	r16,40(sp)
    d2b0:	dec00d04 	addi	sp,sp,52
    d2b4:	f800283a 	ret

0000d2b8 <__gtsf2>:
    d2b8:	defff304 	addi	sp,sp,-52
    d2bc:	dc400b15 	stw	r17,44(sp)
    d2c0:	dc400204 	addi	r17,sp,8
    d2c4:	dc000a15 	stw	r16,40(sp)
    d2c8:	d9000015 	stw	r4,0(sp)
    d2cc:	d9400115 	stw	r5,4(sp)
    d2d0:	d809883a 	mov	r4,sp
    d2d4:	880b883a 	mov	r5,r17
    d2d8:	dc000604 	addi	r16,sp,24
    d2dc:	dfc00c15 	stw	ra,48(sp)
    d2e0:	00004240 	call	424 <__unpack_f>
    d2e4:	d9000104 	addi	r4,sp,4
    d2e8:	800b883a 	mov	r5,r16
    d2ec:	00004240 	call	424 <__unpack_f>
    d2f0:	d8800217 	ldw	r2,8(sp)
    d2f4:	00c00044 	movi	r3,1
    d2f8:	01bfffc4 	movi	r6,-1
    d2fc:	1880062e 	bgeu	r3,r2,d318 <__gtsf2+0x60>
    d300:	d8800617 	ldw	r2,24(sp)
    d304:	8809883a 	mov	r4,r17
    d308:	800b883a 	mov	r5,r16
    d30c:	1880022e 	bgeu	r3,r2,d318 <__gtsf2+0x60>
    d310:	000e79c0 	call	e79c <__fpcmp_parts_f>
    d314:	100d883a 	mov	r6,r2
    d318:	3005883a 	mov	r2,r6
    d31c:	dfc00c17 	ldw	ra,48(sp)
    d320:	dc400b17 	ldw	r17,44(sp)
    d324:	dc000a17 	ldw	r16,40(sp)
    d328:	dec00d04 	addi	sp,sp,52
    d32c:	f800283a 	ret

0000d330 <__ltsf2>:
    d330:	defff304 	addi	sp,sp,-52
    d334:	dc400b15 	stw	r17,44(sp)
    d338:	dc400204 	addi	r17,sp,8
    d33c:	dc000a15 	stw	r16,40(sp)
    d340:	d9000015 	stw	r4,0(sp)
    d344:	d9400115 	stw	r5,4(sp)
    d348:	d809883a 	mov	r4,sp
    d34c:	880b883a 	mov	r5,r17
    d350:	dc000604 	addi	r16,sp,24
    d354:	dfc00c15 	stw	ra,48(sp)
    d358:	00004240 	call	424 <__unpack_f>
    d35c:	d9000104 	addi	r4,sp,4
    d360:	800b883a 	mov	r5,r16
    d364:	00004240 	call	424 <__unpack_f>
    d368:	d8800217 	ldw	r2,8(sp)
    d36c:	00c00044 	movi	r3,1
    d370:	180d883a 	mov	r6,r3
    d374:	1880062e 	bgeu	r3,r2,d390 <__ltsf2+0x60>
    d378:	d8800617 	ldw	r2,24(sp)
    d37c:	8809883a 	mov	r4,r17
    d380:	800b883a 	mov	r5,r16
    d384:	1880022e 	bgeu	r3,r2,d390 <__ltsf2+0x60>
    d388:	000e79c0 	call	e79c <__fpcmp_parts_f>
    d38c:	100d883a 	mov	r6,r2
    d390:	3005883a 	mov	r2,r6
    d394:	dfc00c17 	ldw	ra,48(sp)
    d398:	dc400b17 	ldw	r17,44(sp)
    d39c:	dc000a17 	ldw	r16,40(sp)
    d3a0:	dec00d04 	addi	sp,sp,52
    d3a4:	f800283a 	ret

0000d3a8 <_fpadd_parts>:
    d3a8:	defff804 	addi	sp,sp,-32
    d3ac:	dcc00315 	stw	r19,12(sp)
    d3b0:	2027883a 	mov	r19,r4
    d3b4:	21000017 	ldw	r4,0(r4)
    d3b8:	00c00044 	movi	r3,1
    d3bc:	dd400515 	stw	r21,20(sp)
    d3c0:	dd000415 	stw	r20,16(sp)
    d3c4:	ddc00715 	stw	r23,28(sp)
    d3c8:	dd800615 	stw	r22,24(sp)
    d3cc:	dc800215 	stw	r18,8(sp)
    d3d0:	dc400115 	stw	r17,4(sp)
    d3d4:	dc000015 	stw	r16,0(sp)
    d3d8:	282b883a 	mov	r21,r5
    d3dc:	3029883a 	mov	r20,r6
    d3e0:	1900632e 	bgeu	r3,r4,d570 <_fpadd_parts+0x1c8>
    d3e4:	28800017 	ldw	r2,0(r5)
    d3e8:	1880812e 	bgeu	r3,r2,d5f0 <_fpadd_parts+0x248>
    d3ec:	00c00104 	movi	r3,4
    d3f0:	20c0dc26 	beq	r4,r3,d764 <_fpadd_parts+0x3bc>
    d3f4:	10c07e26 	beq	r2,r3,d5f0 <_fpadd_parts+0x248>
    d3f8:	00c00084 	movi	r3,2
    d3fc:	10c06726 	beq	r2,r3,d59c <_fpadd_parts+0x1f4>
    d400:	20c07b26 	beq	r4,r3,d5f0 <_fpadd_parts+0x248>
    d404:	9dc00217 	ldw	r23,8(r19)
    d408:	28c00217 	ldw	r3,8(r5)
    d40c:	9c400317 	ldw	r17,12(r19)
    d410:	2bc00317 	ldw	r15,12(r5)
    d414:	b8cdc83a 	sub	r6,r23,r3
    d418:	9c800417 	ldw	r18,16(r19)
    d41c:	2c000417 	ldw	r16,16(r5)
    d420:	3009883a 	mov	r4,r6
    d424:	30009716 	blt	r6,zero,d684 <_fpadd_parts+0x2dc>
    d428:	00800fc4 	movi	r2,63
    d42c:	11806b16 	blt	r2,r6,d5dc <_fpadd_parts+0x234>
    d430:	0100a40e 	bge	zero,r4,d6c4 <_fpadd_parts+0x31c>
    d434:	35bff804 	addi	r22,r6,-32
    d438:	b000bc16 	blt	r22,zero,d72c <_fpadd_parts+0x384>
    d43c:	8596d83a 	srl	r11,r16,r22
    d440:	0019883a 	mov	r12,zero
    d444:	0013883a 	mov	r9,zero
    d448:	01000044 	movi	r4,1
    d44c:	0015883a 	mov	r10,zero
    d450:	b000be16 	blt	r22,zero,d74c <_fpadd_parts+0x3a4>
    d454:	2590983a 	sll	r8,r4,r22
    d458:	000f883a 	mov	r7,zero
    d45c:	00bfffc4 	movi	r2,-1
    d460:	3889883a 	add	r4,r7,r2
    d464:	408b883a 	add	r5,r8,r2
    d468:	21cd803a 	cmpltu	r6,r4,r7
    d46c:	314b883a 	add	r5,r6,r5
    d470:	7904703a 	and	r2,r15,r4
    d474:	8146703a 	and	r3,r16,r5
    d478:	10c4b03a 	or	r2,r2,r3
    d47c:	10000226 	beq	r2,zero,d488 <_fpadd_parts+0xe0>
    d480:	02400044 	movi	r9,1
    d484:	0015883a 	mov	r10,zero
    d488:	5a5eb03a 	or	r15,r11,r9
    d48c:	62a0b03a 	or	r16,r12,r10
    d490:	99400117 	ldw	r5,4(r19)
    d494:	a8800117 	ldw	r2,4(r21)
    d498:	28806e26 	beq	r5,r2,d654 <_fpadd_parts+0x2ac>
    d49c:	28006626 	beq	r5,zero,d638 <_fpadd_parts+0x290>
    d4a0:	7c45c83a 	sub	r2,r15,r17
    d4a4:	7889803a 	cmpltu	r4,r15,r2
    d4a8:	8487c83a 	sub	r3,r16,r18
    d4ac:	1909c83a 	sub	r4,r3,r4
    d4b0:	100d883a 	mov	r6,r2
    d4b4:	200f883a 	mov	r7,r4
    d4b8:	38007716 	blt	r7,zero,d698 <_fpadd_parts+0x2f0>
    d4bc:	a5c00215 	stw	r23,8(r20)
    d4c0:	a1c00415 	stw	r7,16(r20)
    d4c4:	a0000115 	stw	zero,4(r20)
    d4c8:	a1800315 	stw	r6,12(r20)
    d4cc:	a2000317 	ldw	r8,12(r20)
    d4d0:	a2400417 	ldw	r9,16(r20)
    d4d4:	00bfffc4 	movi	r2,-1
    d4d8:	408b883a 	add	r5,r8,r2
    d4dc:	2a09803a 	cmpltu	r4,r5,r8
    d4e0:	488d883a 	add	r6,r9,r2
    d4e4:	01c40034 	movhi	r7,4096
    d4e8:	39ffffc4 	addi	r7,r7,-1
    d4ec:	218d883a 	add	r6,r4,r6
    d4f0:	39801736 	bltu	r7,r6,d550 <_fpadd_parts+0x1a8>
    d4f4:	31c06526 	beq	r6,r7,d68c <_fpadd_parts+0x2e4>
    d4f8:	a3000217 	ldw	r12,8(r20)
    d4fc:	4209883a 	add	r4,r8,r8
    d500:	00bfffc4 	movi	r2,-1
    d504:	220f803a 	cmpltu	r7,r4,r8
    d508:	4a4b883a 	add	r5,r9,r9
    d50c:	394f883a 	add	r7,r7,r5
    d510:	2095883a 	add	r10,r4,r2
    d514:	3897883a 	add	r11,r7,r2
    d518:	510d803a 	cmpltu	r6,r10,r4
    d51c:	6099883a 	add	r12,r12,r2
    d520:	32d7883a 	add	r11,r6,r11
    d524:	00840034 	movhi	r2,4096
    d528:	10bfffc4 	addi	r2,r2,-1
    d52c:	2011883a 	mov	r8,r4
    d530:	3813883a 	mov	r9,r7
    d534:	a1000315 	stw	r4,12(r20)
    d538:	a1c00415 	stw	r7,16(r20)
    d53c:	a3000215 	stw	r12,8(r20)
    d540:	12c00336 	bltu	r2,r11,d550 <_fpadd_parts+0x1a8>
    d544:	58bfed1e 	bne	r11,r2,d4fc <_fpadd_parts+0x154>
    d548:	00bfff84 	movi	r2,-2
    d54c:	12bfeb2e 	bgeu	r2,r10,d4fc <_fpadd_parts+0x154>
    d550:	a2800417 	ldw	r10,16(r20)
    d554:	008000c4 	movi	r2,3
    d558:	00c80034 	movhi	r3,8192
    d55c:	18ffffc4 	addi	r3,r3,-1
    d560:	a2400317 	ldw	r9,12(r20)
    d564:	a0800015 	stw	r2,0(r20)
    d568:	1a802336 	bltu	r3,r10,d5f8 <_fpadd_parts+0x250>
    d56c:	a027883a 	mov	r19,r20
    d570:	9805883a 	mov	r2,r19
    d574:	ddc00717 	ldw	r23,28(sp)
    d578:	dd800617 	ldw	r22,24(sp)
    d57c:	dd400517 	ldw	r21,20(sp)
    d580:	dd000417 	ldw	r20,16(sp)
    d584:	dcc00317 	ldw	r19,12(sp)
    d588:	dc800217 	ldw	r18,8(sp)
    d58c:	dc400117 	ldw	r17,4(sp)
    d590:	dc000017 	ldw	r16,0(sp)
    d594:	dec00804 	addi	sp,sp,32
    d598:	f800283a 	ret
    d59c:	20fff41e 	bne	r4,r3,d570 <_fpadd_parts+0x1c8>
    d5a0:	31000015 	stw	r4,0(r6)
    d5a4:	98800117 	ldw	r2,4(r19)
    d5a8:	30800115 	stw	r2,4(r6)
    d5ac:	98c00217 	ldw	r3,8(r19)
    d5b0:	30c00215 	stw	r3,8(r6)
    d5b4:	98800317 	ldw	r2,12(r19)
    d5b8:	30800315 	stw	r2,12(r6)
    d5bc:	98c00417 	ldw	r3,16(r19)
    d5c0:	30c00415 	stw	r3,16(r6)
    d5c4:	98800117 	ldw	r2,4(r19)
    d5c8:	28c00117 	ldw	r3,4(r5)
    d5cc:	3027883a 	mov	r19,r6
    d5d0:	10c4703a 	and	r2,r2,r3
    d5d4:	30800115 	stw	r2,4(r6)
    d5d8:	003fe506 	br	d570 <_fpadd_parts+0x1c8>
    d5dc:	1dc02616 	blt	r3,r23,d678 <_fpadd_parts+0x2d0>
    d5e0:	0023883a 	mov	r17,zero
    d5e4:	182f883a 	mov	r23,r3
    d5e8:	0025883a 	mov	r18,zero
    d5ec:	003fa806 	br	d490 <_fpadd_parts+0xe8>
    d5f0:	a827883a 	mov	r19,r21
    d5f4:	003fde06 	br	d570 <_fpadd_parts+0x1c8>
    d5f8:	01800044 	movi	r6,1
    d5fc:	500497fa 	slli	r2,r10,31
    d600:	4808d07a 	srli	r4,r9,1
    d604:	518ad83a 	srl	r5,r10,r6
    d608:	a2000217 	ldw	r8,8(r20)
    d60c:	1108b03a 	or	r4,r2,r4
    d610:	0007883a 	mov	r3,zero
    d614:	4984703a 	and	r2,r9,r6
    d618:	208cb03a 	or	r6,r4,r2
    d61c:	28ceb03a 	or	r7,r5,r3
    d620:	42000044 	addi	r8,r8,1
    d624:	a027883a 	mov	r19,r20
    d628:	a1c00415 	stw	r7,16(r20)
    d62c:	a2000215 	stw	r8,8(r20)
    d630:	a1800315 	stw	r6,12(r20)
    d634:	003fce06 	br	d570 <_fpadd_parts+0x1c8>
    d638:	8bc5c83a 	sub	r2,r17,r15
    d63c:	8889803a 	cmpltu	r4,r17,r2
    d640:	9407c83a 	sub	r3,r18,r16
    d644:	1909c83a 	sub	r4,r3,r4
    d648:	100d883a 	mov	r6,r2
    d64c:	200f883a 	mov	r7,r4
    d650:	003f9906 	br	d4b8 <_fpadd_parts+0x110>
    d654:	7c45883a 	add	r2,r15,r17
    d658:	13c9803a 	cmpltu	r4,r2,r15
    d65c:	8487883a 	add	r3,r16,r18
    d660:	20c9883a 	add	r4,r4,r3
    d664:	a1400115 	stw	r5,4(r20)
    d668:	a5c00215 	stw	r23,8(r20)
    d66c:	a0800315 	stw	r2,12(r20)
    d670:	a1000415 	stw	r4,16(r20)
    d674:	003fb606 	br	d550 <_fpadd_parts+0x1a8>
    d678:	001f883a 	mov	r15,zero
    d67c:	0021883a 	mov	r16,zero
    d680:	003f8306 	br	d490 <_fpadd_parts+0xe8>
    d684:	018dc83a 	sub	r6,zero,r6
    d688:	003f6706 	br	d428 <_fpadd_parts+0x80>
    d68c:	00bfff84 	movi	r2,-2
    d690:	117faf36 	bltu	r2,r5,d550 <_fpadd_parts+0x1a8>
    d694:	003f9806 	br	d4f8 <_fpadd_parts+0x150>
    d698:	0005883a 	mov	r2,zero
    d69c:	1189c83a 	sub	r4,r2,r6
    d6a0:	1105803a 	cmpltu	r2,r2,r4
    d6a4:	01cbc83a 	sub	r5,zero,r7
    d6a8:	2885c83a 	sub	r2,r5,r2
    d6ac:	01800044 	movi	r6,1
    d6b0:	a1800115 	stw	r6,4(r20)
    d6b4:	a5c00215 	stw	r23,8(r20)
    d6b8:	a1000315 	stw	r4,12(r20)
    d6bc:	a0800415 	stw	r2,16(r20)
    d6c0:	003f8206 	br	d4cc <_fpadd_parts+0x124>
    d6c4:	203f7226 	beq	r4,zero,d490 <_fpadd_parts+0xe8>
    d6c8:	35bff804 	addi	r22,r6,-32
    d6cc:	b9af883a 	add	r23,r23,r6
    d6d0:	b0003116 	blt	r22,zero,d798 <_fpadd_parts+0x3f0>
    d6d4:	959ad83a 	srl	r13,r18,r22
    d6d8:	001d883a 	mov	r14,zero
    d6dc:	000f883a 	mov	r7,zero
    d6e0:	01000044 	movi	r4,1
    d6e4:	0011883a 	mov	r8,zero
    d6e8:	b0002516 	blt	r22,zero,d780 <_fpadd_parts+0x3d8>
    d6ec:	2594983a 	sll	r10,r4,r22
    d6f0:	0013883a 	mov	r9,zero
    d6f4:	00bfffc4 	movi	r2,-1
    d6f8:	4889883a 	add	r4,r9,r2
    d6fc:	508b883a 	add	r5,r10,r2
    d700:	224d803a 	cmpltu	r6,r4,r9
    d704:	314b883a 	add	r5,r6,r5
    d708:	8904703a 	and	r2,r17,r4
    d70c:	9146703a 	and	r3,r18,r5
    d710:	10c4b03a 	or	r2,r2,r3
    d714:	10000226 	beq	r2,zero,d720 <_fpadd_parts+0x378>
    d718:	01c00044 	movi	r7,1
    d71c:	0011883a 	mov	r8,zero
    d720:	69e2b03a 	or	r17,r13,r7
    d724:	7224b03a 	or	r18,r14,r8
    d728:	003f5906 	br	d490 <_fpadd_parts+0xe8>
    d72c:	8407883a 	add	r3,r16,r16
    d730:	008007c4 	movi	r2,31
    d734:	1185c83a 	sub	r2,r2,r6
    d738:	1886983a 	sll	r3,r3,r2
    d73c:	7996d83a 	srl	r11,r15,r6
    d740:	8198d83a 	srl	r12,r16,r6
    d744:	1ad6b03a 	or	r11,r3,r11
    d748:	003f3e06 	br	d444 <_fpadd_parts+0x9c>
    d74c:	2006d07a 	srli	r3,r4,1
    d750:	008007c4 	movi	r2,31
    d754:	1185c83a 	sub	r2,r2,r6
    d758:	1890d83a 	srl	r8,r3,r2
    d75c:	218e983a 	sll	r7,r4,r6
    d760:	003f3e06 	br	d45c <_fpadd_parts+0xb4>
    d764:	113f821e 	bne	r2,r4,d570 <_fpadd_parts+0x1c8>
    d768:	28c00117 	ldw	r3,4(r5)
    d76c:	98800117 	ldw	r2,4(r19)
    d770:	10ff7f26 	beq	r2,r3,d570 <_fpadd_parts+0x1c8>
    d774:	04c00074 	movhi	r19,1
    d778:	9cc75e04 	addi	r19,r19,7544
    d77c:	003f7c06 	br	d570 <_fpadd_parts+0x1c8>
    d780:	2006d07a 	srli	r3,r4,1
    d784:	008007c4 	movi	r2,31
    d788:	1185c83a 	sub	r2,r2,r6
    d78c:	1894d83a 	srl	r10,r3,r2
    d790:	2192983a 	sll	r9,r4,r6
    d794:	003fd706 	br	d6f4 <_fpadd_parts+0x34c>
    d798:	9487883a 	add	r3,r18,r18
    d79c:	008007c4 	movi	r2,31
    d7a0:	1185c83a 	sub	r2,r2,r6
    d7a4:	1886983a 	sll	r3,r3,r2
    d7a8:	899ad83a 	srl	r13,r17,r6
    d7ac:	919cd83a 	srl	r14,r18,r6
    d7b0:	1b5ab03a 	or	r13,r3,r13
    d7b4:	003fc906 	br	d6dc <_fpadd_parts+0x334>

0000d7b8 <__subdf3>:
    d7b8:	deffea04 	addi	sp,sp,-88
    d7bc:	dcc01415 	stw	r19,80(sp)
    d7c0:	dcc00404 	addi	r19,sp,16
    d7c4:	2011883a 	mov	r8,r4
    d7c8:	2813883a 	mov	r9,r5
    d7cc:	dc401315 	stw	r17,76(sp)
    d7d0:	d809883a 	mov	r4,sp
    d7d4:	980b883a 	mov	r5,r19
    d7d8:	dc400904 	addi	r17,sp,36
    d7dc:	dfc01515 	stw	ra,84(sp)
    d7e0:	da400115 	stw	r9,4(sp)
    d7e4:	d9c00315 	stw	r7,12(sp)
    d7e8:	da000015 	stw	r8,0(sp)
    d7ec:	d9800215 	stw	r6,8(sp)
    d7f0:	000eb840 	call	eb84 <__unpack_d>
    d7f4:	d9000204 	addi	r4,sp,8
    d7f8:	880b883a 	mov	r5,r17
    d7fc:	000eb840 	call	eb84 <__unpack_d>
    d800:	d8800a17 	ldw	r2,40(sp)
    d804:	880b883a 	mov	r5,r17
    d808:	9809883a 	mov	r4,r19
    d80c:	d9800e04 	addi	r6,sp,56
    d810:	1080005c 	xori	r2,r2,1
    d814:	d8800a15 	stw	r2,40(sp)
    d818:	000d3a80 	call	d3a8 <_fpadd_parts>
    d81c:	1009883a 	mov	r4,r2
    d820:	000e8700 	call	e870 <__pack_d>
    d824:	dfc01517 	ldw	ra,84(sp)
    d828:	dcc01417 	ldw	r19,80(sp)
    d82c:	dc401317 	ldw	r17,76(sp)
    d830:	dec01604 	addi	sp,sp,88
    d834:	f800283a 	ret

0000d838 <__adddf3>:
    d838:	deffea04 	addi	sp,sp,-88
    d83c:	dcc01415 	stw	r19,80(sp)
    d840:	dcc00404 	addi	r19,sp,16
    d844:	2011883a 	mov	r8,r4
    d848:	2813883a 	mov	r9,r5
    d84c:	dc401315 	stw	r17,76(sp)
    d850:	d809883a 	mov	r4,sp
    d854:	980b883a 	mov	r5,r19
    d858:	dc400904 	addi	r17,sp,36
    d85c:	dfc01515 	stw	ra,84(sp)
    d860:	da400115 	stw	r9,4(sp)
    d864:	d9c00315 	stw	r7,12(sp)
    d868:	da000015 	stw	r8,0(sp)
    d86c:	d9800215 	stw	r6,8(sp)
    d870:	000eb840 	call	eb84 <__unpack_d>
    d874:	d9000204 	addi	r4,sp,8
    d878:	880b883a 	mov	r5,r17
    d87c:	000eb840 	call	eb84 <__unpack_d>
    d880:	d9800e04 	addi	r6,sp,56
    d884:	9809883a 	mov	r4,r19
    d888:	880b883a 	mov	r5,r17
    d88c:	000d3a80 	call	d3a8 <_fpadd_parts>
    d890:	1009883a 	mov	r4,r2
    d894:	000e8700 	call	e870 <__pack_d>
    d898:	dfc01517 	ldw	ra,84(sp)
    d89c:	dcc01417 	ldw	r19,80(sp)
    d8a0:	dc401317 	ldw	r17,76(sp)
    d8a4:	dec01604 	addi	sp,sp,88
    d8a8:	f800283a 	ret

0000d8ac <__muldf3>:
    d8ac:	deffe004 	addi	sp,sp,-128
    d8b0:	dc401815 	stw	r17,96(sp)
    d8b4:	dc400404 	addi	r17,sp,16
    d8b8:	2011883a 	mov	r8,r4
    d8bc:	2813883a 	mov	r9,r5
    d8c0:	dc001715 	stw	r16,92(sp)
    d8c4:	d809883a 	mov	r4,sp
    d8c8:	880b883a 	mov	r5,r17
    d8cc:	dc000904 	addi	r16,sp,36
    d8d0:	dfc01f15 	stw	ra,124(sp)
    d8d4:	da400115 	stw	r9,4(sp)
    d8d8:	d9c00315 	stw	r7,12(sp)
    d8dc:	da000015 	stw	r8,0(sp)
    d8e0:	d9800215 	stw	r6,8(sp)
    d8e4:	ddc01e15 	stw	r23,120(sp)
    d8e8:	dd801d15 	stw	r22,116(sp)
    d8ec:	dd401c15 	stw	r21,112(sp)
    d8f0:	dd001b15 	stw	r20,108(sp)
    d8f4:	dcc01a15 	stw	r19,104(sp)
    d8f8:	dc801915 	stw	r18,100(sp)
    d8fc:	000eb840 	call	eb84 <__unpack_d>
    d900:	d9000204 	addi	r4,sp,8
    d904:	800b883a 	mov	r5,r16
    d908:	000eb840 	call	eb84 <__unpack_d>
    d90c:	d9000417 	ldw	r4,16(sp)
    d910:	00800044 	movi	r2,1
    d914:	1100102e 	bgeu	r2,r4,d958 <__muldf3+0xac>
    d918:	d8c00917 	ldw	r3,36(sp)
    d91c:	10c0062e 	bgeu	r2,r3,d938 <__muldf3+0x8c>
    d920:	00800104 	movi	r2,4
    d924:	20800a26 	beq	r4,r2,d950 <__muldf3+0xa4>
    d928:	1880cc26 	beq	r3,r2,dc5c <__muldf3+0x3b0>
    d92c:	00800084 	movi	r2,2
    d930:	20800926 	beq	r4,r2,d958 <__muldf3+0xac>
    d934:	1880191e 	bne	r3,r2,d99c <__muldf3+0xf0>
    d938:	d8c00a17 	ldw	r3,40(sp)
    d93c:	d8800517 	ldw	r2,20(sp)
    d940:	8009883a 	mov	r4,r16
    d944:	10c4c03a 	cmpne	r2,r2,r3
    d948:	d8800a15 	stw	r2,40(sp)
    d94c:	00000706 	br	d96c <__muldf3+0xc0>
    d950:	00800084 	movi	r2,2
    d954:	1880c326 	beq	r3,r2,dc64 <__muldf3+0x3b8>
    d958:	d8800517 	ldw	r2,20(sp)
    d95c:	d8c00a17 	ldw	r3,40(sp)
    d960:	8809883a 	mov	r4,r17
    d964:	10c4c03a 	cmpne	r2,r2,r3
    d968:	d8800515 	stw	r2,20(sp)
    d96c:	000e8700 	call	e870 <__pack_d>
    d970:	dfc01f17 	ldw	ra,124(sp)
    d974:	ddc01e17 	ldw	r23,120(sp)
    d978:	dd801d17 	ldw	r22,116(sp)
    d97c:	dd401c17 	ldw	r21,112(sp)
    d980:	dd001b17 	ldw	r20,108(sp)
    d984:	dcc01a17 	ldw	r19,104(sp)
    d988:	dc801917 	ldw	r18,100(sp)
    d98c:	dc401817 	ldw	r17,96(sp)
    d990:	dc001717 	ldw	r16,92(sp)
    d994:	dec02004 	addi	sp,sp,128
    d998:	f800283a 	ret
    d99c:	dd800717 	ldw	r22,28(sp)
    d9a0:	dc800c17 	ldw	r18,48(sp)
    d9a4:	002b883a 	mov	r21,zero
    d9a8:	0023883a 	mov	r17,zero
    d9ac:	a80b883a 	mov	r5,r21
    d9b0:	b00d883a 	mov	r6,r22
    d9b4:	880f883a 	mov	r7,r17
    d9b8:	ddc00817 	ldw	r23,32(sp)
    d9bc:	dcc00d17 	ldw	r19,52(sp)
    d9c0:	9009883a 	mov	r4,r18
    d9c4:	000c5780 	call	c578 <__muldi3>
    d9c8:	001b883a 	mov	r13,zero
    d9cc:	680f883a 	mov	r7,r13
    d9d0:	b009883a 	mov	r4,r22
    d9d4:	000b883a 	mov	r5,zero
    d9d8:	980d883a 	mov	r6,r19
    d9dc:	b82d883a 	mov	r22,r23
    d9e0:	002f883a 	mov	r23,zero
    d9e4:	db401615 	stw	r13,88(sp)
    d9e8:	d8801315 	stw	r2,76(sp)
    d9ec:	d8c01415 	stw	r3,80(sp)
    d9f0:	dcc01515 	stw	r19,84(sp)
    d9f4:	000c5780 	call	c578 <__muldi3>
    d9f8:	b00d883a 	mov	r6,r22
    d9fc:	000b883a 	mov	r5,zero
    da00:	9009883a 	mov	r4,r18
    da04:	b80f883a 	mov	r7,r23
    da08:	1021883a 	mov	r16,r2
    da0c:	1823883a 	mov	r17,r3
    da10:	000c5780 	call	c578 <__muldi3>
    da14:	8085883a 	add	r2,r16,r2
    da18:	140d803a 	cmpltu	r6,r2,r16
    da1c:	88c7883a 	add	r3,r17,r3
    da20:	30cd883a 	add	r6,r6,r3
    da24:	1029883a 	mov	r20,r2
    da28:	302b883a 	mov	r21,r6
    da2c:	da801317 	ldw	r10,76(sp)
    da30:	dac01417 	ldw	r11,80(sp)
    da34:	db001517 	ldw	r12,84(sp)
    da38:	db401617 	ldw	r13,88(sp)
    da3c:	3440612e 	bgeu	r6,r17,dbc4 <__muldf3+0x318>
    da40:	0009883a 	mov	r4,zero
    da44:	5105883a 	add	r2,r10,r4
    da48:	128d803a 	cmpltu	r6,r2,r10
    da4c:	5d07883a 	add	r3,r11,r20
    da50:	30cd883a 	add	r6,r6,r3
    da54:	0021883a 	mov	r16,zero
    da58:	04400044 	movi	r17,1
    da5c:	1025883a 	mov	r18,r2
    da60:	3027883a 	mov	r19,r6
    da64:	32c06236 	bltu	r6,r11,dbf0 <__muldf3+0x344>
    da68:	59807a26 	beq	r11,r6,dc54 <__muldf3+0x3a8>
    da6c:	680b883a 	mov	r5,r13
    da70:	b80f883a 	mov	r7,r23
    da74:	6009883a 	mov	r4,r12
    da78:	b00d883a 	mov	r6,r22
    da7c:	000c5780 	call	c578 <__muldi3>
    da80:	1009883a 	mov	r4,r2
    da84:	000f883a 	mov	r7,zero
    da88:	1545883a 	add	r2,r2,r21
    da8c:	1111803a 	cmpltu	r8,r2,r4
    da90:	19c7883a 	add	r3,r3,r7
    da94:	40c7883a 	add	r3,r8,r3
    da98:	88cb883a 	add	r5,r17,r3
    da9c:	d8c00617 	ldw	r3,24(sp)
    daa0:	8089883a 	add	r4,r16,r2
    daa4:	d8800b17 	ldw	r2,44(sp)
    daa8:	18c00104 	addi	r3,r3,4
    daac:	240d803a 	cmpltu	r6,r4,r16
    dab0:	10c7883a 	add	r3,r2,r3
    dab4:	2013883a 	mov	r9,r4
    dab8:	d8800a17 	ldw	r2,40(sp)
    dabc:	d9000517 	ldw	r4,20(sp)
    dac0:	314d883a 	add	r6,r6,r5
    dac4:	3015883a 	mov	r10,r6
    dac8:	2088c03a 	cmpne	r4,r4,r2
    dacc:	00880034 	movhi	r2,8192
    dad0:	10bfffc4 	addi	r2,r2,-1
    dad4:	d9000f15 	stw	r4,60(sp)
    dad8:	d8c01015 	stw	r3,64(sp)
    dadc:	1180162e 	bgeu	r2,r6,db38 <__muldf3+0x28c>
    dae0:	1811883a 	mov	r8,r3
    dae4:	101f883a 	mov	r15,r2
    dae8:	980497fa 	slli	r2,r19,31
    daec:	9016d07a 	srli	r11,r18,1
    daf0:	500697fa 	slli	r3,r10,31
    daf4:	480cd07a 	srli	r6,r9,1
    daf8:	500ed07a 	srli	r7,r10,1
    dafc:	12d6b03a 	or	r11,r2,r11
    db00:	00800044 	movi	r2,1
    db04:	198cb03a 	or	r6,r3,r6
    db08:	4888703a 	and	r4,r9,r2
    db0c:	9818d07a 	srli	r12,r19,1
    db10:	001b883a 	mov	r13,zero
    db14:	03a00034 	movhi	r14,32768
    db18:	3013883a 	mov	r9,r6
    db1c:	3815883a 	mov	r10,r7
    db20:	4091883a 	add	r8,r8,r2
    db24:	20000226 	beq	r4,zero,db30 <__muldf3+0x284>
    db28:	5b64b03a 	or	r18,r11,r13
    db2c:	63a6b03a 	or	r19,r12,r14
    db30:	7abfed36 	bltu	r15,r10,dae8 <__muldf3+0x23c>
    db34:	da001015 	stw	r8,64(sp)
    db38:	00840034 	movhi	r2,4096
    db3c:	10bfffc4 	addi	r2,r2,-1
    db40:	12801436 	bltu	r2,r10,db94 <__muldf3+0x2e8>
    db44:	da001017 	ldw	r8,64(sp)
    db48:	101f883a 	mov	r15,r2
    db4c:	4a45883a 	add	r2,r9,r9
    db50:	124d803a 	cmpltu	r6,r2,r9
    db54:	5287883a 	add	r3,r10,r10
    db58:	9497883a 	add	r11,r18,r18
    db5c:	5c8f803a 	cmpltu	r7,r11,r18
    db60:	9cd9883a 	add	r12,r19,r19
    db64:	01000044 	movi	r4,1
    db68:	30cd883a 	add	r6,r6,r3
    db6c:	3b0f883a 	add	r7,r7,r12
    db70:	423fffc4 	addi	r8,r8,-1
    db74:	1013883a 	mov	r9,r2
    db78:	3015883a 	mov	r10,r6
    db7c:	111ab03a 	or	r13,r2,r4
    db80:	98003016 	blt	r19,zero,dc44 <__muldf3+0x398>
    db84:	5825883a 	mov	r18,r11
    db88:	3827883a 	mov	r19,r7
    db8c:	7abfef2e 	bgeu	r15,r10,db4c <__muldf3+0x2a0>
    db90:	da001015 	stw	r8,64(sp)
    db94:	00803fc4 	movi	r2,255
    db98:	488e703a 	and	r7,r9,r2
    db9c:	00802004 	movi	r2,128
    dba0:	0007883a 	mov	r3,zero
    dba4:	0011883a 	mov	r8,zero
    dba8:	38801826 	beq	r7,r2,dc0c <__muldf3+0x360>
    dbac:	008000c4 	movi	r2,3
    dbb0:	d9000e04 	addi	r4,sp,56
    dbb4:	da801215 	stw	r10,72(sp)
    dbb8:	d8800e15 	stw	r2,56(sp)
    dbbc:	da401115 	stw	r9,68(sp)
    dbc0:	003f6a06 	br	d96c <__muldf3+0xc0>
    dbc4:	89802126 	beq	r17,r6,dc4c <__muldf3+0x3a0>
    dbc8:	0009883a 	mov	r4,zero
    dbcc:	5105883a 	add	r2,r10,r4
    dbd0:	128d803a 	cmpltu	r6,r2,r10
    dbd4:	5d07883a 	add	r3,r11,r20
    dbd8:	30cd883a 	add	r6,r6,r3
    dbdc:	0021883a 	mov	r16,zero
    dbe0:	0023883a 	mov	r17,zero
    dbe4:	1025883a 	mov	r18,r2
    dbe8:	3027883a 	mov	r19,r6
    dbec:	32ff9e2e 	bgeu	r6,r11,da68 <__muldf3+0x1bc>
    dbf0:	00800044 	movi	r2,1
    dbf4:	8089883a 	add	r4,r16,r2
    dbf8:	240d803a 	cmpltu	r6,r4,r16
    dbfc:	344d883a 	add	r6,r6,r17
    dc00:	2021883a 	mov	r16,r4
    dc04:	3023883a 	mov	r17,r6
    dc08:	003f9806 	br	da6c <__muldf3+0x1c0>
    dc0c:	403fe71e 	bne	r8,zero,dbac <__muldf3+0x300>
    dc10:	01004004 	movi	r4,256
    dc14:	4904703a 	and	r2,r9,r4
    dc18:	10c4b03a 	or	r2,r2,r3
    dc1c:	103fe31e 	bne	r2,zero,dbac <__muldf3+0x300>
    dc20:	94c4b03a 	or	r2,r18,r19
    dc24:	103fe126 	beq	r2,zero,dbac <__muldf3+0x300>
    dc28:	49c5883a 	add	r2,r9,r7
    dc2c:	1251803a 	cmpltu	r8,r2,r9
    dc30:	4291883a 	add	r8,r8,r10
    dc34:	013fc004 	movi	r4,-256
    dc38:	1112703a 	and	r9,r2,r4
    dc3c:	4015883a 	mov	r10,r8
    dc40:	003fda06 	br	dbac <__muldf3+0x300>
    dc44:	6813883a 	mov	r9,r13
    dc48:	003fce06 	br	db84 <__muldf3+0x2d8>
    dc4c:	143f7c36 	bltu	r2,r16,da40 <__muldf3+0x194>
    dc50:	003fdd06 	br	dbc8 <__muldf3+0x31c>
    dc54:	12bf852e 	bgeu	r2,r10,da6c <__muldf3+0x1c0>
    dc58:	003fe506 	br	dbf0 <__muldf3+0x344>
    dc5c:	00800084 	movi	r2,2
    dc60:	20bf351e 	bne	r4,r2,d938 <__muldf3+0x8c>
    dc64:	01000074 	movhi	r4,1
    dc68:	21075e04 	addi	r4,r4,7544
    dc6c:	003f3f06 	br	d96c <__muldf3+0xc0>

0000dc70 <__divdf3>:
    dc70:	deffed04 	addi	sp,sp,-76
    dc74:	dcc01115 	stw	r19,68(sp)
    dc78:	dcc00404 	addi	r19,sp,16
    dc7c:	2011883a 	mov	r8,r4
    dc80:	2813883a 	mov	r9,r5
    dc84:	dc000e15 	stw	r16,56(sp)
    dc88:	d809883a 	mov	r4,sp
    dc8c:	980b883a 	mov	r5,r19
    dc90:	dc000904 	addi	r16,sp,36
    dc94:	dfc01215 	stw	ra,72(sp)
    dc98:	da400115 	stw	r9,4(sp)
    dc9c:	d9c00315 	stw	r7,12(sp)
    dca0:	da000015 	stw	r8,0(sp)
    dca4:	d9800215 	stw	r6,8(sp)
    dca8:	dc801015 	stw	r18,64(sp)
    dcac:	dc400f15 	stw	r17,60(sp)
    dcb0:	000eb840 	call	eb84 <__unpack_d>
    dcb4:	d9000204 	addi	r4,sp,8
    dcb8:	800b883a 	mov	r5,r16
    dcbc:	000eb840 	call	eb84 <__unpack_d>
    dcc0:	d9000417 	ldw	r4,16(sp)
    dcc4:	00800044 	movi	r2,1
    dcc8:	11000b2e 	bgeu	r2,r4,dcf8 <__divdf3+0x88>
    dccc:	d9400917 	ldw	r5,36(sp)
    dcd0:	1140762e 	bgeu	r2,r5,deac <__divdf3+0x23c>
    dcd4:	d8800517 	ldw	r2,20(sp)
    dcd8:	d8c00a17 	ldw	r3,40(sp)
    dcdc:	01800104 	movi	r6,4
    dce0:	10c4f03a 	xor	r2,r2,r3
    dce4:	d8800515 	stw	r2,20(sp)
    dce8:	21800226 	beq	r4,r6,dcf4 <__divdf3+0x84>
    dcec:	00800084 	movi	r2,2
    dcf0:	2080141e 	bne	r4,r2,dd44 <__divdf3+0xd4>
    dcf4:	29000926 	beq	r5,r4,dd1c <__divdf3+0xac>
    dcf8:	9809883a 	mov	r4,r19
    dcfc:	000e8700 	call	e870 <__pack_d>
    dd00:	dfc01217 	ldw	ra,72(sp)
    dd04:	dcc01117 	ldw	r19,68(sp)
    dd08:	dc801017 	ldw	r18,64(sp)
    dd0c:	dc400f17 	ldw	r17,60(sp)
    dd10:	dc000e17 	ldw	r16,56(sp)
    dd14:	dec01304 	addi	sp,sp,76
    dd18:	f800283a 	ret
    dd1c:	01000074 	movhi	r4,1
    dd20:	21075e04 	addi	r4,r4,7544
    dd24:	000e8700 	call	e870 <__pack_d>
    dd28:	dfc01217 	ldw	ra,72(sp)
    dd2c:	dcc01117 	ldw	r19,68(sp)
    dd30:	dc801017 	ldw	r18,64(sp)
    dd34:	dc400f17 	ldw	r17,60(sp)
    dd38:	dc000e17 	ldw	r16,56(sp)
    dd3c:	dec01304 	addi	sp,sp,76
    dd40:	f800283a 	ret
    dd44:	29805b26 	beq	r5,r6,deb4 <__divdf3+0x244>
    dd48:	28802d26 	beq	r5,r2,de00 <__divdf3+0x190>
    dd4c:	d8c00617 	ldw	r3,24(sp)
    dd50:	d8800b17 	ldw	r2,44(sp)
    dd54:	d9c00817 	ldw	r7,32(sp)
    dd58:	dc400d17 	ldw	r17,52(sp)
    dd5c:	188bc83a 	sub	r5,r3,r2
    dd60:	d9800717 	ldw	r6,28(sp)
    dd64:	dc000c17 	ldw	r16,48(sp)
    dd68:	d9400615 	stw	r5,24(sp)
    dd6c:	3c403836 	bltu	r7,r17,de50 <__divdf3+0x1e0>
    dd70:	89c03626 	beq	r17,r7,de4c <__divdf3+0x1dc>
    dd74:	0015883a 	mov	r10,zero
    dd78:	001d883a 	mov	r14,zero
    dd7c:	02c40034 	movhi	r11,4096
    dd80:	001f883a 	mov	r15,zero
    dd84:	003f883a 	mov	ra,zero
    dd88:	04800f44 	movi	r18,61
    dd8c:	00000f06 	br	ddcc <__divdf3+0x15c>
    dd90:	601d883a 	mov	r14,r12
    dd94:	681f883a 	mov	r15,r13
    dd98:	400d883a 	mov	r6,r8
    dd9c:	100f883a 	mov	r7,r2
    dda0:	3191883a 	add	r8,r6,r6
    dda4:	5808d07a 	srli	r4,r11,1
    dda8:	4185803a 	cmpltu	r2,r8,r6
    ddac:	39d3883a 	add	r9,r7,r7
    ddb0:	28c6b03a 	or	r3,r5,r3
    ddb4:	1245883a 	add	r2,r2,r9
    ddb8:	1815883a 	mov	r10,r3
    ddbc:	2017883a 	mov	r11,r4
    ddc0:	400d883a 	mov	r6,r8
    ddc4:	100f883a 	mov	r7,r2
    ddc8:	fc801726 	beq	ra,r18,de28 <__divdf3+0x1b8>
    ddcc:	580a97fa 	slli	r5,r11,31
    ddd0:	5006d07a 	srli	r3,r10,1
    ddd4:	ffc00044 	addi	ra,ra,1
    ddd8:	3c7ff136 	bltu	r7,r17,dda0 <__divdf3+0x130>
    dddc:	3411c83a 	sub	r8,r6,r16
    dde0:	3205803a 	cmpltu	r2,r6,r8
    dde4:	3c53c83a 	sub	r9,r7,r17
    dde8:	7298b03a 	or	r12,r14,r10
    ddec:	7adab03a 	or	r13,r15,r11
    ddf0:	4885c83a 	sub	r2,r9,r2
    ddf4:	89ffe61e 	bne	r17,r7,dd90 <__divdf3+0x120>
    ddf8:	343fe936 	bltu	r6,r16,dda0 <__divdf3+0x130>
    ddfc:	003fe406 	br	dd90 <__divdf3+0x120>
    de00:	9809883a 	mov	r4,r19
    de04:	d9800415 	stw	r6,16(sp)
    de08:	000e8700 	call	e870 <__pack_d>
    de0c:	dfc01217 	ldw	ra,72(sp)
    de10:	dcc01117 	ldw	r19,68(sp)
    de14:	dc801017 	ldw	r18,64(sp)
    de18:	dc400f17 	ldw	r17,60(sp)
    de1c:	dc000e17 	ldw	r16,56(sp)
    de20:	dec01304 	addi	sp,sp,76
    de24:	f800283a 	ret
    de28:	00803fc4 	movi	r2,255
    de2c:	7090703a 	and	r8,r14,r2
    de30:	00802004 	movi	r2,128
    de34:	0007883a 	mov	r3,zero
    de38:	0013883a 	mov	r9,zero
    de3c:	40800d26 	beq	r8,r2,de74 <__divdf3+0x204>
    de40:	dbc00815 	stw	r15,32(sp)
    de44:	db800715 	stw	r14,28(sp)
    de48:	003fab06 	br	dcf8 <__divdf3+0x88>
    de4c:	343fc92e 	bgeu	r6,r16,dd74 <__divdf3+0x104>
    de50:	3185883a 	add	r2,r6,r6
    de54:	1189803a 	cmpltu	r4,r2,r6
    de58:	39c7883a 	add	r3,r7,r7
    de5c:	20c9883a 	add	r4,r4,r3
    de60:	297fffc4 	addi	r5,r5,-1
    de64:	100d883a 	mov	r6,r2
    de68:	200f883a 	mov	r7,r4
    de6c:	d9400615 	stw	r5,24(sp)
    de70:	003fc006 	br	dd74 <__divdf3+0x104>
    de74:	483ff21e 	bne	r9,zero,de40 <__divdf3+0x1d0>
    de78:	01004004 	movi	r4,256
    de7c:	7104703a 	and	r2,r14,r4
    de80:	10c4b03a 	or	r2,r2,r3
    de84:	103fee1e 	bne	r2,zero,de40 <__divdf3+0x1d0>
    de88:	31c4b03a 	or	r2,r6,r7
    de8c:	103fec26 	beq	r2,zero,de40 <__divdf3+0x1d0>
    de90:	7205883a 	add	r2,r14,r8
    de94:	1391803a 	cmpltu	r8,r2,r14
    de98:	43d1883a 	add	r8,r8,r15
    de9c:	013fc004 	movi	r4,-256
    dea0:	111c703a 	and	r14,r2,r4
    dea4:	401f883a 	mov	r15,r8
    dea8:	003fe506 	br	de40 <__divdf3+0x1d0>
    deac:	8009883a 	mov	r4,r16
    deb0:	003f9206 	br	dcfc <__divdf3+0x8c>
    deb4:	9809883a 	mov	r4,r19
    deb8:	d8000715 	stw	zero,28(sp)
    debc:	d8000815 	stw	zero,32(sp)
    dec0:	d8000615 	stw	zero,24(sp)
    dec4:	003f8d06 	br	dcfc <__divdf3+0x8c>

0000dec8 <__eqdf2>:
    dec8:	deffef04 	addi	sp,sp,-68
    decc:	dc400f15 	stw	r17,60(sp)
    ded0:	dc400404 	addi	r17,sp,16
    ded4:	2005883a 	mov	r2,r4
    ded8:	2807883a 	mov	r3,r5
    dedc:	dc000e15 	stw	r16,56(sp)
    dee0:	d809883a 	mov	r4,sp
    dee4:	880b883a 	mov	r5,r17
    dee8:	dc000904 	addi	r16,sp,36
    deec:	d8c00115 	stw	r3,4(sp)
    def0:	d8800015 	stw	r2,0(sp)
    def4:	d9800215 	stw	r6,8(sp)
    def8:	dfc01015 	stw	ra,64(sp)
    defc:	d9c00315 	stw	r7,12(sp)
    df00:	000eb840 	call	eb84 <__unpack_d>
    df04:	d9000204 	addi	r4,sp,8
    df08:	800b883a 	mov	r5,r16
    df0c:	000eb840 	call	eb84 <__unpack_d>
    df10:	d8800417 	ldw	r2,16(sp)
    df14:	00c00044 	movi	r3,1
    df18:	180d883a 	mov	r6,r3
    df1c:	1880062e 	bgeu	r3,r2,df38 <__eqdf2+0x70>
    df20:	d8800917 	ldw	r2,36(sp)
    df24:	8809883a 	mov	r4,r17
    df28:	800b883a 	mov	r5,r16
    df2c:	1880022e 	bgeu	r3,r2,df38 <__eqdf2+0x70>
    df30:	000ecbc0 	call	ecbc <__fpcmp_parts_d>
    df34:	100d883a 	mov	r6,r2
    df38:	3005883a 	mov	r2,r6
    df3c:	dfc01017 	ldw	ra,64(sp)
    df40:	dc400f17 	ldw	r17,60(sp)
    df44:	dc000e17 	ldw	r16,56(sp)
    df48:	dec01104 	addi	sp,sp,68
    df4c:	f800283a 	ret

0000df50 <__nedf2>:
    df50:	deffef04 	addi	sp,sp,-68
    df54:	dc400f15 	stw	r17,60(sp)
    df58:	dc400404 	addi	r17,sp,16
    df5c:	2005883a 	mov	r2,r4
    df60:	2807883a 	mov	r3,r5
    df64:	dc000e15 	stw	r16,56(sp)
    df68:	d809883a 	mov	r4,sp
    df6c:	880b883a 	mov	r5,r17
    df70:	dc000904 	addi	r16,sp,36
    df74:	d8c00115 	stw	r3,4(sp)
    df78:	d8800015 	stw	r2,0(sp)
    df7c:	d9800215 	stw	r6,8(sp)
    df80:	dfc01015 	stw	ra,64(sp)
    df84:	d9c00315 	stw	r7,12(sp)
    df88:	000eb840 	call	eb84 <__unpack_d>
    df8c:	d9000204 	addi	r4,sp,8
    df90:	800b883a 	mov	r5,r16
    df94:	000eb840 	call	eb84 <__unpack_d>
    df98:	d8800417 	ldw	r2,16(sp)
    df9c:	00c00044 	movi	r3,1
    dfa0:	180d883a 	mov	r6,r3
    dfa4:	1880062e 	bgeu	r3,r2,dfc0 <__nedf2+0x70>
    dfa8:	d8800917 	ldw	r2,36(sp)
    dfac:	8809883a 	mov	r4,r17
    dfb0:	800b883a 	mov	r5,r16
    dfb4:	1880022e 	bgeu	r3,r2,dfc0 <__nedf2+0x70>
    dfb8:	000ecbc0 	call	ecbc <__fpcmp_parts_d>
    dfbc:	100d883a 	mov	r6,r2
    dfc0:	3005883a 	mov	r2,r6
    dfc4:	dfc01017 	ldw	ra,64(sp)
    dfc8:	dc400f17 	ldw	r17,60(sp)
    dfcc:	dc000e17 	ldw	r16,56(sp)
    dfd0:	dec01104 	addi	sp,sp,68
    dfd4:	f800283a 	ret

0000dfd8 <__gtdf2>:
    dfd8:	deffef04 	addi	sp,sp,-68
    dfdc:	dc400f15 	stw	r17,60(sp)
    dfe0:	dc400404 	addi	r17,sp,16
    dfe4:	2005883a 	mov	r2,r4
    dfe8:	2807883a 	mov	r3,r5
    dfec:	dc000e15 	stw	r16,56(sp)
    dff0:	d809883a 	mov	r4,sp
    dff4:	880b883a 	mov	r5,r17
    dff8:	dc000904 	addi	r16,sp,36
    dffc:	d8c00115 	stw	r3,4(sp)
    e000:	d8800015 	stw	r2,0(sp)
    e004:	d9800215 	stw	r6,8(sp)
    e008:	dfc01015 	stw	ra,64(sp)
    e00c:	d9c00315 	stw	r7,12(sp)
    e010:	000eb840 	call	eb84 <__unpack_d>
    e014:	d9000204 	addi	r4,sp,8
    e018:	800b883a 	mov	r5,r16
    e01c:	000eb840 	call	eb84 <__unpack_d>
    e020:	d8800417 	ldw	r2,16(sp)
    e024:	00c00044 	movi	r3,1
    e028:	01bfffc4 	movi	r6,-1
    e02c:	1880062e 	bgeu	r3,r2,e048 <__gtdf2+0x70>
    e030:	d8800917 	ldw	r2,36(sp)
    e034:	8809883a 	mov	r4,r17
    e038:	800b883a 	mov	r5,r16
    e03c:	1880022e 	bgeu	r3,r2,e048 <__gtdf2+0x70>
    e040:	000ecbc0 	call	ecbc <__fpcmp_parts_d>
    e044:	100d883a 	mov	r6,r2
    e048:	3005883a 	mov	r2,r6
    e04c:	dfc01017 	ldw	ra,64(sp)
    e050:	dc400f17 	ldw	r17,60(sp)
    e054:	dc000e17 	ldw	r16,56(sp)
    e058:	dec01104 	addi	sp,sp,68
    e05c:	f800283a 	ret

0000e060 <__gedf2>:
    e060:	deffef04 	addi	sp,sp,-68
    e064:	dc400f15 	stw	r17,60(sp)
    e068:	dc400404 	addi	r17,sp,16
    e06c:	2005883a 	mov	r2,r4
    e070:	2807883a 	mov	r3,r5
    e074:	dc000e15 	stw	r16,56(sp)
    e078:	d809883a 	mov	r4,sp
    e07c:	880b883a 	mov	r5,r17
    e080:	dc000904 	addi	r16,sp,36
    e084:	d8c00115 	stw	r3,4(sp)
    e088:	d8800015 	stw	r2,0(sp)
    e08c:	d9800215 	stw	r6,8(sp)
    e090:	dfc01015 	stw	ra,64(sp)
    e094:	d9c00315 	stw	r7,12(sp)
    e098:	000eb840 	call	eb84 <__unpack_d>
    e09c:	d9000204 	addi	r4,sp,8
    e0a0:	800b883a 	mov	r5,r16
    e0a4:	000eb840 	call	eb84 <__unpack_d>
    e0a8:	d8800417 	ldw	r2,16(sp)
    e0ac:	00c00044 	movi	r3,1
    e0b0:	01bfffc4 	movi	r6,-1
    e0b4:	1880062e 	bgeu	r3,r2,e0d0 <__gedf2+0x70>
    e0b8:	d8800917 	ldw	r2,36(sp)
    e0bc:	8809883a 	mov	r4,r17
    e0c0:	800b883a 	mov	r5,r16
    e0c4:	1880022e 	bgeu	r3,r2,e0d0 <__gedf2+0x70>
    e0c8:	000ecbc0 	call	ecbc <__fpcmp_parts_d>
    e0cc:	100d883a 	mov	r6,r2
    e0d0:	3005883a 	mov	r2,r6
    e0d4:	dfc01017 	ldw	ra,64(sp)
    e0d8:	dc400f17 	ldw	r17,60(sp)
    e0dc:	dc000e17 	ldw	r16,56(sp)
    e0e0:	dec01104 	addi	sp,sp,68
    e0e4:	f800283a 	ret

0000e0e8 <__ltdf2>:
    e0e8:	deffef04 	addi	sp,sp,-68
    e0ec:	dc400f15 	stw	r17,60(sp)
    e0f0:	dc400404 	addi	r17,sp,16
    e0f4:	2005883a 	mov	r2,r4
    e0f8:	2807883a 	mov	r3,r5
    e0fc:	dc000e15 	stw	r16,56(sp)
    e100:	d809883a 	mov	r4,sp
    e104:	880b883a 	mov	r5,r17
    e108:	dc000904 	addi	r16,sp,36
    e10c:	d8c00115 	stw	r3,4(sp)
    e110:	d8800015 	stw	r2,0(sp)
    e114:	d9800215 	stw	r6,8(sp)
    e118:	dfc01015 	stw	ra,64(sp)
    e11c:	d9c00315 	stw	r7,12(sp)
    e120:	000eb840 	call	eb84 <__unpack_d>
    e124:	d9000204 	addi	r4,sp,8
    e128:	800b883a 	mov	r5,r16
    e12c:	000eb840 	call	eb84 <__unpack_d>
    e130:	d8800417 	ldw	r2,16(sp)
    e134:	00c00044 	movi	r3,1
    e138:	180d883a 	mov	r6,r3
    e13c:	1880062e 	bgeu	r3,r2,e158 <__ltdf2+0x70>
    e140:	d8800917 	ldw	r2,36(sp)
    e144:	8809883a 	mov	r4,r17
    e148:	800b883a 	mov	r5,r16
    e14c:	1880022e 	bgeu	r3,r2,e158 <__ltdf2+0x70>
    e150:	000ecbc0 	call	ecbc <__fpcmp_parts_d>
    e154:	100d883a 	mov	r6,r2
    e158:	3005883a 	mov	r2,r6
    e15c:	dfc01017 	ldw	ra,64(sp)
    e160:	dc400f17 	ldw	r17,60(sp)
    e164:	dc000e17 	ldw	r16,56(sp)
    e168:	dec01104 	addi	sp,sp,68
    e16c:	f800283a 	ret

0000e170 <__ledf2>:
    e170:	deffef04 	addi	sp,sp,-68
    e174:	dc400f15 	stw	r17,60(sp)
    e178:	dc400404 	addi	r17,sp,16
    e17c:	2005883a 	mov	r2,r4
    e180:	2807883a 	mov	r3,r5
    e184:	dc000e15 	stw	r16,56(sp)
    e188:	d809883a 	mov	r4,sp
    e18c:	880b883a 	mov	r5,r17
    e190:	dc000904 	addi	r16,sp,36
    e194:	d8c00115 	stw	r3,4(sp)
    e198:	d8800015 	stw	r2,0(sp)
    e19c:	d9800215 	stw	r6,8(sp)
    e1a0:	dfc01015 	stw	ra,64(sp)
    e1a4:	d9c00315 	stw	r7,12(sp)
    e1a8:	000eb840 	call	eb84 <__unpack_d>
    e1ac:	d9000204 	addi	r4,sp,8
    e1b0:	800b883a 	mov	r5,r16
    e1b4:	000eb840 	call	eb84 <__unpack_d>
    e1b8:	d8800417 	ldw	r2,16(sp)
    e1bc:	00c00044 	movi	r3,1
    e1c0:	180d883a 	mov	r6,r3
    e1c4:	1880062e 	bgeu	r3,r2,e1e0 <__ledf2+0x70>
    e1c8:	d8800917 	ldw	r2,36(sp)
    e1cc:	8809883a 	mov	r4,r17
    e1d0:	800b883a 	mov	r5,r16
    e1d4:	1880022e 	bgeu	r3,r2,e1e0 <__ledf2+0x70>
    e1d8:	000ecbc0 	call	ecbc <__fpcmp_parts_d>
    e1dc:	100d883a 	mov	r6,r2
    e1e0:	3005883a 	mov	r2,r6
    e1e4:	dfc01017 	ldw	ra,64(sp)
    e1e8:	dc400f17 	ldw	r17,60(sp)
    e1ec:	dc000e17 	ldw	r16,56(sp)
    e1f0:	dec01104 	addi	sp,sp,68
    e1f4:	f800283a 	ret

0000e1f8 <__floatsidf>:
    e1f8:	2006d7fa 	srli	r3,r4,31
    e1fc:	defff604 	addi	sp,sp,-40
    e200:	008000c4 	movi	r2,3
    e204:	dfc00915 	stw	ra,36(sp)
    e208:	dcc00815 	stw	r19,32(sp)
    e20c:	dc800715 	stw	r18,28(sp)
    e210:	dc400615 	stw	r17,24(sp)
    e214:	dc000515 	stw	r16,20(sp)
    e218:	d8800015 	stw	r2,0(sp)
    e21c:	d8c00115 	stw	r3,4(sp)
    e220:	20000f1e 	bne	r4,zero,e260 <__floatsidf+0x68>
    e224:	00800084 	movi	r2,2
    e228:	d8800015 	stw	r2,0(sp)
    e22c:	d809883a 	mov	r4,sp
    e230:	000e8700 	call	e870 <__pack_d>
    e234:	1009883a 	mov	r4,r2
    e238:	180b883a 	mov	r5,r3
    e23c:	2005883a 	mov	r2,r4
    e240:	2807883a 	mov	r3,r5
    e244:	dfc00917 	ldw	ra,36(sp)
    e248:	dcc00817 	ldw	r19,32(sp)
    e24c:	dc800717 	ldw	r18,28(sp)
    e250:	dc400617 	ldw	r17,24(sp)
    e254:	dc000517 	ldw	r16,20(sp)
    e258:	dec00a04 	addi	sp,sp,40
    e25c:	f800283a 	ret
    e260:	00800f04 	movi	r2,60
    e264:	1807003a 	cmpeq	r3,r3,zero
    e268:	d8800215 	stw	r2,8(sp)
    e26c:	18001126 	beq	r3,zero,e2b4 <__floatsidf+0xbc>
    e270:	0027883a 	mov	r19,zero
    e274:	2025883a 	mov	r18,r4
    e278:	d9000315 	stw	r4,12(sp)
    e27c:	dcc00415 	stw	r19,16(sp)
    e280:	000e71c0 	call	e71c <__clzsi2>
    e284:	11000744 	addi	r4,r2,29
    e288:	013fe80e 	bge	zero,r4,e22c <__floatsidf+0x34>
    e28c:	10bfff44 	addi	r2,r2,-3
    e290:	10000c16 	blt	r2,zero,e2c4 <__floatsidf+0xcc>
    e294:	90a2983a 	sll	r17,r18,r2
    e298:	0021883a 	mov	r16,zero
    e29c:	d8800217 	ldw	r2,8(sp)
    e2a0:	dc400415 	stw	r17,16(sp)
    e2a4:	dc000315 	stw	r16,12(sp)
    e2a8:	1105c83a 	sub	r2,r2,r4
    e2ac:	d8800215 	stw	r2,8(sp)
    e2b0:	003fde06 	br	e22c <__floatsidf+0x34>
    e2b4:	00a00034 	movhi	r2,32768
    e2b8:	20800a26 	beq	r4,r2,e2e4 <__floatsidf+0xec>
    e2bc:	0109c83a 	sub	r4,zero,r4
    e2c0:	003feb06 	br	e270 <__floatsidf+0x78>
    e2c4:	9006d07a 	srli	r3,r18,1
    e2c8:	008007c4 	movi	r2,31
    e2cc:	1105c83a 	sub	r2,r2,r4
    e2d0:	1886d83a 	srl	r3,r3,r2
    e2d4:	9922983a 	sll	r17,r19,r4
    e2d8:	9120983a 	sll	r16,r18,r4
    e2dc:	1c62b03a 	or	r17,r3,r17
    e2e0:	003fee06 	br	e29c <__floatsidf+0xa4>
    e2e4:	0009883a 	mov	r4,zero
    e2e8:	01707834 	movhi	r5,49632
    e2ec:	003fd306 	br	e23c <__floatsidf+0x44>

0000e2f0 <__fixdfsi>:
    e2f0:	defff804 	addi	sp,sp,-32
    e2f4:	2005883a 	mov	r2,r4
    e2f8:	2807883a 	mov	r3,r5
    e2fc:	d809883a 	mov	r4,sp
    e300:	d9400204 	addi	r5,sp,8
    e304:	d8c00115 	stw	r3,4(sp)
    e308:	d8800015 	stw	r2,0(sp)
    e30c:	dfc00715 	stw	ra,28(sp)
    e310:	000eb840 	call	eb84 <__unpack_d>
    e314:	d8c00217 	ldw	r3,8(sp)
    e318:	00800084 	movi	r2,2
    e31c:	1880051e 	bne	r3,r2,e334 <__fixdfsi+0x44>
    e320:	0007883a 	mov	r3,zero
    e324:	1805883a 	mov	r2,r3
    e328:	dfc00717 	ldw	ra,28(sp)
    e32c:	dec00804 	addi	sp,sp,32
    e330:	f800283a 	ret
    e334:	00800044 	movi	r2,1
    e338:	10fff92e 	bgeu	r2,r3,e320 <__fixdfsi+0x30>
    e33c:	00800104 	movi	r2,4
    e340:	18800426 	beq	r3,r2,e354 <__fixdfsi+0x64>
    e344:	d8c00417 	ldw	r3,16(sp)
    e348:	183ff516 	blt	r3,zero,e320 <__fixdfsi+0x30>
    e34c:	00800784 	movi	r2,30
    e350:	10c0080e 	bge	r2,r3,e374 <__fixdfsi+0x84>
    e354:	d8800317 	ldw	r2,12(sp)
    e358:	1000121e 	bne	r2,zero,e3a4 <__fixdfsi+0xb4>
    e35c:	00e00034 	movhi	r3,32768
    e360:	18ffffc4 	addi	r3,r3,-1
    e364:	1805883a 	mov	r2,r3
    e368:	dfc00717 	ldw	ra,28(sp)
    e36c:	dec00804 	addi	sp,sp,32
    e370:	f800283a 	ret
    e374:	00800f04 	movi	r2,60
    e378:	10d1c83a 	sub	r8,r2,r3
    e37c:	40bff804 	addi	r2,r8,-32
    e380:	d9800517 	ldw	r6,20(sp)
    e384:	d9c00617 	ldw	r7,24(sp)
    e388:	10000816 	blt	r2,zero,e3ac <__fixdfsi+0xbc>
    e38c:	3888d83a 	srl	r4,r7,r2
    e390:	d8800317 	ldw	r2,12(sp)
    e394:	2007883a 	mov	r3,r4
    e398:	103fe226 	beq	r2,zero,e324 <__fixdfsi+0x34>
    e39c:	0107c83a 	sub	r3,zero,r4
    e3a0:	003fe006 	br	e324 <__fixdfsi+0x34>
    e3a4:	00e00034 	movhi	r3,32768
    e3a8:	003fde06 	br	e324 <__fixdfsi+0x34>
    e3ac:	39c7883a 	add	r3,r7,r7
    e3b0:	008007c4 	movi	r2,31
    e3b4:	1205c83a 	sub	r2,r2,r8
    e3b8:	1886983a 	sll	r3,r3,r2
    e3bc:	3208d83a 	srl	r4,r6,r8
    e3c0:	1908b03a 	or	r4,r3,r4
    e3c4:	003ff206 	br	e390 <__fixdfsi+0xa0>

0000e3c8 <__truncdfsf2>:
    e3c8:	defff804 	addi	sp,sp,-32
    e3cc:	2005883a 	mov	r2,r4
    e3d0:	2807883a 	mov	r3,r5
    e3d4:	d809883a 	mov	r4,sp
    e3d8:	d9400204 	addi	r5,sp,8
    e3dc:	d8c00115 	stw	r3,4(sp)
    e3e0:	d8800015 	stw	r2,0(sp)
    e3e4:	dfc00715 	stw	ra,28(sp)
    e3e8:	000eb840 	call	eb84 <__unpack_d>
    e3ec:	d9c00517 	ldw	r7,20(sp)
    e3f0:	da000617 	ldw	r8,24(sp)
    e3f4:	02d00034 	movhi	r11,16384
    e3f8:	5affffc4 	addi	r11,r11,-1
    e3fc:	3812d7ba 	srli	r9,r7,30
    e400:	401a90ba 	slli	r13,r8,2
    e404:	3ac4703a 	and	r2,r7,r11
    e408:	0007883a 	mov	r3,zero
    e40c:	6a52b03a 	or	r9,r13,r9
    e410:	10c4b03a 	or	r2,r2,r3
    e414:	d9000217 	ldw	r4,8(sp)
    e418:	d9400317 	ldw	r5,12(sp)
    e41c:	d9800417 	ldw	r6,16(sp)
    e420:	480f883a 	mov	r7,r9
    e424:	10000126 	beq	r2,zero,e42c <__truncdfsf2+0x64>
    e428:	49c00054 	ori	r7,r9,1
    e42c:	000e8440 	call	e844 <__make_fp>
    e430:	dfc00717 	ldw	ra,28(sp)
    e434:	dec00804 	addi	sp,sp,32
    e438:	f800283a 	ret

0000e43c <__floatunsidf>:
    e43c:	defff204 	addi	sp,sp,-56
    e440:	dfc00d15 	stw	ra,52(sp)
    e444:	ddc00c15 	stw	r23,48(sp)
    e448:	dd800b15 	stw	r22,44(sp)
    e44c:	dd400a15 	stw	r21,40(sp)
    e450:	dd000915 	stw	r20,36(sp)
    e454:	dcc00815 	stw	r19,32(sp)
    e458:	dc800715 	stw	r18,28(sp)
    e45c:	dc400615 	stw	r17,24(sp)
    e460:	dc000515 	stw	r16,20(sp)
    e464:	d8000115 	stw	zero,4(sp)
    e468:	20000f1e 	bne	r4,zero,e4a8 <__floatunsidf+0x6c>
    e46c:	00800084 	movi	r2,2
    e470:	d8800015 	stw	r2,0(sp)
    e474:	d809883a 	mov	r4,sp
    e478:	000e8700 	call	e870 <__pack_d>
    e47c:	dfc00d17 	ldw	ra,52(sp)
    e480:	ddc00c17 	ldw	r23,48(sp)
    e484:	dd800b17 	ldw	r22,44(sp)
    e488:	dd400a17 	ldw	r21,40(sp)
    e48c:	dd000917 	ldw	r20,36(sp)
    e490:	dcc00817 	ldw	r19,32(sp)
    e494:	dc800717 	ldw	r18,28(sp)
    e498:	dc400617 	ldw	r17,24(sp)
    e49c:	dc000517 	ldw	r16,20(sp)
    e4a0:	dec00e04 	addi	sp,sp,56
    e4a4:	f800283a 	ret
    e4a8:	008000c4 	movi	r2,3
    e4ac:	00c00f04 	movi	r3,60
    e4b0:	002f883a 	mov	r23,zero
    e4b4:	202d883a 	mov	r22,r4
    e4b8:	d8800015 	stw	r2,0(sp)
    e4bc:	d8c00215 	stw	r3,8(sp)
    e4c0:	d9000315 	stw	r4,12(sp)
    e4c4:	ddc00415 	stw	r23,16(sp)
    e4c8:	000e71c0 	call	e71c <__clzsi2>
    e4cc:	12400744 	addi	r9,r2,29
    e4d0:	48000b16 	blt	r9,zero,e500 <__floatunsidf+0xc4>
    e4d4:	483fe726 	beq	r9,zero,e474 <__floatunsidf+0x38>
    e4d8:	10bfff44 	addi	r2,r2,-3
    e4dc:	10002e16 	blt	r2,zero,e598 <__floatunsidf+0x15c>
    e4e0:	b0a2983a 	sll	r17,r22,r2
    e4e4:	0021883a 	mov	r16,zero
    e4e8:	d8800217 	ldw	r2,8(sp)
    e4ec:	dc400415 	stw	r17,16(sp)
    e4f0:	dc000315 	stw	r16,12(sp)
    e4f4:	1245c83a 	sub	r2,r2,r9
    e4f8:	d8800215 	stw	r2,8(sp)
    e4fc:	003fdd06 	br	e474 <__floatunsidf+0x38>
    e500:	0255c83a 	sub	r10,zero,r9
    e504:	51bff804 	addi	r6,r10,-32
    e508:	30001b16 	blt	r6,zero,e578 <__floatunsidf+0x13c>
    e50c:	b9a8d83a 	srl	r20,r23,r6
    e510:	002b883a 	mov	r21,zero
    e514:	000f883a 	mov	r7,zero
    e518:	01000044 	movi	r4,1
    e51c:	0011883a 	mov	r8,zero
    e520:	30002516 	blt	r6,zero,e5b8 <__floatunsidf+0x17c>
    e524:	21a6983a 	sll	r19,r4,r6
    e528:	0025883a 	mov	r18,zero
    e52c:	00bfffc4 	movi	r2,-1
    e530:	9089883a 	add	r4,r18,r2
    e534:	988b883a 	add	r5,r19,r2
    e538:	248d803a 	cmpltu	r6,r4,r18
    e53c:	314b883a 	add	r5,r6,r5
    e540:	b104703a 	and	r2,r22,r4
    e544:	b946703a 	and	r3,r23,r5
    e548:	10c4b03a 	or	r2,r2,r3
    e54c:	10000226 	beq	r2,zero,e558 <__floatunsidf+0x11c>
    e550:	01c00044 	movi	r7,1
    e554:	0011883a 	mov	r8,zero
    e558:	d9000217 	ldw	r4,8(sp)
    e55c:	a1c4b03a 	or	r2,r20,r7
    e560:	aa06b03a 	or	r3,r21,r8
    e564:	2249c83a 	sub	r4,r4,r9
    e568:	d8c00415 	stw	r3,16(sp)
    e56c:	d9000215 	stw	r4,8(sp)
    e570:	d8800315 	stw	r2,12(sp)
    e574:	003fbf06 	br	e474 <__floatunsidf+0x38>
    e578:	bdc7883a 	add	r3,r23,r23
    e57c:	008007c4 	movi	r2,31
    e580:	1285c83a 	sub	r2,r2,r10
    e584:	1886983a 	sll	r3,r3,r2
    e588:	b2a8d83a 	srl	r20,r22,r10
    e58c:	baaad83a 	srl	r21,r23,r10
    e590:	1d28b03a 	or	r20,r3,r20
    e594:	003fdf06 	br	e514 <__floatunsidf+0xd8>
    e598:	b006d07a 	srli	r3,r22,1
    e59c:	008007c4 	movi	r2,31
    e5a0:	1245c83a 	sub	r2,r2,r9
    e5a4:	1886d83a 	srl	r3,r3,r2
    e5a8:	ba62983a 	sll	r17,r23,r9
    e5ac:	b260983a 	sll	r16,r22,r9
    e5b0:	1c62b03a 	or	r17,r3,r17
    e5b4:	003fcc06 	br	e4e8 <__floatunsidf+0xac>
    e5b8:	2006d07a 	srli	r3,r4,1
    e5bc:	008007c4 	movi	r2,31
    e5c0:	1285c83a 	sub	r2,r2,r10
    e5c4:	18a6d83a 	srl	r19,r3,r2
    e5c8:	22a4983a 	sll	r18,r4,r10
    e5cc:	003fd706 	br	e52c <__floatunsidf+0xf0>

0000e5d0 <udivmodsi4>:
    e5d0:	29001b2e 	bgeu	r5,r4,e640 <udivmodsi4+0x70>
    e5d4:	28001a16 	blt	r5,zero,e640 <udivmodsi4+0x70>
    e5d8:	00800044 	movi	r2,1
    e5dc:	0007883a 	mov	r3,zero
    e5e0:	01c007c4 	movi	r7,31
    e5e4:	00000306 	br	e5f4 <udivmodsi4+0x24>
    e5e8:	19c01326 	beq	r3,r7,e638 <udivmodsi4+0x68>
    e5ec:	18c00044 	addi	r3,r3,1
    e5f0:	28000416 	blt	r5,zero,e604 <udivmodsi4+0x34>
    e5f4:	294b883a 	add	r5,r5,r5
    e5f8:	1085883a 	add	r2,r2,r2
    e5fc:	293ffa36 	bltu	r5,r4,e5e8 <udivmodsi4+0x18>
    e600:	10000d26 	beq	r2,zero,e638 <udivmodsi4+0x68>
    e604:	0007883a 	mov	r3,zero
    e608:	21400236 	bltu	r4,r5,e614 <udivmodsi4+0x44>
    e60c:	2149c83a 	sub	r4,r4,r5
    e610:	1886b03a 	or	r3,r3,r2
    e614:	1004d07a 	srli	r2,r2,1
    e618:	280ad07a 	srli	r5,r5,1
    e61c:	103ffa1e 	bne	r2,zero,e608 <udivmodsi4+0x38>
    e620:	30000226 	beq	r6,zero,e62c <udivmodsi4+0x5c>
    e624:	2005883a 	mov	r2,r4
    e628:	f800283a 	ret
    e62c:	1809883a 	mov	r4,r3
    e630:	2005883a 	mov	r2,r4
    e634:	f800283a 	ret
    e638:	0007883a 	mov	r3,zero
    e63c:	003ff806 	br	e620 <udivmodsi4+0x50>
    e640:	00800044 	movi	r2,1
    e644:	0007883a 	mov	r3,zero
    e648:	003fef06 	br	e608 <udivmodsi4+0x38>

0000e64c <__divsi3>:
    e64c:	defffe04 	addi	sp,sp,-8
    e650:	dc000015 	stw	r16,0(sp)
    e654:	dfc00115 	stw	ra,4(sp)
    e658:	0021883a 	mov	r16,zero
    e65c:	20000c16 	blt	r4,zero,e690 <__divsi3+0x44>
    e660:	000d883a 	mov	r6,zero
    e664:	28000e16 	blt	r5,zero,e6a0 <__divsi3+0x54>
    e668:	000e5d00 	call	e5d0 <udivmodsi4>
    e66c:	1007883a 	mov	r3,r2
    e670:	8005003a 	cmpeq	r2,r16,zero
    e674:	1000011e 	bne	r2,zero,e67c <__divsi3+0x30>
    e678:	00c7c83a 	sub	r3,zero,r3
    e67c:	1805883a 	mov	r2,r3
    e680:	dfc00117 	ldw	ra,4(sp)
    e684:	dc000017 	ldw	r16,0(sp)
    e688:	dec00204 	addi	sp,sp,8
    e68c:	f800283a 	ret
    e690:	0109c83a 	sub	r4,zero,r4
    e694:	04000044 	movi	r16,1
    e698:	000d883a 	mov	r6,zero
    e69c:	283ff20e 	bge	r5,zero,e668 <__divsi3+0x1c>
    e6a0:	014bc83a 	sub	r5,zero,r5
    e6a4:	8021003a 	cmpeq	r16,r16,zero
    e6a8:	003fef06 	br	e668 <__divsi3+0x1c>

0000e6ac <__modsi3>:
    e6ac:	deffff04 	addi	sp,sp,-4
    e6b0:	dfc00015 	stw	ra,0(sp)
    e6b4:	01800044 	movi	r6,1
    e6b8:	2807883a 	mov	r3,r5
    e6bc:	20000416 	blt	r4,zero,e6d0 <__modsi3+0x24>
    e6c0:	28000c16 	blt	r5,zero,e6f4 <__modsi3+0x48>
    e6c4:	dfc00017 	ldw	ra,0(sp)
    e6c8:	dec00104 	addi	sp,sp,4
    e6cc:	000e5d01 	jmpi	e5d0 <udivmodsi4>
    e6d0:	0109c83a 	sub	r4,zero,r4
    e6d4:	28000b16 	blt	r5,zero,e704 <__modsi3+0x58>
    e6d8:	180b883a 	mov	r5,r3
    e6dc:	01800044 	movi	r6,1
    e6e0:	000e5d00 	call	e5d0 <udivmodsi4>
    e6e4:	0085c83a 	sub	r2,zero,r2
    e6e8:	dfc00017 	ldw	ra,0(sp)
    e6ec:	dec00104 	addi	sp,sp,4
    e6f0:	f800283a 	ret
    e6f4:	014bc83a 	sub	r5,zero,r5
    e6f8:	dfc00017 	ldw	ra,0(sp)
    e6fc:	dec00104 	addi	sp,sp,4
    e700:	000e5d01 	jmpi	e5d0 <udivmodsi4>
    e704:	0147c83a 	sub	r3,zero,r5
    e708:	003ff306 	br	e6d8 <__modsi3+0x2c>

0000e70c <__udivsi3>:
    e70c:	000d883a 	mov	r6,zero
    e710:	000e5d01 	jmpi	e5d0 <udivmodsi4>

0000e714 <__umodsi3>:
    e714:	01800044 	movi	r6,1
    e718:	000e5d01 	jmpi	e5d0 <udivmodsi4>

0000e71c <__clzsi2>:
    e71c:	00bfffd4 	movui	r2,65535
    e720:	11000e36 	bltu	r2,r4,e75c <__clzsi2+0x40>
    e724:	00803fc4 	movi	r2,255
    e728:	01400204 	movi	r5,8
    e72c:	0007883a 	mov	r3,zero
    e730:	11001036 	bltu	r2,r4,e774 <__clzsi2+0x58>
    e734:	000b883a 	mov	r5,zero
    e738:	20c6d83a 	srl	r3,r4,r3
    e73c:	00800074 	movhi	r2,1
    e740:	10876304 	addi	r2,r2,7564
    e744:	1887883a 	add	r3,r3,r2
    e748:	18800003 	ldbu	r2,0(r3)
    e74c:	00c00804 	movi	r3,32
    e750:	2885883a 	add	r2,r5,r2
    e754:	1885c83a 	sub	r2,r3,r2
    e758:	f800283a 	ret
    e75c:	01400404 	movi	r5,16
    e760:	00804034 	movhi	r2,256
    e764:	10bfffc4 	addi	r2,r2,-1
    e768:	2807883a 	mov	r3,r5
    e76c:	113ff22e 	bgeu	r2,r4,e738 <__clzsi2+0x1c>
    e770:	01400604 	movi	r5,24
    e774:	2807883a 	mov	r3,r5
    e778:	20c6d83a 	srl	r3,r4,r3
    e77c:	00800074 	movhi	r2,1
    e780:	10876304 	addi	r2,r2,7564
    e784:	1887883a 	add	r3,r3,r2
    e788:	18800003 	ldbu	r2,0(r3)
    e78c:	00c00804 	movi	r3,32
    e790:	2885883a 	add	r2,r5,r2
    e794:	1885c83a 	sub	r2,r3,r2
    e798:	f800283a 	ret

0000e79c <__fpcmp_parts_f>:
    e79c:	21800017 	ldw	r6,0(r4)
    e7a0:	00c00044 	movi	r3,1
    e7a4:	19800a2e 	bgeu	r3,r6,e7d0 <__fpcmp_parts_f+0x34>
    e7a8:	28800017 	ldw	r2,0(r5)
    e7ac:	1880082e 	bgeu	r3,r2,e7d0 <__fpcmp_parts_f+0x34>
    e7b0:	00c00104 	movi	r3,4
    e7b4:	30c01e26 	beq	r6,r3,e830 <__fpcmp_parts_f+0x94>
    e7b8:	10c01a26 	beq	r2,r3,e824 <__fpcmp_parts_f+0x88>
    e7bc:	00c00084 	movi	r3,2
    e7c0:	30c00526 	beq	r6,r3,e7d8 <__fpcmp_parts_f+0x3c>
    e7c4:	10c0071e 	bne	r2,r3,e7e4 <__fpcmp_parts_f+0x48>
    e7c8:	20800117 	ldw	r2,4(r4)
    e7cc:	1000091e 	bne	r2,zero,e7f4 <__fpcmp_parts_f+0x58>
    e7d0:	00800044 	movi	r2,1
    e7d4:	f800283a 	ret
    e7d8:	10c0121e 	bne	r2,r3,e824 <__fpcmp_parts_f+0x88>
    e7dc:	0005883a 	mov	r2,zero
    e7e0:	f800283a 	ret
    e7e4:	20c00117 	ldw	r3,4(r4)
    e7e8:	28800117 	ldw	r2,4(r5)
    e7ec:	18800326 	beq	r3,r2,e7fc <__fpcmp_parts_f+0x60>
    e7f0:	183ff726 	beq	r3,zero,e7d0 <__fpcmp_parts_f+0x34>
    e7f4:	00bfffc4 	movi	r2,-1
    e7f8:	f800283a 	ret
    e7fc:	21800217 	ldw	r6,8(r4)
    e800:	28800217 	ldw	r2,8(r5)
    e804:	11bffa16 	blt	r2,r6,e7f0 <__fpcmp_parts_f+0x54>
    e808:	30800416 	blt	r6,r2,e81c <__fpcmp_parts_f+0x80>
    e80c:	21000317 	ldw	r4,12(r4)
    e810:	29400317 	ldw	r5,12(r5)
    e814:	293ff636 	bltu	r5,r4,e7f0 <__fpcmp_parts_f+0x54>
    e818:	217ff02e 	bgeu	r4,r5,e7dc <__fpcmp_parts_f+0x40>
    e81c:	183fec1e 	bne	r3,zero,e7d0 <__fpcmp_parts_f+0x34>
    e820:	003ff406 	br	e7f4 <__fpcmp_parts_f+0x58>
    e824:	28800117 	ldw	r2,4(r5)
    e828:	103fe91e 	bne	r2,zero,e7d0 <__fpcmp_parts_f+0x34>
    e82c:	003ff106 	br	e7f4 <__fpcmp_parts_f+0x58>
    e830:	11bfe51e 	bne	r2,r6,e7c8 <__fpcmp_parts_f+0x2c>
    e834:	28c00117 	ldw	r3,4(r5)
    e838:	20800117 	ldw	r2,4(r4)
    e83c:	1885c83a 	sub	r2,r3,r2
    e840:	f800283a 	ret

0000e844 <__make_fp>:
    e844:	defffb04 	addi	sp,sp,-20
    e848:	d9000015 	stw	r4,0(sp)
    e84c:	d809883a 	mov	r4,sp
    e850:	dfc00415 	stw	ra,16(sp)
    e854:	d9400115 	stw	r5,4(sp)
    e858:	d9800215 	stw	r6,8(sp)
    e85c:	d9c00315 	stw	r7,12(sp)
    e860:	000ed840 	call	ed84 <__pack_f>
    e864:	dfc00417 	ldw	ra,16(sp)
    e868:	dec00504 	addi	sp,sp,20
    e86c:	f800283a 	ret

0000e870 <__pack_d>:
    e870:	20c00017 	ldw	r3,0(r4)
    e874:	defffd04 	addi	sp,sp,-12
    e878:	dc000015 	stw	r16,0(sp)
    e87c:	dc800215 	stw	r18,8(sp)
    e880:	dc400115 	stw	r17,4(sp)
    e884:	00800044 	movi	r2,1
    e888:	22000317 	ldw	r8,12(r4)
    e88c:	001f883a 	mov	r15,zero
    e890:	22400417 	ldw	r9,16(r4)
    e894:	24000117 	ldw	r16,4(r4)
    e898:	10c0552e 	bgeu	r2,r3,e9f0 <__pack_d+0x180>
    e89c:	00800104 	movi	r2,4
    e8a0:	18804f26 	beq	r3,r2,e9e0 <__pack_d+0x170>
    e8a4:	00800084 	movi	r2,2
    e8a8:	18800226 	beq	r3,r2,e8b4 <__pack_d+0x44>
    e8ac:	4244b03a 	or	r2,r8,r9
    e8b0:	10001a1e 	bne	r2,zero,e91c <__pack_d+0xac>
    e8b4:	000d883a 	mov	r6,zero
    e8b8:	000f883a 	mov	r7,zero
    e8bc:	0011883a 	mov	r8,zero
    e8c0:	00800434 	movhi	r2,16
    e8c4:	10bfffc4 	addi	r2,r2,-1
    e8c8:	301d883a 	mov	r14,r6
    e8cc:	3884703a 	and	r2,r7,r2
    e8d0:	400a953a 	slli	r5,r8,20
    e8d4:	79bffc2c 	andhi	r6,r15,65520
    e8d8:	308cb03a 	or	r6,r6,r2
    e8dc:	00e00434 	movhi	r3,32784
    e8e0:	18ffffc4 	addi	r3,r3,-1
    e8e4:	800497fa 	slli	r2,r16,31
    e8e8:	30c6703a 	and	r3,r6,r3
    e8ec:	1946b03a 	or	r3,r3,r5
    e8f0:	01600034 	movhi	r5,32768
    e8f4:	297fffc4 	addi	r5,r5,-1
    e8f8:	194a703a 	and	r5,r3,r5
    e8fc:	288ab03a 	or	r5,r5,r2
    e900:	2807883a 	mov	r3,r5
    e904:	7005883a 	mov	r2,r14
    e908:	dc800217 	ldw	r18,8(sp)
    e90c:	dc400117 	ldw	r17,4(sp)
    e910:	dc000017 	ldw	r16,0(sp)
    e914:	dec00304 	addi	sp,sp,12
    e918:	f800283a 	ret
    e91c:	21000217 	ldw	r4,8(r4)
    e920:	00bf0084 	movi	r2,-1022
    e924:	20803f16 	blt	r4,r2,ea24 <__pack_d+0x1b4>
    e928:	0080ffc4 	movi	r2,1023
    e92c:	11002c16 	blt	r2,r4,e9e0 <__pack_d+0x170>
    e930:	00803fc4 	movi	r2,255
    e934:	408c703a 	and	r6,r8,r2
    e938:	00802004 	movi	r2,128
    e93c:	0007883a 	mov	r3,zero
    e940:	000f883a 	mov	r7,zero
    e944:	2280ffc4 	addi	r10,r4,1023
    e948:	30801e26 	beq	r6,r2,e9c4 <__pack_d+0x154>
    e94c:	00801fc4 	movi	r2,127
    e950:	4089883a 	add	r4,r8,r2
    e954:	220d803a 	cmpltu	r6,r4,r8
    e958:	324d883a 	add	r6,r6,r9
    e95c:	2011883a 	mov	r8,r4
    e960:	3013883a 	mov	r9,r6
    e964:	00880034 	movhi	r2,8192
    e968:	10bfffc4 	addi	r2,r2,-1
    e96c:	12400d36 	bltu	r2,r9,e9a4 <__pack_d+0x134>
    e970:	4804963a 	slli	r2,r9,24
    e974:	400cd23a 	srli	r6,r8,8
    e978:	480ed23a 	srli	r7,r9,8
    e97c:	013fffc4 	movi	r4,-1
    e980:	118cb03a 	or	r6,r2,r6
    e984:	01400434 	movhi	r5,16
    e988:	297fffc4 	addi	r5,r5,-1
    e98c:	3104703a 	and	r2,r6,r4
    e990:	3946703a 	and	r3,r7,r5
    e994:	5201ffcc 	andi	r8,r10,2047
    e998:	100d883a 	mov	r6,r2
    e99c:	180f883a 	mov	r7,r3
    e9a0:	003fc706 	br	e8c0 <__pack_d+0x50>
    e9a4:	480897fa 	slli	r4,r9,31
    e9a8:	4004d07a 	srli	r2,r8,1
    e9ac:	4806d07a 	srli	r3,r9,1
    e9b0:	52800044 	addi	r10,r10,1
    e9b4:	2084b03a 	or	r2,r4,r2
    e9b8:	1011883a 	mov	r8,r2
    e9bc:	1813883a 	mov	r9,r3
    e9c0:	003feb06 	br	e970 <__pack_d+0x100>
    e9c4:	383fe11e 	bne	r7,zero,e94c <__pack_d+0xdc>
    e9c8:	01004004 	movi	r4,256
    e9cc:	4104703a 	and	r2,r8,r4
    e9d0:	10c4b03a 	or	r2,r2,r3
    e9d4:	103fe326 	beq	r2,zero,e964 <__pack_d+0xf4>
    e9d8:	3005883a 	mov	r2,r6
    e9dc:	003fdc06 	br	e950 <__pack_d+0xe0>
    e9e0:	000d883a 	mov	r6,zero
    e9e4:	000f883a 	mov	r7,zero
    e9e8:	0201ffc4 	movi	r8,2047
    e9ec:	003fb406 	br	e8c0 <__pack_d+0x50>
    e9f0:	0005883a 	mov	r2,zero
    e9f4:	00c00234 	movhi	r3,8
    e9f8:	408cb03a 	or	r6,r8,r2
    e9fc:	48ceb03a 	or	r7,r9,r3
    ea00:	013fffc4 	movi	r4,-1
    ea04:	01400434 	movhi	r5,16
    ea08:	297fffc4 	addi	r5,r5,-1
    ea0c:	3104703a 	and	r2,r6,r4
    ea10:	3946703a 	and	r3,r7,r5
    ea14:	100d883a 	mov	r6,r2
    ea18:	180f883a 	mov	r7,r3
    ea1c:	0201ffc4 	movi	r8,2047
    ea20:	003fa706 	br	e8c0 <__pack_d+0x50>
    ea24:	1109c83a 	sub	r4,r2,r4
    ea28:	00800e04 	movi	r2,56
    ea2c:	11004316 	blt	r2,r4,eb3c <__pack_d+0x2cc>
    ea30:	21fff804 	addi	r7,r4,-32
    ea34:	38004516 	blt	r7,zero,eb4c <__pack_d+0x2dc>
    ea38:	49d8d83a 	srl	r12,r9,r7
    ea3c:	001b883a 	mov	r13,zero
    ea40:	0023883a 	mov	r17,zero
    ea44:	01400044 	movi	r5,1
    ea48:	0025883a 	mov	r18,zero
    ea4c:	38004716 	blt	r7,zero,eb6c <__pack_d+0x2fc>
    ea50:	29d6983a 	sll	r11,r5,r7
    ea54:	0015883a 	mov	r10,zero
    ea58:	00bfffc4 	movi	r2,-1
    ea5c:	5089883a 	add	r4,r10,r2
    ea60:	588b883a 	add	r5,r11,r2
    ea64:	228d803a 	cmpltu	r6,r4,r10
    ea68:	314b883a 	add	r5,r6,r5
    ea6c:	4104703a 	and	r2,r8,r4
    ea70:	4946703a 	and	r3,r9,r5
    ea74:	10c4b03a 	or	r2,r2,r3
    ea78:	10000226 	beq	r2,zero,ea84 <__pack_d+0x214>
    ea7c:	04400044 	movi	r17,1
    ea80:	0025883a 	mov	r18,zero
    ea84:	00803fc4 	movi	r2,255
    ea88:	644eb03a 	or	r7,r12,r17
    ea8c:	3892703a 	and	r9,r7,r2
    ea90:	00802004 	movi	r2,128
    ea94:	6c90b03a 	or	r8,r13,r18
    ea98:	0015883a 	mov	r10,zero
    ea9c:	48801626 	beq	r9,r2,eaf8 <__pack_d+0x288>
    eaa0:	01001fc4 	movi	r4,127
    eaa4:	3905883a 	add	r2,r7,r4
    eaa8:	11cd803a 	cmpltu	r6,r2,r7
    eaac:	320d883a 	add	r6,r6,r8
    eab0:	100f883a 	mov	r7,r2
    eab4:	00840034 	movhi	r2,4096
    eab8:	10bfffc4 	addi	r2,r2,-1
    eabc:	3011883a 	mov	r8,r6
    eac0:	0007883a 	mov	r3,zero
    eac4:	11801b36 	bltu	r2,r6,eb34 <__pack_d+0x2c4>
    eac8:	4004963a 	slli	r2,r8,24
    eacc:	3808d23a 	srli	r4,r7,8
    ead0:	400ad23a 	srli	r5,r8,8
    ead4:	1813883a 	mov	r9,r3
    ead8:	1108b03a 	or	r4,r2,r4
    eadc:	00bfffc4 	movi	r2,-1
    eae0:	00c00434 	movhi	r3,16
    eae4:	18ffffc4 	addi	r3,r3,-1
    eae8:	208c703a 	and	r6,r4,r2
    eaec:	28ce703a 	and	r7,r5,r3
    eaf0:	4a01ffcc 	andi	r8,r9,2047
    eaf4:	003f7206 	br	e8c0 <__pack_d+0x50>
    eaf8:	503fe91e 	bne	r10,zero,eaa0 <__pack_d+0x230>
    eafc:	01004004 	movi	r4,256
    eb00:	3904703a 	and	r2,r7,r4
    eb04:	0007883a 	mov	r3,zero
    eb08:	10c4b03a 	or	r2,r2,r3
    eb0c:	10000626 	beq	r2,zero,eb28 <__pack_d+0x2b8>
    eb10:	3a45883a 	add	r2,r7,r9
    eb14:	11cd803a 	cmpltu	r6,r2,r7
    eb18:	320d883a 	add	r6,r6,r8
    eb1c:	100f883a 	mov	r7,r2
    eb20:	3011883a 	mov	r8,r6
    eb24:	0007883a 	mov	r3,zero
    eb28:	00840034 	movhi	r2,4096
    eb2c:	10bfffc4 	addi	r2,r2,-1
    eb30:	123fe52e 	bgeu	r2,r8,eac8 <__pack_d+0x258>
    eb34:	00c00044 	movi	r3,1
    eb38:	003fe306 	br	eac8 <__pack_d+0x258>
    eb3c:	0009883a 	mov	r4,zero
    eb40:	0013883a 	mov	r9,zero
    eb44:	000b883a 	mov	r5,zero
    eb48:	003fe406 	br	eadc <__pack_d+0x26c>
    eb4c:	4a47883a 	add	r3,r9,r9
    eb50:	008007c4 	movi	r2,31
    eb54:	1105c83a 	sub	r2,r2,r4
    eb58:	1886983a 	sll	r3,r3,r2
    eb5c:	4118d83a 	srl	r12,r8,r4
    eb60:	491ad83a 	srl	r13,r9,r4
    eb64:	1b18b03a 	or	r12,r3,r12
    eb68:	003fb506 	br	ea40 <__pack_d+0x1d0>
    eb6c:	2806d07a 	srli	r3,r5,1
    eb70:	008007c4 	movi	r2,31
    eb74:	1105c83a 	sub	r2,r2,r4
    eb78:	1896d83a 	srl	r11,r3,r2
    eb7c:	2914983a 	sll	r10,r5,r4
    eb80:	003fb506 	br	ea58 <__pack_d+0x1e8>

0000eb84 <__unpack_d>:
    eb84:	20c00117 	ldw	r3,4(r4)
    eb88:	22400017 	ldw	r9,0(r4)
    eb8c:	00800434 	movhi	r2,16
    eb90:	10bfffc4 	addi	r2,r2,-1
    eb94:	1808d53a 	srli	r4,r3,20
    eb98:	180cd7fa 	srli	r6,r3,31
    eb9c:	1894703a 	and	r10,r3,r2
    eba0:	2201ffcc 	andi	r8,r4,2047
    eba4:	281b883a 	mov	r13,r5
    eba8:	4817883a 	mov	r11,r9
    ebac:	29800115 	stw	r6,4(r5)
    ebb0:	5019883a 	mov	r12,r10
    ebb4:	40001e1e 	bne	r8,zero,ec30 <__unpack_d+0xac>
    ebb8:	4a84b03a 	or	r2,r9,r10
    ebbc:	10001926 	beq	r2,zero,ec24 <__unpack_d+0xa0>
    ebc0:	4804d63a 	srli	r2,r9,24
    ebc4:	500c923a 	slli	r6,r10,8
    ebc8:	013f0084 	movi	r4,-1022
    ebcc:	00c40034 	movhi	r3,4096
    ebd0:	18ffffc4 	addi	r3,r3,-1
    ebd4:	118cb03a 	or	r6,r2,r6
    ebd8:	008000c4 	movi	r2,3
    ebdc:	480a923a 	slli	r5,r9,8
    ebe0:	68800015 	stw	r2,0(r13)
    ebe4:	69000215 	stw	r4,8(r13)
    ebe8:	19800b36 	bltu	r3,r6,ec18 <__unpack_d+0x94>
    ebec:	200f883a 	mov	r7,r4
    ebf0:	1811883a 	mov	r8,r3
    ebf4:	2945883a 	add	r2,r5,r5
    ebf8:	1149803a 	cmpltu	r4,r2,r5
    ebfc:	3187883a 	add	r3,r6,r6
    ec00:	20c9883a 	add	r4,r4,r3
    ec04:	100b883a 	mov	r5,r2
    ec08:	200d883a 	mov	r6,r4
    ec0c:	39ffffc4 	addi	r7,r7,-1
    ec10:	413ff82e 	bgeu	r8,r4,ebf4 <__unpack_d+0x70>
    ec14:	69c00215 	stw	r7,8(r13)
    ec18:	69800415 	stw	r6,16(r13)
    ec1c:	69400315 	stw	r5,12(r13)
    ec20:	f800283a 	ret
    ec24:	00800084 	movi	r2,2
    ec28:	28800015 	stw	r2,0(r5)
    ec2c:	f800283a 	ret
    ec30:	0081ffc4 	movi	r2,2047
    ec34:	40800f26 	beq	r8,r2,ec74 <__unpack_d+0xf0>
    ec38:	480cd63a 	srli	r6,r9,24
    ec3c:	5006923a 	slli	r3,r10,8
    ec40:	4804923a 	slli	r2,r9,8
    ec44:	0009883a 	mov	r4,zero
    ec48:	30c6b03a 	or	r3,r6,r3
    ec4c:	01440034 	movhi	r5,4096
    ec50:	110cb03a 	or	r6,r2,r4
    ec54:	423f0044 	addi	r8,r8,-1023
    ec58:	194eb03a 	or	r7,r3,r5
    ec5c:	008000c4 	movi	r2,3
    ec60:	69c00415 	stw	r7,16(r13)
    ec64:	6a000215 	stw	r8,8(r13)
    ec68:	68800015 	stw	r2,0(r13)
    ec6c:	69800315 	stw	r6,12(r13)
    ec70:	f800283a 	ret
    ec74:	4a84b03a 	or	r2,r9,r10
    ec78:	1000031e 	bne	r2,zero,ec88 <__unpack_d+0x104>
    ec7c:	00800104 	movi	r2,4
    ec80:	28800015 	stw	r2,0(r5)
    ec84:	f800283a 	ret
    ec88:	0009883a 	mov	r4,zero
    ec8c:	01400234 	movhi	r5,8
    ec90:	4904703a 	and	r2,r9,r4
    ec94:	5146703a 	and	r3,r10,r5
    ec98:	10c4b03a 	or	r2,r2,r3
    ec9c:	10000526 	beq	r2,zero,ecb4 <__unpack_d+0x130>
    eca0:	00800044 	movi	r2,1
    eca4:	68800015 	stw	r2,0(r13)
    eca8:	6b000415 	stw	r12,16(r13)
    ecac:	6ac00315 	stw	r11,12(r13)
    ecb0:	f800283a 	ret
    ecb4:	68000015 	stw	zero,0(r13)
    ecb8:	003ffb06 	br	eca8 <__unpack_d+0x124>

0000ecbc <__fpcmp_parts_d>:
    ecbc:	21800017 	ldw	r6,0(r4)
    ecc0:	00c00044 	movi	r3,1
    ecc4:	19800a2e 	bgeu	r3,r6,ecf0 <__fpcmp_parts_d+0x34>
    ecc8:	28800017 	ldw	r2,0(r5)
    eccc:	1880082e 	bgeu	r3,r2,ecf0 <__fpcmp_parts_d+0x34>
    ecd0:	00c00104 	movi	r3,4
    ecd4:	30c02626 	beq	r6,r3,ed70 <__fpcmp_parts_d+0xb4>
    ecd8:	10c02226 	beq	r2,r3,ed64 <__fpcmp_parts_d+0xa8>
    ecdc:	00c00084 	movi	r3,2
    ece0:	30c00526 	beq	r6,r3,ecf8 <__fpcmp_parts_d+0x3c>
    ece4:	10c0071e 	bne	r2,r3,ed04 <__fpcmp_parts_d+0x48>
    ece8:	20800117 	ldw	r2,4(r4)
    ecec:	1000091e 	bne	r2,zero,ed14 <__fpcmp_parts_d+0x58>
    ecf0:	00800044 	movi	r2,1
    ecf4:	f800283a 	ret
    ecf8:	10c01a1e 	bne	r2,r3,ed64 <__fpcmp_parts_d+0xa8>
    ecfc:	0005883a 	mov	r2,zero
    ed00:	f800283a 	ret
    ed04:	22000117 	ldw	r8,4(r4)
    ed08:	28800117 	ldw	r2,4(r5)
    ed0c:	40800326 	beq	r8,r2,ed1c <__fpcmp_parts_d+0x60>
    ed10:	403ff726 	beq	r8,zero,ecf0 <__fpcmp_parts_d+0x34>
    ed14:	00bfffc4 	movi	r2,-1
    ed18:	f800283a 	ret
    ed1c:	20c00217 	ldw	r3,8(r4)
    ed20:	28800217 	ldw	r2,8(r5)
    ed24:	10fffa16 	blt	r2,r3,ed10 <__fpcmp_parts_d+0x54>
    ed28:	18800916 	blt	r3,r2,ed50 <__fpcmp_parts_d+0x94>
    ed2c:	21c00417 	ldw	r7,16(r4)
    ed30:	28c00417 	ldw	r3,16(r5)
    ed34:	21800317 	ldw	r6,12(r4)
    ed38:	28800317 	ldw	r2,12(r5)
    ed3c:	19fff436 	bltu	r3,r7,ed10 <__fpcmp_parts_d+0x54>
    ed40:	38c00526 	beq	r7,r3,ed58 <__fpcmp_parts_d+0x9c>
    ed44:	38c00236 	bltu	r7,r3,ed50 <__fpcmp_parts_d+0x94>
    ed48:	19ffec1e 	bne	r3,r7,ecfc <__fpcmp_parts_d+0x40>
    ed4c:	30bfeb2e 	bgeu	r6,r2,ecfc <__fpcmp_parts_d+0x40>
    ed50:	403fe71e 	bne	r8,zero,ecf0 <__fpcmp_parts_d+0x34>
    ed54:	003fef06 	br	ed14 <__fpcmp_parts_d+0x58>
    ed58:	11bffa2e 	bgeu	r2,r6,ed44 <__fpcmp_parts_d+0x88>
    ed5c:	403fe426 	beq	r8,zero,ecf0 <__fpcmp_parts_d+0x34>
    ed60:	003fec06 	br	ed14 <__fpcmp_parts_d+0x58>
    ed64:	28800117 	ldw	r2,4(r5)
    ed68:	103fe11e 	bne	r2,zero,ecf0 <__fpcmp_parts_d+0x34>
    ed6c:	003fe906 	br	ed14 <__fpcmp_parts_d+0x58>
    ed70:	11bfdd1e 	bne	r2,r6,ece8 <__fpcmp_parts_d+0x2c>
    ed74:	28c00117 	ldw	r3,4(r5)
    ed78:	20800117 	ldw	r2,4(r4)
    ed7c:	1885c83a 	sub	r2,r3,r2
    ed80:	f800283a 	ret

0000ed84 <__pack_f>:
    ed84:	20c00017 	ldw	r3,0(r4)
    ed88:	01c00044 	movi	r7,1
    ed8c:	21800317 	ldw	r6,12(r4)
    ed90:	21400117 	ldw	r5,4(r4)
    ed94:	38c02d2e 	bgeu	r7,r3,ee4c <__pack_f+0xc8>
    ed98:	00800104 	movi	r2,4
    ed9c:	18802826 	beq	r3,r2,ee40 <__pack_f+0xbc>
    eda0:	00800084 	movi	r2,2
    eda4:	18800126 	beq	r3,r2,edac <__pack_f+0x28>
    eda8:	3000101e 	bne	r6,zero,edec <__pack_f+0x68>
    edac:	000d883a 	mov	r6,zero
    edb0:	0007883a 	mov	r3,zero
    edb4:	19003fcc 	andi	r4,r3,255
    edb8:	200895fa 	slli	r4,r4,23
    edbc:	00c02034 	movhi	r3,128
    edc0:	18ffffc4 	addi	r3,r3,-1
    edc4:	30c6703a 	and	r3,r6,r3
    edc8:	10a0002c 	andhi	r2,r2,32768
    edcc:	10c4b03a 	or	r2,r2,r3
    edd0:	280a97fa 	slli	r5,r5,31
    edd4:	1104b03a 	or	r2,r2,r4
    edd8:	00e00034 	movhi	r3,32768
    eddc:	18ffffc4 	addi	r3,r3,-1
    ede0:	10c4703a 	and	r2,r2,r3
    ede4:	1144b03a 	or	r2,r2,r5
    ede8:	f800283a 	ret
    edec:	21000217 	ldw	r4,8(r4)
    edf0:	00bfe084 	movi	r2,-126
    edf4:	20801b16 	blt	r4,r2,ee64 <__pack_f+0xe0>
    edf8:	00801fc4 	movi	r2,127
    edfc:	11001016 	blt	r2,r4,ee40 <__pack_f+0xbc>
    ee00:	308e703a 	and	r7,r6,r2
    ee04:	2087883a 	add	r3,r4,r2
    ee08:	00801004 	movi	r2,64
    ee0c:	38800526 	beq	r7,r2,ee24 <__pack_f+0xa0>
    ee10:	31800fc4 	addi	r6,r6,63
    ee14:	30000716 	blt	r6,zero,ee34 <__pack_f+0xb0>
    ee18:	300490ba 	slli	r2,r6,2
    ee1c:	100cd27a 	srli	r6,r2,9
    ee20:	003fe406 	br	edb4 <__pack_f+0x30>
    ee24:	3080200c 	andi	r2,r6,128
    ee28:	103ffa26 	beq	r2,zero,ee14 <__pack_f+0x90>
    ee2c:	31cd883a 	add	r6,r6,r7
    ee30:	003ff806 	br	ee14 <__pack_f+0x90>
    ee34:	300cd07a 	srli	r6,r6,1
    ee38:	18c00044 	addi	r3,r3,1
    ee3c:	003ff606 	br	ee18 <__pack_f+0x94>
    ee40:	000d883a 	mov	r6,zero
    ee44:	00ffffc4 	movi	r3,-1
    ee48:	003fda06 	br	edb4 <__pack_f+0x30>
    ee4c:	31800434 	orhi	r6,r6,16
    ee50:	00802034 	movhi	r2,128
    ee54:	10bfffc4 	addi	r2,r2,-1
    ee58:	308c703a 	and	r6,r6,r2
    ee5c:	00ffffc4 	movi	r3,-1
    ee60:	003fd406 	br	edb4 <__pack_f+0x30>
    ee64:	1109c83a 	sub	r4,r2,r4
    ee68:	00800644 	movi	r2,25
    ee6c:	11001216 	blt	r2,r4,eeb8 <__pack_f+0x134>
    ee70:	3904983a 	sll	r2,r7,r4
    ee74:	3106d83a 	srl	r3,r6,r4
    ee78:	10bfffc4 	addi	r2,r2,-1
    ee7c:	3084703a 	and	r2,r6,r2
    ee80:	1004c03a 	cmpne	r2,r2,zero
    ee84:	1886b03a 	or	r3,r3,r2
    ee88:	19001fcc 	andi	r4,r3,127
    ee8c:	00801004 	movi	r2,64
    ee90:	20800c26 	beq	r4,r2,eec4 <__pack_f+0x140>
    ee94:	18c00fc4 	addi	r3,r3,63
    ee98:	00900034 	movhi	r2,16384
    ee9c:	10bfffc4 	addi	r2,r2,-1
    eea0:	180cd1fa 	srli	r6,r3,7
    eea4:	10c7803a 	cmpltu	r3,r2,r3
    eea8:	00802034 	movhi	r2,128
    eeac:	10bfffc4 	addi	r2,r2,-1
    eeb0:	308c703a 	and	r6,r6,r2
    eeb4:	003fbf06 	br	edb4 <__pack_f+0x30>
    eeb8:	0007883a 	mov	r3,zero
    eebc:	000d883a 	mov	r6,zero
    eec0:	003ff906 	br	eea8 <__pack_f+0x124>
    eec4:	1880200c 	andi	r2,r3,128
    eec8:	10000126 	beq	r2,zero,eed0 <__pack_f+0x14c>
    eecc:	1907883a 	add	r3,r3,r4
    eed0:	180cd1fa 	srli	r6,r3,7
    eed4:	00900034 	movhi	r2,16384
    eed8:	10bfffc4 	addi	r2,r2,-1
    eedc:	10c7803a 	cmpltu	r3,r2,r3
    eee0:	003ff106 	br	eea8 <__pack_f+0x124>

0000eee4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    eee4:	defffd04 	addi	sp,sp,-12
    eee8:	dfc00215 	stw	ra,8(sp)
    eeec:	dc400115 	stw	r17,4(sp)
    eef0:	dc000015 	stw	r16,0(sp)
    eef4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    eef8:	20001c16 	blt	r4,zero,ef6c <close+0x88>
    eefc:	20c00324 	muli	r3,r4,12
    ef00:	00800074 	movhi	r2,1
    ef04:	1089d304 	addi	r2,r2,10060
    ef08:	1889883a 	add	r4,r3,r2

  if (fd)
    ef0c:	20001726 	beq	r4,zero,ef6c <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ef10:	20800017 	ldw	r2,0(r4)
    ef14:	10800417 	ldw	r2,16(r2)
    ef18:	10002126 	beq	r2,zero,efa0 <close+0xbc>
    ef1c:	103ee83a 	callr	r2
    ef20:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ef24:	8009883a 	mov	r4,r16
    ef28:	000f57c0 	call	f57c <alt_release_fd>
    if (rval < 0)
    ef2c:	88000216 	blt	r17,zero,ef38 <close+0x54>
    ef30:	0005883a 	mov	r2,zero
    ef34:	00001d06 	br	efac <close+0xc8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    ef38:	00800074 	movhi	r2,1
    ef3c:	108e8a04 	addi	r2,r2,14888
    ef40:	10800017 	ldw	r2,0(r2)
    ef44:	1000031e 	bne	r2,zero,ef54 <close+0x70>
    ef48:	00c00074 	movhi	r3,1
    ef4c:	18d56a04 	addi	r3,r3,21928
    ef50:	00000206 	br	ef5c <close+0x78>
    ef54:	103ee83a 	callr	r2
    ef58:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
    ef5c:	0445c83a 	sub	r2,zero,r17
    ef60:	18800015 	stw	r2,0(r3)
    ef64:	00bfffc4 	movi	r2,-1
    ef68:	00001006 	br	efac <close+0xc8>
    ef6c:	00800074 	movhi	r2,1
    ef70:	108e8a04 	addi	r2,r2,14888
    ef74:	10800017 	ldw	r2,0(r2)
    ef78:	1000031e 	bne	r2,zero,ef88 <close+0xa4>
    ef7c:	00c00074 	movhi	r3,1
    ef80:	18d56a04 	addi	r3,r3,21928
    ef84:	00000206 	br	ef90 <close+0xac>
    ef88:	103ee83a 	callr	r2
    ef8c:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ef90:	00801444 	movi	r2,81
    ef94:	18800015 	stw	r2,0(r3)
    ef98:	00bfffc4 	movi	r2,-1
    ef9c:	00000306 	br	efac <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    efa0:	8009883a 	mov	r4,r16
    efa4:	000f57c0 	call	f57c <alt_release_fd>
    efa8:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    efac:	dfc00217 	ldw	ra,8(sp)
    efb0:	dc400117 	ldw	r17,4(sp)
    efb4:	dc000017 	ldw	r16,0(sp)
    efb8:	dec00304 	addi	sp,sp,12
    efbc:	f800283a 	ret

0000efc0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    efc0:	3005883a 	mov	r2,r6
    efc4:	f800283a 	ret

0000efc8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    efc8:	deffff04 	addi	sp,sp,-4
    efcc:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    efd0:	20000e16 	blt	r4,zero,f00c <fstat+0x44>
    efd4:	20c00324 	muli	r3,r4,12
    efd8:	00800074 	movhi	r2,1
    efdc:	1089d304 	addi	r2,r2,10060
    efe0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    efe4:	20000926 	beq	r4,zero,f00c <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    efe8:	20800017 	ldw	r2,0(r4)
    efec:	10800817 	ldw	r2,32(r2)
    eff0:	10000226 	beq	r2,zero,effc <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
    eff4:	103ee83a 	callr	r2
    eff8:	00001006 	br	f03c <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    effc:	00880004 	movi	r2,8192
    f000:	28800115 	stw	r2,4(r5)
    f004:	0005883a 	mov	r2,zero
    f008:	00000c06 	br	f03c <fstat+0x74>
    f00c:	00800074 	movhi	r2,1
    f010:	108e8a04 	addi	r2,r2,14888
    f014:	10800017 	ldw	r2,0(r2)
    f018:	1000031e 	bne	r2,zero,f028 <fstat+0x60>
    f01c:	00c00074 	movhi	r3,1
    f020:	18d56a04 	addi	r3,r3,21928
    f024:	00000206 	br	f030 <fstat+0x68>
    f028:	103ee83a 	callr	r2
    f02c:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f030:	00801444 	movi	r2,81
    f034:	18800015 	stw	r2,0(r3)
    f038:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
    f03c:	dfc00017 	ldw	ra,0(sp)
    f040:	dec00104 	addi	sp,sp,4
    f044:	f800283a 	ret

0000f048 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f048:	defff004 	addi	sp,sp,-64
    f04c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f050:	20000f16 	blt	r4,zero,f090 <isatty+0x48>
    f054:	20c00324 	muli	r3,r4,12
    f058:	00800074 	movhi	r2,1
    f05c:	1089d304 	addi	r2,r2,10060
    f060:	1885883a 	add	r2,r3,r2
  
  if (fd)
    f064:	10000a26 	beq	r2,zero,f090 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f068:	10800017 	ldw	r2,0(r2)
    f06c:	10800817 	ldw	r2,32(r2)
    f070:	1000021e 	bne	r2,zero,f07c <isatty+0x34>
    f074:	00800044 	movi	r2,1
    f078:	00001106 	br	f0c0 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f07c:	d80b883a 	mov	r5,sp
    f080:	000efc80 	call	efc8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f084:	d8800117 	ldw	r2,4(sp)
    f088:	10880020 	cmpeqi	r2,r2,8192
    f08c:	00000c06 	br	f0c0 <isatty+0x78>
    f090:	00800074 	movhi	r2,1
    f094:	108e8a04 	addi	r2,r2,14888
    f098:	10800017 	ldw	r2,0(r2)
    f09c:	1000031e 	bne	r2,zero,f0ac <isatty+0x64>
    f0a0:	00c00074 	movhi	r3,1
    f0a4:	18d56a04 	addi	r3,r3,21928
    f0a8:	00000206 	br	f0b4 <isatty+0x6c>
    f0ac:	103ee83a 	callr	r2
    f0b0:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f0b4:	00801444 	movi	r2,81
    f0b8:	18800015 	stw	r2,0(r3)
    f0bc:	0005883a 	mov	r2,zero
    return 0;
  }
}
    f0c0:	dfc00f17 	ldw	ra,60(sp)
    f0c4:	dec01004 	addi	sp,sp,64
    f0c8:	f800283a 	ret

0000f0cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f0cc:	deffff04 	addi	sp,sp,-4
    f0d0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f0d4:	01000074 	movhi	r4,1
    f0d8:	210e8f04 	addi	r4,r4,14908
    f0dc:	00c00074 	movhi	r3,1
    f0e0:	18c7ba04 	addi	r3,r3,7912

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f0e4:	20c00926 	beq	r4,r3,f10c <alt_load+0x40>
    f0e8:	01800074 	movhi	r6,1
    f0ec:	318e8f04 	addi	r6,r6,14908
  {
    while( to != end )
    f0f0:	19800626 	beq	r3,r6,f10c <alt_load+0x40>
    f0f4:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f0f8:	20800017 	ldw	r2,0(r4)
    f0fc:	18800015 	stw	r2,0(r3)
    f100:	1947883a 	add	r3,r3,r5
    f104:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f108:	30fffb1e 	bne	r6,r3,f0f8 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f10c:	01000034 	movhi	r4,0
    f110:	21000804 	addi	r4,r4,32
    f114:	00c00034 	movhi	r3,0
    f118:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f11c:	20c00926 	beq	r4,r3,f144 <alt_load+0x78>
    f120:	01800034 	movhi	r6,0
    f124:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
    f128:	19800626 	beq	r3,r6,f144 <alt_load+0x78>
    f12c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f130:	20800017 	ldw	r2,0(r4)
    f134:	18800015 	stw	r2,0(r3)
    f138:	1947883a 	add	r3,r3,r5
    f13c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f140:	30fffb1e 	bne	r6,r3,f130 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f144:	01000074 	movhi	r4,1
    f148:	2105f804 	addi	r4,r4,6112
    f14c:	00c00074 	movhi	r3,1
    f150:	18c5f804 	addi	r3,r3,6112

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f154:	20c00926 	beq	r4,r3,f17c <alt_load+0xb0>
    f158:	01800074 	movhi	r6,1
    f15c:	3187ba04 	addi	r6,r6,7912
  {
    while( to != end )
    f160:	19800626 	beq	r3,r6,f17c <alt_load+0xb0>
    f164:	01400104 	movi	r5,4
    {
      *to++ = *from++;
    f168:	20800017 	ldw	r2,0(r4)
    f16c:	18800015 	stw	r2,0(r3)
    f170:	1947883a 	add	r3,r3,r5
    f174:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f178:	30fffb1e 	bne	r6,r3,f168 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f17c:	0010b480 	call	10b48 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f180:	0010c2c0 	call	10c2c <alt_icache_flush_all>
}
    f184:	dfc00017 	ldw	ra,0(sp)
    f188:	dec00104 	addi	sp,sp,4
    f18c:	f800283a 	ret

0000f190 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f190:	defffe04 	addi	sp,sp,-8
    f194:	dfc00115 	stw	ra,4(sp)
    f198:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f19c:	2000020e 	bge	r4,zero,f1a8 <lseek+0x18>
    f1a0:	043febc4 	movi	r16,-81
    f1a4:	00000d06 	br	f1dc <lseek+0x4c>
    f1a8:	20c00324 	muli	r3,r4,12
    f1ac:	00800074 	movhi	r2,1
    f1b0:	1089d304 	addi	r2,r2,10060
    f1b4:	1889883a 	add	r4,r3,r2
  
  if (fd) 
    f1b8:	20001526 	beq	r4,zero,f210 <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f1bc:	20800017 	ldw	r2,0(r4)
    f1c0:	10800717 	ldw	r2,28(r2)
    f1c4:	1000021e 	bne	r2,zero,f1d0 <lseek+0x40>
    f1c8:	043fde84 	movi	r16,-134
    f1cc:	00000306 	br	f1dc <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f1d0:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    f1d4:	1000100e 	bge	r2,zero,f218 <lseek+0x88>
    f1d8:	1021883a 	mov	r16,r2
    f1dc:	00800074 	movhi	r2,1
    f1e0:	108e8a04 	addi	r2,r2,14888
    f1e4:	10800017 	ldw	r2,0(r2)
    f1e8:	1000031e 	bne	r2,zero,f1f8 <lseek+0x68>
    f1ec:	00c00074 	movhi	r3,1
    f1f0:	18d56a04 	addi	r3,r3,21928
    f1f4:	00000206 	br	f200 <lseek+0x70>
    f1f8:	103ee83a 	callr	r2
    f1fc:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
    f200:	0405c83a 	sub	r2,zero,r16
    f204:	18800015 	stw	r2,0(r3)
    f208:	00bfffc4 	movi	r2,-1
    f20c:	00000206 	br	f218 <lseek+0x88>
    f210:	043febc4 	movi	r16,-81
    f214:	003ff106 	br	f1dc <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
    f218:	dfc00117 	ldw	ra,4(sp)
    f21c:	dc000017 	ldw	r16,0(sp)
    f220:	dec00204 	addi	sp,sp,8
    f224:	f800283a 	ret

0000f228 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f228:	defffe04 	addi	sp,sp,-8
    f22c:	dfc00115 	stw	ra,4(sp)
    f230:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f234:	0009883a 	mov	r4,zero
    f238:	000f6e40 	call	f6e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f23c:	000f7040 	call	f704 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f240:	01800074 	movhi	r6,1
    f244:	3187a604 	addi	r6,r6,7832
    f248:	3009883a 	mov	r4,r6
    f24c:	300b883a 	mov	r5,r6
    f250:	0010dd00 	call	10dd0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f254:	d126ed17 	ldw	r4,-25676(gp)
    f258:	d166ee17 	ldw	r5,-25672(gp)
    f25c:	d1a6ef17 	ldw	r6,-25668(gp)
    f260:	00001a40 	call	1a4 <main>
    f264:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    f268:	01000044 	movi	r4,1
    f26c:	000eee40 	call	eee4 <close>
  exit (result);
    f270:	8009883a 	mov	r4,r16
    f274:	00112300 	call	11230 <exit>

0000f278 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    f278:	f800283a 	ret

0000f27c <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    f27c:	f800283a 	ret

0000f280 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    f280:	defff804 	addi	sp,sp,-32
    f284:	dfc00415 	stw	ra,16(sp)
    f288:	dc800315 	stw	r18,12(sp)
    f28c:	dc400215 	stw	r17,8(sp)
    f290:	dc000115 	stw	r16,4(sp)
    f294:	d9400515 	stw	r5,20(sp)
    f298:	d9800615 	stw	r6,24(sp)
    f29c:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
    f2a0:	d8800504 	addi	r2,sp,20
    f2a4:	d8800015 	stw	r2,0(sp)
    f2a8:	2023883a 	mov	r17,r4
    f2ac:	00005d06 	br	f424 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    f2b0:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    f2b4:	21003fcc 	andi	r4,r4,255
    f2b8:	2100201c 	xori	r4,r4,128
    f2bc:	213fe004 	addi	r4,r4,-128
    f2c0:	00800944 	movi	r2,37
    f2c4:	20800226 	beq	r4,r2,f2d0 <alt_printf+0x50>
        {
            alt_putchar(c);
    f2c8:	000f45c0 	call	f45c <alt_putchar>
    f2cc:	00005506 	br	f424 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    f2d0:	89400003 	ldbu	r5,0(r17)
    f2d4:	8c400044 	addi	r17,r17,1
    f2d8:	29003fcc 	andi	r4,r5,255
    f2dc:	2100201c 	xori	r4,r4,128
    f2e0:	213fe004 	addi	r4,r4,-128
    f2e4:	20005726 	beq	r4,zero,f444 <alt_printf+0x1c4>
            {
                if (c == '%')
    f2e8:	00800944 	movi	r2,37
    f2ec:	2080021e 	bne	r4,r2,f2f8 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    f2f0:	000f45c0 	call	f45c <alt_putchar>
    f2f4:	00004b06 	br	f424 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
    f2f8:	28c03fcc 	andi	r3,r5,255
    f2fc:	18c0201c 	xori	r3,r3,128
    f300:	18ffe004 	addi	r3,r3,-128
    f304:	008018c4 	movi	r2,99
    f308:	1880061e 	bne	r3,r2,f324 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
    f30c:	d8c00017 	ldw	r3,0(sp)
    f310:	18800104 	addi	r2,r3,4
    f314:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
    f318:	19000017 	ldw	r4,0(r3)
    f31c:	000f45c0 	call	f45c <alt_putchar>
    f320:	00004006 	br	f424 <alt_printf+0x1a4>
                }
                else if (c == 'x')
    f324:	28c03fcc 	andi	r3,r5,255
    f328:	18c0201c 	xori	r3,r3,128
    f32c:	18ffe004 	addi	r3,r3,-128
    f330:	00801e04 	movi	r2,120
    f334:	1880231e 	bne	r3,r2,f3c4 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    f338:	d8c00017 	ldw	r3,0(sp)
    f33c:	18800104 	addi	r2,r3,4
    f340:	d8800015 	stw	r2,0(sp)
    f344:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    f348:	90000326 	beq	r18,zero,f358 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    f34c:	90bc002c 	andhi	r2,r18,61440
    f350:	10000426 	beq	r2,zero,f364 <alt_printf+0xe4>
    f354:	00003906 	br	f43c <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    f358:	01000c04 	movi	r4,48
    f35c:	000f45c0 	call	f45c <alt_putchar>
    f360:	00003006 	br	f424 <alt_printf+0x1a4>
                        continue;
    f364:	04000704 	movi	r16,28
    f368:	013fff04 	movi	r4,-4
    f36c:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    f370:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    f374:	1c04983a 	sll	r2,r3,r16
    f378:	9084703a 	and	r2,r18,r2
    f37c:	103ffc26 	beq	r2,zero,f370 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    f380:	80002816 	blt	r16,zero,f424 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    f384:	008003c4 	movi	r2,15
    f388:	1404983a 	sll	r2,r2,r16
    f38c:	9084703a 	and	r2,r18,r2
    f390:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
    f394:	00800244 	movi	r2,9
    f398:	10c00236 	bltu	r2,r3,f3a4 <alt_printf+0x124>
                            c = '0' + digit;
    f39c:	19000c04 	addi	r4,r3,48
    f3a0:	00000106 	br	f3a8 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
    f3a4:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
    f3a8:	21003fcc 	andi	r4,r4,255
    f3ac:	2100201c 	xori	r4,r4,128
    f3b0:	213fe004 	addi	r4,r4,-128
    f3b4:	000f45c0 	call	f45c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    f3b8:	843fff04 	addi	r16,r16,-4
    f3bc:	80001916 	blt	r16,zero,f424 <alt_printf+0x1a4>
    f3c0:	003ff006 	br	f384 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    f3c4:	28c03fcc 	andi	r3,r5,255
    f3c8:	18c0201c 	xori	r3,r3,128
    f3cc:	18ffe004 	addi	r3,r3,-128
    f3d0:	00801cc4 	movi	r2,115
    f3d4:	1880131e 	bne	r3,r2,f424 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    f3d8:	d8800017 	ldw	r2,0(sp)
    f3dc:	10c00104 	addi	r3,r2,4
    f3e0:	d8c00015 	stw	r3,0(sp)
    f3e4:	14000017 	ldw	r16,0(r2)

                    while(*s)
    f3e8:	81000003 	ldbu	r4,0(r16)
    f3ec:	20803fcc 	andi	r2,r4,255
    f3f0:	1080201c 	xori	r2,r2,128
    f3f4:	10bfe004 	addi	r2,r2,-128
    f3f8:	10000a26 	beq	r2,zero,f424 <alt_printf+0x1a4>
                      alt_putchar(*s++);
    f3fc:	84000044 	addi	r16,r16,1
    f400:	21003fcc 	andi	r4,r4,255
    f404:	2100201c 	xori	r4,r4,128
    f408:	213fe004 	addi	r4,r4,-128
    f40c:	000f45c0 	call	f45c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    f410:	81000003 	ldbu	r4,0(r16)
    f414:	20803fcc 	andi	r2,r4,255
    f418:	1080201c 	xori	r2,r2,128
    f41c:	10bfe004 	addi	r2,r2,-128
    f420:	103ff61e 	bne	r2,zero,f3fc <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    f424:	89000003 	ldbu	r4,0(r17)
    f428:	20803fcc 	andi	r2,r4,255
    f42c:	1080201c 	xori	r2,r2,128
    f430:	10bfe004 	addi	r2,r2,-128
    f434:	103f9e1e 	bne	r2,zero,f2b0 <alt_printf+0x30>
    f438:	00000206 	br	f444 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
    f43c:	04000704 	movi	r16,28
    f440:	003fd006 	br	f384 <alt_printf+0x104>
    f444:	dfc00417 	ldw	ra,16(sp)
    f448:	dc800317 	ldw	r18,12(sp)
    f44c:	dc400217 	ldw	r17,8(sp)
    f450:	dc000117 	ldw	r16,4(sp)
    f454:	dec00804 	addi	sp,sp,32
    f458:	f800283a 	ret

0000f45c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    f45c:	deffff04 	addi	sp,sp,-4
    f460:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    f464:	00800074 	movhi	r2,1
    f468:	108e7f04 	addi	r2,r2,14844
    f46c:	10800017 	ldw	r2,0(r2)
    f470:	11400217 	ldw	r5,8(r2)
    f474:	00112dc0 	call	112dc <putc>
#endif
}
    f478:	dfc00017 	ldw	ra,0(sp)
    f47c:	dec00104 	addi	sp,sp,4
    f480:	f800283a 	ret

0000f484 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f484:	defffe04 	addi	sp,sp,-8
    f488:	dfc00115 	stw	ra,4(sp)
    f48c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f490:	20002916 	blt	r4,zero,f538 <read+0xb4>
    f494:	20c00324 	muli	r3,r4,12
    f498:	00800074 	movhi	r2,1
    f49c:	1089d304 	addi	r2,r2,10060
    f4a0:	1889883a 	add	r4,r3,r2
  
  if (fd)
    f4a4:	20002426 	beq	r4,zero,f538 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f4a8:	20800217 	ldw	r2,8(r4)
    f4ac:	108000cc 	andi	r2,r2,3
    f4b0:	00c00044 	movi	r3,1
    f4b4:	10c01326 	beq	r2,r3,f504 <read+0x80>
    f4b8:	20800017 	ldw	r2,0(r4)
    f4bc:	10800517 	ldw	r2,20(r2)
    f4c0:	10001026 	beq	r2,zero,f504 <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f4c4:	103ee83a 	callr	r2
    f4c8:	1021883a 	mov	r16,r2
    f4cc:	1000260e 	bge	r2,zero,f568 <read+0xe4>
    f4d0:	00800074 	movhi	r2,1
    f4d4:	108e8a04 	addi	r2,r2,14888
    f4d8:	10800017 	ldw	r2,0(r2)
    f4dc:	1000031e 	bne	r2,zero,f4ec <read+0x68>
    f4e0:	00c00074 	movhi	r3,1
    f4e4:	18d56a04 	addi	r3,r3,21928
    f4e8:	00000206 	br	f4f4 <read+0x70>
    f4ec:	103ee83a 	callr	r2
    f4f0:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
    f4f4:	0405c83a 	sub	r2,zero,r16
    f4f8:	18800015 	stw	r2,0(r3)
    f4fc:	043fffc4 	movi	r16,-1
    f500:	00001906 	br	f568 <read+0xe4>
    f504:	00800074 	movhi	r2,1
    f508:	108e8a04 	addi	r2,r2,14888
    f50c:	10800017 	ldw	r2,0(r2)
    f510:	1000031e 	bne	r2,zero,f520 <read+0x9c>
    f514:	00c00074 	movhi	r3,1
    f518:	18d56a04 	addi	r3,r3,21928
    f51c:	00000206 	br	f528 <read+0xa4>
    f520:	103ee83a 	callr	r2
    f524:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    f528:	00800344 	movi	r2,13
    f52c:	18800015 	stw	r2,0(r3)
    f530:	043fffc4 	movi	r16,-1
    f534:	00000c06 	br	f568 <read+0xe4>
    f538:	00800074 	movhi	r2,1
    f53c:	108e8a04 	addi	r2,r2,14888
    f540:	10800017 	ldw	r2,0(r2)
    f544:	1000031e 	bne	r2,zero,f554 <read+0xd0>
    f548:	00c00074 	movhi	r3,1
    f54c:	18d56a04 	addi	r3,r3,21928
    f550:	00000206 	br	f55c <read+0xd8>
    f554:	103ee83a 	callr	r2
    f558:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f55c:	00801444 	movi	r2,81
    f560:	18800015 	stw	r2,0(r3)
    f564:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    f568:	8005883a 	mov	r2,r16
    f56c:	dfc00117 	ldw	ra,4(sp)
    f570:	dc000017 	ldw	r16,0(sp)
    f574:	dec00204 	addi	sp,sp,8
    f578:	f800283a 	ret

0000f57c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    f57c:	00800084 	movi	r2,2
    f580:	1100060e 	bge	r2,r4,f59c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    f584:	20800324 	muli	r2,r4,12
    f588:	00c00074 	movhi	r3,1
    f58c:	18c9d304 	addi	r3,r3,10060
    f590:	10c5883a 	add	r2,r2,r3
    f594:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    f598:	10000015 	stw	zero,0(r2)
    f59c:	f800283a 	ret

0000f5a0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5a0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5a4:	00bfff84 	movi	r2,-2
    f5a8:	2884703a 	and	r2,r5,r2
    f5ac:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f5b0:	d0a00d17 	ldw	r2,-32716(gp)
    f5b4:	108000c4 	addi	r2,r2,3
    f5b8:	00ffff04 	movi	r3,-4
    f5bc:	10c6703a 	and	r3,r2,r3
    f5c0:	d0e00d15 	stw	r3,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f5c4:	1909883a 	add	r4,r3,r4
    f5c8:	00820034 	movhi	r2,2048
    f5cc:	10800004 	addi	r2,r2,0
    f5d0:	1100032e 	bgeu	r2,r4,f5e0 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5d4:	2801703a 	wrctl	status,r5
    f5d8:	00ffffc4 	movi	r3,-1
    f5dc:	00000206 	br	f5e8 <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    f5e0:	d1200d15 	stw	r4,-32716(gp)
    f5e4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    f5e8:	1805883a 	mov	r2,r3
    f5ec:	f800283a 	ret

0000f5f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f5f0:	defffe04 	addi	sp,sp,-8
    f5f4:	dfc00115 	stw	ra,4(sp)
    f5f8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f5fc:	20002816 	blt	r4,zero,f6a0 <write+0xb0>
    f600:	20c00324 	muli	r3,r4,12
    f604:	00800074 	movhi	r2,1
    f608:	1089d304 	addi	r2,r2,10060
    f60c:	1889883a 	add	r4,r3,r2
  
  if (fd)
    f610:	20002326 	beq	r4,zero,f6a0 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f614:	20800217 	ldw	r2,8(r4)
    f618:	108000cc 	andi	r2,r2,3
    f61c:	10001326 	beq	r2,zero,f66c <write+0x7c>
    f620:	20800017 	ldw	r2,0(r4)
    f624:	10800617 	ldw	r2,24(r2)
    f628:	10001026 	beq	r2,zero,f66c <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f62c:	103ee83a 	callr	r2
    f630:	1021883a 	mov	r16,r2
    f634:	1000260e 	bge	r2,zero,f6d0 <write+0xe0>
    f638:	00800074 	movhi	r2,1
    f63c:	108e8a04 	addi	r2,r2,14888
    f640:	10800017 	ldw	r2,0(r2)
    f644:	1000031e 	bne	r2,zero,f654 <write+0x64>
    f648:	00c00074 	movhi	r3,1
    f64c:	18d56a04 	addi	r3,r3,21928
    f650:	00000206 	br	f65c <write+0x6c>
    f654:	103ee83a 	callr	r2
    f658:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
    f65c:	0405c83a 	sub	r2,zero,r16
    f660:	18800015 	stw	r2,0(r3)
    f664:	043fffc4 	movi	r16,-1
    f668:	00001906 	br	f6d0 <write+0xe0>
    f66c:	00800074 	movhi	r2,1
    f670:	108e8a04 	addi	r2,r2,14888
    f674:	10800017 	ldw	r2,0(r2)
    f678:	1000031e 	bne	r2,zero,f688 <write+0x98>
    f67c:	00c00074 	movhi	r3,1
    f680:	18d56a04 	addi	r3,r3,21928
    f684:	00000206 	br	f690 <write+0xa0>
    f688:	103ee83a 	callr	r2
    f68c:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    f690:	00800344 	movi	r2,13
    f694:	18800015 	stw	r2,0(r3)
    f698:	043fffc4 	movi	r16,-1
    f69c:	00000c06 	br	f6d0 <write+0xe0>
    f6a0:	00800074 	movhi	r2,1
    f6a4:	108e8a04 	addi	r2,r2,14888
    f6a8:	10800017 	ldw	r2,0(r2)
    f6ac:	1000031e 	bne	r2,zero,f6bc <write+0xcc>
    f6b0:	00c00074 	movhi	r3,1
    f6b4:	18d56a04 	addi	r3,r3,21928
    f6b8:	00000206 	br	f6c4 <write+0xd4>
    f6bc:	103ee83a 	callr	r2
    f6c0:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f6c4:	00801444 	movi	r2,81
    f6c8:	18800015 	stw	r2,0(r3)
    f6cc:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    f6d0:	8005883a 	mov	r2,r16
    f6d4:	dfc00117 	ldw	ra,4(sp)
    f6d8:	dc000017 	ldw	r16,0(sp)
    f6dc:	dec00204 	addi	sp,sp,8
    f6e0:	f800283a 	ret

0000f6e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f6e4:	deffff04 	addi	sp,sp,-4
    f6e8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    f6ec:	00110c40 	call	110c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f6f0:	00800044 	movi	r2,1
    f6f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f6f8:	dfc00017 	ldw	ra,0(sp)
    f6fc:	dec00104 	addi	sp,sp,4
    f700:	f800283a 	ret

0000f704 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f704:	defffd04 	addi	sp,sp,-12
    f708:	dfc00215 	stw	ra,8(sp)
    f70c:	dc400115 	stw	r17,4(sp)
    f710:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    f714:	04400074 	movhi	r17,1
    f718:	8c4a3d04 	addi	r17,r17,10484
    f71c:	8809883a 	mov	r4,r17
    f720:	000b883a 	mov	r5,zero
    f724:	01800204 	movi	r6,8
    f728:	000f9e00 	call	f9e0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f72c:	04000074 	movhi	r16,1
    f730:	840e8704 	addi	r16,r16,14876
    f734:	893ff604 	addi	r4,r17,-40
    f738:	800b883a 	mov	r5,r16
    f73c:	0010b4c0 	call	10b4c <alt_dev_llist_insert>
    f740:	01000074 	movhi	r4,1
    f744:	210e4b04 	addi	r4,r4,14636
    f748:	800b883a 	mov	r5,r16
    f74c:	0010b4c0 	call	10b4c <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    f750:	01000074 	movhi	r4,1
    f754:	210e5704 	addi	r4,r4,14684
    f758:	20800a17 	ldw	r2,40(r4)
    f75c:	10800104 	addi	r2,r2,4
    f760:	10c0000b 	ldhu	r3,0(r2)
    f764:	20c00c15 	stw	r3,48(r4)
    f768:	10800017 	ldw	r2,0(r2)
    f76c:	100ad43a 	srli	r5,r2,16
    f770:	21400d15 	stw	r5,52(r4)
    f774:	00801004 	movi	r2,64
    f778:	10c00436 	bltu	r2,r3,f78c <alt_sys_init+0x88>
    f77c:	00800fc4 	movi	r2,63
    f780:	20800f15 	stw	r2,60(r4)
    f784:	00800184 	movi	r2,6
    f788:	20801015 	stw	r2,64(r4)
    f78c:	00800804 	movi	r2,32
    f790:	11400436 	bltu	r2,r5,f7a4 <alt_sys_init+0xa0>
    f794:	00c007c4 	movi	r3,31
    f798:	00800074 	movhi	r2,1
    f79c:	108e5704 	addi	r2,r2,14684
    f7a0:	10c01115 	stw	r3,68(r2)
    f7a4:	04000074 	movhi	r16,1
    f7a8:	840e5704 	addi	r16,r16,14684
    f7ac:	8009883a 	mov	r4,r16
    f7b0:	00100140 	call	10014 <alt_up_char_buffer_init>
    f7b4:	8009883a 	mov	r4,r16
    f7b8:	01400074 	movhi	r5,1
    f7bc:	294e8704 	addi	r5,r5,14876
    f7c0:	0010b4c0 	call	10b4c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    f7c4:	01800074 	movhi	r6,1
    f7c8:	318e6904 	addi	r6,r6,14756
    f7cc:	30c00a17 	ldw	r3,40(r6)
    f7d0:	18800017 	ldw	r2,0(r3)
    f7d4:	30800b15 	stw	r2,44(r6)
    f7d8:	18800117 	ldw	r2,4(r3)
    f7dc:	30800c15 	stw	r2,48(r6)
    f7e0:	19000204 	addi	r4,r3,8
    f7e4:	2080000b 	ldhu	r2,0(r4)
    f7e8:	30800f15 	stw	r2,60(r6)
    f7ec:	20800017 	ldw	r2,0(r4)
    f7f0:	1004d43a 	srli	r2,r2,16
    f7f4:	30801015 	stw	r2,64(r6)
    f7f8:	18c00304 	addi	r3,r3,12
    f7fc:	18800017 	ldw	r2,0(r3)
    f800:	1005d07a 	srai	r2,r2,1
    f804:	01000044 	movi	r4,1
    f808:	1104703a 	and	r2,r2,r4
    f80c:	30800d15 	stw	r2,52(r6)
    f810:	18800017 	ldw	r2,0(r3)
    f814:	1005d13a 	srai	r2,r2,4
    f818:	114003cc 	andi	r5,r2,15
    f81c:	31400e15 	stw	r5,56(r6)
    f820:	1a000017 	ldw	r8,0(r3)
    f824:	400ed43a 	srli	r7,r8,16
    f828:	2900021e 	bne	r5,r4,f834 <alt_sys_init+0x130>
    f82c:	30001115 	stw	zero,68(r6)
    f830:	00000b06 	br	f860 <alt_sys_init+0x15c>
    f834:	00800084 	movi	r2,2
    f838:	2880051e 	bne	r5,r2,f850 <alt_sys_init+0x14c>
    f83c:	00c00044 	movi	r3,1
    f840:	00800074 	movhi	r2,1
    f844:	108e6904 	addi	r2,r2,14756
    f848:	10c01115 	stw	r3,68(r2)
    f84c:	00000406 	br	f860 <alt_sys_init+0x15c>
    f850:	00c00084 	movi	r3,2
    f854:	00800074 	movhi	r2,1
    f858:	108e6904 	addi	r2,r2,14756
    f85c:	10c01115 	stw	r3,68(r2)
    f860:	01000074 	movhi	r4,1
    f864:	210e6904 	addi	r4,r4,14756
    f868:	38c03fcc 	andi	r3,r7,255
    f86c:	01800804 	movi	r6,32
    f870:	30c5c83a 	sub	r2,r6,r3
    f874:	017fffc4 	movi	r5,-1
    f878:	2884d83a 	srl	r2,r5,r2
    f87c:	20801215 	stw	r2,72(r4)
    f880:	20801117 	ldw	r2,68(r4)
    f884:	1887883a 	add	r3,r3,r2
    f888:	20c01315 	stw	r3,76(r4)
    f88c:	4004d63a 	srli	r2,r8,24
    f890:	308dc83a 	sub	r6,r6,r2
    f894:	298ad83a 	srl	r5,r5,r6
    f898:	21401415 	stw	r5,80(r4)
    f89c:	01400074 	movhi	r5,1
    f8a0:	294e8704 	addi	r5,r5,14876
    f8a4:	0010b4c0 	call	10b4c <alt_dev_llist_insert>
}
    f8a8:	dfc00217 	ldw	ra,8(sp)
    f8ac:	dc400117 	ldw	r17,4(sp)
    f8b0:	dc000017 	ldw	r16,0(sp)
    f8b4:	dec00304 	addi	sp,sp,12
    f8b8:	f800283a 	ret

0000f8bc <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f8bc:	deffff04 	addi	sp,sp,-4
    f8c0:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f8c4:	21000017 	ldw	r4,0(r4)
    f8c8:	21000a04 	addi	r4,r4,40
    f8cc:	000fb940 	call	fb94 <altera_avalon_jtag_uart_ioctl>
}
    f8d0:	dfc00017 	ldw	ra,0(sp)
    f8d4:	dec00104 	addi	sp,sp,4
    f8d8:	f800283a 	ret

0000f8dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f8dc:	deffff04 	addi	sp,sp,-4
    f8e0:	dfc00015 	stw	ra,0(sp)
    f8e4:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f8e8:	21000017 	ldw	r4,0(r4)
    f8ec:	21000a04 	addi	r4,r4,40
    f8f0:	11400217 	ldw	r5,8(r2)
    f8f4:	000f9540 	call	f954 <altera_avalon_jtag_uart_close>
}
    f8f8:	dfc00017 	ldw	ra,0(sp)
    f8fc:	dec00104 	addi	sp,sp,4
    f900:	f800283a 	ret

0000f904 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f904:	deffff04 	addi	sp,sp,-4
    f908:	dfc00015 	stw	ra,0(sp)
    f90c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f910:	21000017 	ldw	r4,0(r4)
    f914:	21000a04 	addi	r4,r4,40
    f918:	11c00217 	ldw	r7,8(r2)
    f91c:	000fd700 	call	fd70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f920:	dfc00017 	ldw	ra,0(sp)
    f924:	dec00104 	addi	sp,sp,4
    f928:	f800283a 	ret

0000f92c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f92c:	deffff04 	addi	sp,sp,-4
    f930:	dfc00015 	stw	ra,0(sp)
    f934:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f938:	21000017 	ldw	r4,0(r4)
    f93c:	21000a04 	addi	r4,r4,40
    f940:	11c00217 	ldw	r7,8(r2)
    f944:	000fc080 	call	fc08 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f948:	dfc00017 	ldw	ra,0(sp)
    f94c:	dec00104 	addi	sp,sp,4
    f950:	f800283a 	ret

0000f954 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f954:	21800c17 	ldw	r6,48(r4)
    f958:	2950000c 	andi	r5,r5,16384
    f95c:	280b003a 	cmpeq	r5,r5,zero
    f960:	00000306 	br	f970 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
    f964:	2800021e 	bne	r5,zero,f970 <altera_avalon_jtag_uart_close+0x1c>
    f968:	00bffd44 	movi	r2,-11
    f96c:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f970:	20800d17 	ldw	r2,52(r4)
    f974:	11800326 	beq	r2,r6,f984 <altera_avalon_jtag_uart_close+0x30>
    f978:	20c00917 	ldw	r3,36(r4)
    f97c:	20800117 	ldw	r2,4(r4)
    f980:	18bff836 	bltu	r3,r2,f964 <altera_avalon_jtag_uart_close+0x10>
    f984:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    f988:	f800283a 	ret

0000f98c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f98c:	20800017 	ldw	r2,0(r4)
    f990:	10c00104 	addi	r3,r2,4
    f994:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f998:	01410004 	movi	r5,1024
    f99c:	1144703a 	and	r2,r2,r5
    f9a0:	10000526 	beq	r2,zero,f9b8 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f9a4:	20800817 	ldw	r2,32(r4)
    f9a8:	1144b03a 	or	r2,r2,r5
    f9ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f9b0:	20000915 	stw	zero,36(r4)
    f9b4:	00000606 	br	f9d0 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f9b8:	20c00917 	ldw	r3,36(r4)
    f9bc:	00a00034 	movhi	r2,32768
    f9c0:	10bfff04 	addi	r2,r2,-4
    f9c4:	10c00236 	bltu	r2,r3,f9d0 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
    f9c8:	18800044 	addi	r2,r3,1
    f9cc:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f9d0:	00800074 	movhi	r2,1
    f9d4:	10956f04 	addi	r2,r2,21948
    f9d8:	10800017 	ldw	r2,0(r2)
    f9dc:	f800283a 	ret

0000f9e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f9e0:	defffd04 	addi	sp,sp,-12
    f9e4:	dfc00215 	stw	ra,8(sp)
    f9e8:	dc000115 	stw	r16,4(sp)
    f9ec:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f9f0:	00c00044 	movi	r3,1
    f9f4:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f9f8:	20800017 	ldw	r2,0(r4)
    f9fc:	10c00135 	stwio	r3,4(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    fa00:	d8000015 	stw	zero,0(sp)
    fa04:	2809883a 	mov	r4,r5
    fa08:	300b883a 	mov	r5,r6
    fa0c:	01800074 	movhi	r6,1
    fa10:	31be9804 	addi	r6,r6,-1440
    fa14:	800f883a 	mov	r7,r16
    fa18:	0010ce40 	call	10ce4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    fa1c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    fa20:	81000204 	addi	r4,r16,8
    fa24:	00800074 	movhi	r2,1
    fa28:	10956f04 	addi	r2,r2,21948
    fa2c:	11400017 	ldw	r5,0(r2)
    fa30:	01800074 	movhi	r6,1
    fa34:	31be6304 	addi	r6,r6,-1652
    fa38:	800f883a 	mov	r7,r16
    fa3c:	0010ab40 	call	10ab4 <alt_alarm_start>
    fa40:	1000030e 	bge	r2,zero,fa50 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    fa44:	00a00034 	movhi	r2,32768
    fa48:	10bfffc4 	addi	r2,r2,-1
    fa4c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    fa50:	dfc00217 	ldw	ra,8(sp)
    fa54:	dc000117 	ldw	r16,4(sp)
    fa58:	dec00304 	addi	sp,sp,12
    fa5c:	f800283a 	ret

0000fa60 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    fa60:	22000017 	ldw	r8,0(r4)
    fa64:	03800104 	movi	r14,4
    fa68:	4399883a 	add	r12,r8,r14
    fa6c:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fa70:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    fa74:	5880c00c 	andi	r2,r11,768
    fa78:	10004526 	beq	r2,zero,fb90 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    fa7c:	5880400c 	andi	r2,r11,256
    fa80:	10002126 	beq	r2,zero,fb08 <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa84:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    fa88:	10800044 	addi	r2,r2,1
    fa8c:	1081ffcc 	andi	r2,r2,2047
    fa90:	20c00b17 	ldw	r3,44(r4)
    fa94:	10c01626 	beq	r2,r3,faf0 <altera_avalon_jtag_uart_irq+0x90>
    fa98:	02a00014 	movui	r10,32768
    fa9c:	02400e04 	movi	r9,56
    faa0:	01c00044 	movi	r7,1
    faa4:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    faa8:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    faac:	2a84703a 	and	r2,r5,r10
    fab0:	10000d26 	beq	r2,zero,fae8 <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fab4:	20800a17 	ldw	r2,40(r4)
    fab8:	1105883a 	add	r2,r2,r4
    fabc:	1245883a 	add	r2,r2,r9
    fac0:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fac4:	20800a17 	ldw	r2,40(r4)
    fac8:	11c5883a 	add	r2,r2,r7
    facc:	1184703a 	and	r2,r2,r6
    fad0:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fad4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    fad8:	11c5883a 	add	r2,r2,r7
    fadc:	1184703a 	and	r2,r2,r6
    fae0:	20c00b17 	ldw	r3,44(r4)
    fae4:	10fff01e 	bne	r2,r3,faa8 <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    fae8:	2b44703a 	and	r2,r5,r13
    faec:	10000626 	beq	r2,zero,fb08 <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    faf0:	20800817 	ldw	r2,32(r4)
    faf4:	00ffff84 	movi	r3,-2
    faf8:	10c4703a 	and	r2,r2,r3
    fafc:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    fb00:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fb04:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fb08:	5880800c 	andi	r2,r11,512
    fb0c:	103fd826 	beq	r2,zero,fa70 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fb10:	5b44703a 	and	r2,r11,r13
    fb14:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    fb18:	283fd526 	beq	r5,zero,fa70 <altera_avalon_jtag_uart_irq+0x10>
    fb1c:	20c00d17 	ldw	r3,52(r4)
    fb20:	20800c17 	ldw	r2,48(r4)
    fb24:	18801126 	beq	r3,r2,fb6c <altera_avalon_jtag_uart_irq+0x10c>
    fb28:	02420e04 	movi	r9,2104
    fb2c:	01800044 	movi	r6,1
    fb30:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fb34:	20800d17 	ldw	r2,52(r4)
    fb38:	1105883a 	add	r2,r2,r4
    fb3c:	1245883a 	add	r2,r2,r9
    fb40:	10800007 	ldb	r2,0(r2)
    fb44:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fb48:	20800d17 	ldw	r2,52(r4)
    fb4c:	1185883a 	add	r2,r2,r6
    fb50:	11c4703a 	and	r2,r2,r7
    fb54:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fb58:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fb5c:	283fc426 	beq	r5,zero,fa70 <altera_avalon_jtag_uart_irq+0x10>
    fb60:	20c00d17 	ldw	r3,52(r4)
    fb64:	20800c17 	ldw	r2,48(r4)
    fb68:	18bff21e 	bne	r3,r2,fb34 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fb6c:	20c00817 	ldw	r3,32(r4)
    fb70:	00bfff44 	movi	r2,-3
    fb74:	1886703a 	and	r3,r3,r2
    fb78:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fb7c:	20800017 	ldw	r2,0(r4)
    fb80:	1385883a 	add	r2,r2,r14
    fb84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fb88:	60800037 	ldwio	r2,0(r12)
    fb8c:	003fb806 	br	fa70 <altera_avalon_jtag_uart_irq+0x10>
    fb90:	f800283a 	ret

0000fb94 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    fb94:	009a8044 	movi	r2,27137
    fb98:	28800326 	beq	r5,r2,fba8 <altera_avalon_jtag_uart_ioctl+0x14>
    fb9c:	009a8084 	movi	r2,27138
    fba0:	2880171e 	bne	r5,r2,fc00 <altera_avalon_jtag_uart_ioctl+0x6c>
    fba4:	00000d06 	br	fbdc <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fba8:	20c00117 	ldw	r3,4(r4)
    fbac:	00a00034 	movhi	r2,32768
    fbb0:	10bfffc4 	addi	r2,r2,-1
    fbb4:	18801226 	beq	r3,r2,fc00 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fbb8:	31800017 	ldw	r6,0(r6)
    fbbc:	30ffff84 	addi	r3,r6,-2
    fbc0:	10bfff44 	addi	r2,r2,-3
    fbc4:	10c0022e 	bgeu	r2,r3,fbd0 <altera_avalon_jtag_uart_ioctl+0x3c>
    fbc8:	01a00034 	movhi	r6,32768
    fbcc:	31bfff84 	addi	r6,r6,-2
    fbd0:	21800115 	stw	r6,4(r4)
    fbd4:	0005883a 	mov	r2,zero
    fbd8:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fbdc:	20c00117 	ldw	r3,4(r4)
    fbe0:	00a00034 	movhi	r2,32768
    fbe4:	10bfffc4 	addi	r2,r2,-1
    fbe8:	18800526 	beq	r3,r2,fc00 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fbec:	20800917 	ldw	r2,36(r4)
    fbf0:	10c5803a 	cmpltu	r2,r2,r3
    fbf4:	30800015 	stw	r2,0(r6)
    fbf8:	0005883a 	mov	r2,zero
    fbfc:	f800283a 	ret
    fc00:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    fc04:	f800283a 	ret

0000fc08 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fc08:	defff604 	addi	sp,sp,-40
    fc0c:	dfc00915 	stw	ra,36(sp)
    fc10:	df000815 	stw	fp,32(sp)
    fc14:	ddc00715 	stw	r23,28(sp)
    fc18:	dd800615 	stw	r22,24(sp)
    fc1c:	dd400515 	stw	r21,20(sp)
    fc20:	dd000415 	stw	r20,16(sp)
    fc24:	dcc00315 	stw	r19,12(sp)
    fc28:	dc800215 	stw	r18,8(sp)
    fc2c:	dc400115 	stw	r17,4(sp)
    fc30:	dc000015 	stw	r16,0(sp)
    fc34:	2025883a 	mov	r18,r4
    fc38:	282f883a 	mov	r23,r5
    fc3c:	3027883a 	mov	r19,r6
    fc40:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fc44:	0180220e 	bge	zero,r6,fcd0 <altera_avalon_jtag_uart_read+0xc8>
    fc48:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fc4c:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
    fc50:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    fc54:	b4400236 	bltu	r22,r17,fc60 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    fc58:	b461c83a 	sub	r16,r22,r17
    fc5c:	00000206 	br	fc68 <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fc60:	00820004 	movi	r2,2048
    fc64:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
    fc68:	80000d26 	beq	r16,zero,fca0 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    fc6c:	9829883a 	mov	r20,r19
    fc70:	9c001d36 	bltu	r19,r16,fce8 <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    fc74:	91400e04 	addi	r5,r18,56
    fc78:	a809883a 	mov	r4,r21
    fc7c:	2c4b883a 	add	r5,r5,r17
    fc80:	800d883a 	mov	r6,r16
    fc84:	00072c00 	call	72c0 <memcpy>
      ptr   += n;
    fc88:	ac2b883a 	add	r21,r21,r16
      space -= n;
    fc8c:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fc90:	8445883a 	add	r2,r16,r17
    fc94:	1081ffcc 	andi	r2,r2,2047
    fc98:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
    fc9c:	04ffeb16 	blt	zero,r19,fc4c <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
    fca0:	adc01c1e 	bne	r21,r23,fd14 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fca4:	e090000c 	andi	r2,fp,16384
    fca8:	10000d1e 	bne	r2,zero,fce0 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fcac:	90800a17 	ldw	r2,40(r18)
    fcb0:	b080031e 	bne	r22,r2,fcc0 <altera_avalon_jtag_uart_read+0xb8>
    fcb4:	90c00917 	ldw	r3,36(r18)
    fcb8:	90800117 	ldw	r2,4(r18)
    fcbc:	18bffb36 	bltu	r3,r2,fcac <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fcc0:	90800a17 	ldw	r2,40(r18)
    fcc4:	b0800426 	beq	r22,r2,fcd8 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fcc8:	04c0030e 	bge	zero,r19,fcd8 <altera_avalon_jtag_uart_read+0xd0>
    fccc:	003fde06 	br	fc48 <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    fcd0:	3890000c 	andi	r2,r7,16384
    fcd4:	1000021e 	bne	r2,zero,fce0 <altera_avalon_jtag_uart_read+0xd8>
    fcd8:	00bffec4 	movi	r2,-5
    fcdc:	00001806 	br	fd40 <altera_avalon_jtag_uart_read+0x138>
    fce0:	00bffd44 	movi	r2,-11
    fce4:	00001606 	br	fd40 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    fce8:	91400e04 	addi	r5,r18,56
    fcec:	a809883a 	mov	r4,r21
    fcf0:	894b883a 	add	r5,r17,r5
    fcf4:	980d883a 	mov	r6,r19
    fcf8:	00072c00 	call	72c0 <memcpy>
      ptr   += n;
    fcfc:	aceb883a 	add	r21,r21,r19
      space -= n;
    fd00:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fd04:	a445883a 	add	r2,r20,r17
    fd08:	1081ffcc 	andi	r2,r2,2047
    fd0c:	90800b15 	stw	r2,44(r18)
    fd10:	003fe306 	br	fca0 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd14:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd18:	00bfff84 	movi	r2,-2
    fd1c:	2084703a 	and	r2,r4,r2
    fd20:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fd24:	90800817 	ldw	r2,32(r18)
    fd28:	10800054 	ori	r2,r2,1
    fd2c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fd30:	90c00017 	ldw	r3,0(r18)
    fd34:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fd38:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    fd3c:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    fd40:	dfc00917 	ldw	ra,36(sp)
    fd44:	df000817 	ldw	fp,32(sp)
    fd48:	ddc00717 	ldw	r23,28(sp)
    fd4c:	dd800617 	ldw	r22,24(sp)
    fd50:	dd400517 	ldw	r21,20(sp)
    fd54:	dd000417 	ldw	r20,16(sp)
    fd58:	dcc00317 	ldw	r19,12(sp)
    fd5c:	dc800217 	ldw	r18,8(sp)
    fd60:	dc400117 	ldw	r17,4(sp)
    fd64:	dc000017 	ldw	r16,0(sp)
    fd68:	dec00a04 	addi	sp,sp,40
    fd6c:	f800283a 	ret

0000fd70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    fd70:	defff804 	addi	sp,sp,-32
    fd74:	dfc00715 	stw	ra,28(sp)
    fd78:	dd800615 	stw	r22,24(sp)
    fd7c:	dd400515 	stw	r21,20(sp)
    fd80:	dd000415 	stw	r20,16(sp)
    fd84:	dcc00315 	stw	r19,12(sp)
    fd88:	dc800215 	stw	r18,8(sp)
    fd8c:	dc400115 	stw	r17,4(sp)
    fd90:	dc000015 	stw	r16,0(sp)
    fd94:	2021883a 	mov	r16,r4
    fd98:	282d883a 	mov	r22,r5
    fd9c:	3011883a 	mov	r8,r6
    fda0:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fda4:	01800616 	blt	zero,r6,fdc0 <altera_avalon_jtag_uart_write+0x50>
    fda8:	2829883a 	mov	r20,r5
    fdac:	00002106 	br	fe34 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    fdb0:	a585c83a 	sub	r2,r20,r22
    fdb4:	00004306 	br	fec4 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
    fdb8:	00bffd44 	movi	r2,-11
    fdbc:	00004106 	br	fec4 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fdc0:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fdc4:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    fdc8:	81400d17 	ldw	r5,52(r16)

      if (in < out)
    fdcc:	9140032e 	bgeu	r18,r5,fddc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fdd0:	2c85c83a 	sub	r2,r5,r18
    fdd4:	11bfffc4 	addi	r6,r2,-1
    fdd8:	00000606 	br	fdf4 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
    fddc:	28000326 	beq	r5,zero,fdec <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fde0:	00820004 	movi	r2,2048
    fde4:	148dc83a 	sub	r6,r2,r18
    fde8:	00000206 	br	fdf4 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fdec:	0081ffc4 	movi	r2,2047
    fdf0:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
    fdf4:	30002626 	beq	r6,zero,fe90 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
    fdf8:	4027883a 	mov	r19,r8
    fdfc:	3023883a 	mov	r17,r6
    fe00:	4180012e 	bgeu	r8,r6,fe08 <altera_avalon_jtag_uart_write+0x98>
    fe04:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    fe08:	81020e04 	addi	r4,r16,2104
    fe0c:	2489883a 	add	r4,r4,r18
    fe10:	a00b883a 	mov	r5,r20
    fe14:	880d883a 	mov	r6,r17
    fe18:	00072c00 	call	72c0 <memcpy>
      ptr   += n;
    fe1c:	a469883a 	add	r20,r20,r17
      count -= n;
    fe20:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fe24:	9445883a 	add	r2,r18,r17
    fe28:	1081ffcc 	andi	r2,r2,2047
    fe2c:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fe30:	023fe416 	blt	zero,r8,fdc4 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe34:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe38:	00bfff84 	movi	r2,-2
    fe3c:	2084703a 	and	r2,r4,r2
    fe40:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fe44:	80800817 	ldw	r2,32(r16)
    fe48:	10800094 	ori	r2,r2,2
    fe4c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fe50:	80c00017 	ldw	r3,0(r16)
    fe54:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe58:	2001703a 	wrctl	status,r4
    fe5c:	00000706 	br	fe7c <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fe60:	80800d17 	ldw	r2,52(r16)
    fe64:	1140031e 	bne	r2,r5,fe74 <altera_avalon_jtag_uart_write+0x104>
    fe68:	80c00917 	ldw	r3,36(r16)
    fe6c:	80800117 	ldw	r2,4(r16)
    fe70:	18bffb36 	bltu	r3,r2,fe60 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    fe74:	80800d17 	ldw	r2,52(r16)
    fe78:	117fed1e 	bne	r2,r5,fe30 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fe7c:	b53fcc1e 	bne	r22,r20,fdb0 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    fe80:	a890000c 	andi	r2,r21,16384
    fe84:	103fcc1e 	bne	r2,zero,fdb8 <altera_avalon_jtag_uart_write+0x48>
    fe88:	00bffec4 	movi	r2,-5
    fe8c:	00000d06 	br	fec4 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe90:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe94:	00bfff84 	movi	r2,-2
    fe98:	2084703a 	and	r2,r4,r2
    fe9c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fea0:	80800817 	ldw	r2,32(r16)
    fea4:	10800094 	ori	r2,r2,2
    fea8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    feac:	80c00017 	ldw	r3,0(r16)
    feb0:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    feb4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    feb8:	a890000c 	andi	r2,r21,16384
    febc:	103fe826 	beq	r2,zero,fe60 <altera_avalon_jtag_uart_write+0xf0>
    fec0:	003fee06 	br	fe7c <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    fec4:	dfc00717 	ldw	ra,28(sp)
    fec8:	dd800617 	ldw	r22,24(sp)
    fecc:	dd400517 	ldw	r21,20(sp)
    fed0:	dd000417 	ldw	r20,16(sp)
    fed4:	dcc00317 	ldw	r19,12(sp)
    fed8:	dc800217 	ldw	r18,8(sp)
    fedc:	dc400117 	ldw	r17,4(sp)
    fee0:	dc000017 	ldw	r16,0(sp)
    fee4:	dec00804 	addi	sp,sp,32
    fee8:	f800283a 	ret

0000feec <alt_up_char_buffer_string>:
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    feec:	20800c17 	ldw	r2,48(r4)
    fef0:	30801c2e 	bgeu	r6,r2,ff64 <alt_up_char_buffer_string+0x78>
    fef4:	20800d17 	ldw	r2,52(r4)
    fef8:	38801a2e 	bgeu	r7,r2,ff64 <alt_up_char_buffer_string+0x78>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    fefc:	22001017 	ldw	r8,64(r4)

	while ( *ptr )
    ff00:	28c00003 	ldbu	r3,0(r5)
    ff04:	18803fcc 	andi	r2,r3,255
    ff08:	1080201c 	xori	r2,r2,128
    ff0c:	10bfe004 	addi	r2,r2,-128
    ff10:	10001626 	beq	r2,zero,ff6c <alt_up_char_buffer_string+0x80>
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    ff14:	3a04983a 	sll	r2,r7,r8
    ff18:	308f883a 	add	r7,r6,r2
    ff1c:	02000044 	movi	r8,1

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    ff20:	20800b17 	ldw	r2,44(r4)
    ff24:	3885883a 	add	r2,r7,r2
    ff28:	18c03fcc 	andi	r3,r3,255
    ff2c:	18c0201c 	xori	r3,r3,128
    ff30:	18ffe004 	addi	r3,r3,-128
    ff34:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
    ff38:	320d883a 	add	r6,r6,r8
    ff3c:	20800c17 	ldw	r2,48(r4)
    ff40:	3080082e 	bgeu	r6,r2,ff64 <alt_up_char_buffer_string+0x78>
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
    ff44:	2a0b883a 	add	r5,r5,r8
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    ff48:	28c00003 	ldbu	r3,0(r5)
    ff4c:	18803fcc 	andi	r2,r3,255
    ff50:	1080201c 	xori	r2,r2,128
    ff54:	10bfe004 	addi	r2,r2,-128
    ff58:	10000426 	beq	r2,zero,ff6c <alt_up_char_buffer_string+0x80>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
    ff5c:	3a0f883a 	add	r7,r7,r8
    ff60:	003fef06 	br	ff20 <alt_up_char_buffer_string+0x34>
    ff64:	00bfffc4 	movi	r2,-1
    ff68:	f800283a 	ret
    ff6c:	0005883a 	mov	r2,zero
	}
	return 0;
}
    ff70:	f800283a 	ret

0000ff74 <alt_up_char_buffer_draw>:

  return dev;
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    ff74:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ff78:	20800c17 	ldw	r2,48(r4)
    ff7c:	3080112e 	bgeu	r6,r2,ffc4 <alt_up_char_buffer_draw+0x50>
    ff80:	20800d17 	ldw	r2,52(r4)
    ff84:	38800f2e 	bgeu	r7,r2,ffc4 <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    ff88:	20c00f17 	ldw	r3,60(r4)
    ff8c:	30c6703a 	and	r3,r6,r3
    ff90:	20800e17 	ldw	r2,56(r4)
    ff94:	1886983a 	sll	r3,r3,r2
    ff98:	20801117 	ldw	r2,68(r4)
    ff9c:	3884703a 	and	r2,r7,r2
    ffa0:	21001017 	ldw	r4,64(r4)
    ffa4:	1104983a 	sll	r2,r2,r4
    ffa8:	1886b03a 	or	r3,r3,r2
    ffac:	40800b17 	ldw	r2,44(r8)
    ffb0:	1887883a 	add	r3,r3,r2
    ffb4:	28803fcc 	andi	r2,r5,255
    ffb8:	18800025 	stbio	r2,0(r3)
    ffbc:	0005883a 	mov	r2,zero
    ffc0:	f800283a 	ret

	return 0;
    ffc4:	00bfffc4 	movi	r2,-1
}
    ffc8:	f800283a 	ret

0000ffcc <alt_up_char_buffer_clear>:
	}
	return 0;
}

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    ffcc:	20c00a17 	ldw	r3,40(r4)
    ffd0:	00800044 	movi	r2,1
    ffd4:	188000a5 	stbio	r2,2(r3)
    ffd8:	20800a17 	ldw	r2,40(r4)
    ffdc:	10c00084 	addi	r3,r2,2
    ffe0:	01000044 	movi	r4,1
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    ffe4:	18800023 	ldbuio	r2,0(r3)
    ffe8:	1104703a 	and	r2,r2,r4
    ffec:	103ffd1e 	bne	r2,zero,ffe4 <alt_up_char_buffer_clear+0x18>
	return 0;
}
    fff0:	f800283a 	ret

0000fff4 <alt_up_char_buffer_open_dev>:
	}
	
	return;
}

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    fff4:	deffff04 	addi	sp,sp,-4
    fff8:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    fffc:	01400074 	movhi	r5,1
   10000:	294e8704 	addi	r5,r5,14876
   10004:	0010bbc0 	call	10bbc <alt_find_dev>

  return dev;
}
   10008:	dfc00017 	ldw	ra,0(sp)
   1000c:	dec00104 	addi	sp,sp,4
   10010:	f800283a 	ret

00010014 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
   10014:	defffe04 	addi	sp,sp,-8
   10018:	dfc00115 	stw	ra,4(sp)
   1001c:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
   10020:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
   10024:	80800007 	ldb	r2,0(r16)
   10028:	10000a26 	beq	r2,zero,10054 <alt_up_char_buffer_init+0x40>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
   1002c:	8009883a 	mov	r4,r16
   10030:	01400074 	movhi	r5,1
   10034:	2947b304 	addi	r5,r5,7884
   10038:	00090680 	call	9068 <strcmp>
   1003c:	1000021e 	bne	r2,zero,10048 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
   10040:	80000005 	stb	zero,0(r16)
   10044:	00000306 	br	10054 <alt_up_char_buffer_init+0x40>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
   10048:	84000044 	addi	r16,r16,1
   1004c:	80800007 	ldb	r2,0(r16)
   10050:	103ff61e 	bne	r2,zero,1002c <alt_up_char_buffer_init+0x18>
			break;
		}
	}
	
	return;
}
   10054:	dfc00117 	ldw	ra,4(sp)
   10058:	dc000017 	ldw	r16,0(sp)
   1005c:	dec00204 	addi	sp,sp,8
   10060:	f800283a 	ret

00010064 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
   10064:	da000017 	ldw	r8,0(sp)
   10068:	d8c00117 	ldw	r3,4(sp)
	if (mode == 0)
   1006c:	1800051e 	bne	r3,zero,10084 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
   10070:	29c5383a 	mul	r2,r5,r7
   10074:	3085883a 	add	r2,r6,r2
   10078:	1105883a 	add	r2,r2,r4
   1007c:	12000025 	stbio	r8,0(r2)
   10080:	f800283a 	ret
	else if (mode == 1)
   10084:	00800044 	movi	r2,1
   10088:	1880061e 	bne	r3,r2,100a4 <helper_plot_pixel+0x40>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
   1008c:	29c5383a 	mul	r2,r5,r7
   10090:	3085883a 	add	r2,r6,r2
   10094:	1085883a 	add	r2,r2,r2
   10098:	1105883a 	add	r2,r2,r4
   1009c:	1200002d 	sthio	r8,0(r2)
   100a0:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
   100a4:	29c5383a 	mul	r2,r5,r7
   100a8:	1185883a 	add	r2,r2,r6
   100ac:	1085883a 	add	r2,r2,r2
   100b0:	1085883a 	add	r2,r2,r2
   100b4:	1105883a 	add	r2,r2,r4
   100b8:	12000035 	stwio	r8,0(r2)
   100bc:	f800283a 	ret

000100c0 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
   100c0:	defff304 	addi	sp,sp,-52
   100c4:	dfc00c15 	stw	ra,48(sp)
   100c8:	df000b15 	stw	fp,44(sp)
   100cc:	ddc00a15 	stw	r23,40(sp)
   100d0:	dd800915 	stw	r22,36(sp)
   100d4:	dd400815 	stw	r21,32(sp)
   100d8:	dd000715 	stw	r20,28(sp)
   100dc:	dcc00615 	stw	r19,24(sp)
   100e0:	dc800515 	stw	r18,20(sp)
   100e4:	dc400415 	stw	r17,16(sp)
   100e8:	dc000315 	stw	r16,12(sp)
   100ec:	3011883a 	mov	r8,r6
   100f0:	da400d17 	ldw	r9,52(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
   100f4:	4987c83a 	sub	r3,r9,r6
   100f8:	1800010e 	bge	r3,zero,10100 <alt_up_pixel_buffer_dma_draw_line+0x40>
   100fc:	00c7c83a 	sub	r3,zero,r3
   10100:	3945c83a 	sub	r2,r7,r5
   10104:	1000010e 	bge	r2,zero,1010c <alt_up_pixel_buffer_dma_draw_line+0x4c>
   10108:	0085c83a 	sub	r2,zero,r2
   1010c:	10c4803a 	cmplt	r2,r2,r3
   10110:	1015883a 	mov	r10,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
   10114:	20c00e17 	ldw	r3,56(r4)
   10118:	00800044 	movi	r2,1
   1011c:	1880021e 	bne	r3,r2,10128 <alt_up_pixel_buffer_dma_draw_line+0x68>
   10120:	d8000215 	stw	zero,8(sp)
   10124:	00000306 	br	10134 <alt_up_pixel_buffer_dma_draw_line+0x74>
   10128:	18c00098 	cmpnei	r3,r3,2
   1012c:	18c00044 	addi	r3,r3,1
   10130:	d8c00215 	stw	r3,8(sp)
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
   10134:	20800d17 	ldw	r2,52(r4)
   10138:	1000061e 	bne	r2,zero,10154 <alt_up_pixel_buffer_dma_draw_line+0x94>
   1013c:	20801317 	ldw	r2,76(r4)
   10140:	d8c00217 	ldw	r3,8(sp)
   10144:	10c5c83a 	sub	r2,r2,r3
   10148:	00c00044 	movi	r3,1
   1014c:	18ae983a 	sll	r23,r3,r2
   10150:	00000106 	br	10158 <alt_up_pixel_buffer_dma_draw_line+0x98>
   10154:	25c00f17 	ldw	r23,60(r4)

	if (backbuffer == 1)
   10158:	d8c00f17 	ldw	r3,60(sp)
   1015c:	00800044 	movi	r2,1
   10160:	1880021e 	bne	r3,r2,1016c <alt_up_pixel_buffer_dma_draw_line+0xac>
		buffer_start = pixel_buffer->back_buffer_start_address;
   10164:	25800c17 	ldw	r22,48(r4)
   10168:	00000106 	br	10170 <alt_up_pixel_buffer_dma_draw_line+0xb0>
	else
		buffer_start = pixel_buffer->buffer_start_address;
   1016c:	25800b17 	ldw	r22,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
   10170:	50000326 	beq	r10,zero,10180 <alt_up_pixel_buffer_dma_draw_line+0xc0>
   10174:	400d883a 	mov	r6,r8
   10178:	4827883a 	mov	r19,r9
   1017c:	00000406 	br	10190 <alt_up_pixel_buffer_dma_draw_line+0xd0>
   10180:	280d883a 	mov	r6,r5
   10184:	400b883a 	mov	r5,r8
   10188:	3827883a 	mov	r19,r7
   1018c:	480f883a 	mov	r7,r9
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
   10190:	9980060e 	bge	r19,r6,101ac <alt_up_pixel_buffer_dma_draw_line+0xec>
   10194:	9805883a 	mov	r2,r19
   10198:	3027883a 	mov	r19,r6
   1019c:	100d883a 	mov	r6,r2
   101a0:	3805883a 	mov	r2,r7
   101a4:	280f883a 	mov	r7,r5
   101a8:	100b883a 	mov	r5,r2
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
   101ac:	99abc83a 	sub	r21,r19,r6
	deltay = ABS(y_1 - y_0);
   101b0:	3969c83a 	sub	r20,r7,r5
   101b4:	a000010e 	bge	r20,zero,101bc <alt_up_pixel_buffer_dma_draw_line+0xfc>
   101b8:	0529c83a 	sub	r20,zero,r20
	error = -(deltax / 2); 
   101bc:	a804d7fa 	srli	r2,r21,31
   101c0:	1545883a 	add	r2,r2,r21
   101c4:	1005d07a 	srai	r2,r2,1
   101c8:	00a3c83a 	sub	r17,zero,r2
	y = y_0;
	if (y_0 < y_1)
   101cc:	29c0020e 	bge	r5,r7,101d8 <alt_up_pixel_buffer_dma_draw_line+0x118>
   101d0:	07000044 	movi	fp,1
   101d4:	00000106 	br	101dc <alt_up_pixel_buffer_dma_draw_line+0x11c>
   101d8:	073fffc4 	movi	fp,-1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
   101dc:	50000226 	beq	r10,zero,101e8 <alt_up_pixel_buffer_dma_draw_line+0x128>
	{
		for (x=x_0; x <= x_1; x++) {
   101e0:	9980030e 	bge	r19,r6,101f0 <alt_up_pixel_buffer_dma_draw_line+0x130>
   101e4:	00002506 	br	1027c <alt_up_pixel_buffer_dma_draw_line+0x1bc>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   101e8:	9980130e 	bge	r19,r6,10238 <alt_up_pixel_buffer_dma_draw_line+0x178>
   101ec:	00002306 	br	1027c <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   101f0:	3021883a 	mov	r16,r6
   101f4:	2825883a 	mov	r18,r5
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
   101f8:	d8800e17 	ldw	r2,56(sp)
   101fc:	d8800015 	stw	r2,0(sp)
   10200:	d8c00217 	ldw	r3,8(sp)
   10204:	d8c00115 	stw	r3,4(sp)
   10208:	b009883a 	mov	r4,r22
   1020c:	b80b883a 	mov	r5,r23
   10210:	900d883a 	mov	r6,r18
   10214:	800f883a 	mov	r7,r16
   10218:	00100640 	call	10064 <helper_plot_pixel>
			error = error + deltay;
   1021c:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   10220:	0440020e 	bge	zero,r17,1022c <alt_up_pixel_buffer_dma_draw_line+0x16c>
				y = y + ystep;
   10224:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   10228:	8d63c83a 	sub	r17,r17,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
   1022c:	84000044 	addi	r16,r16,1
   10230:	9c001216 	blt	r19,r16,1027c <alt_up_pixel_buffer_dma_draw_line+0x1bc>
   10234:	003ff006 	br	101f8 <alt_up_pixel_buffer_dma_draw_line+0x138>
   10238:	3021883a 	mov	r16,r6
   1023c:	2825883a 	mov	r18,r5
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
   10240:	d8800e17 	ldw	r2,56(sp)
   10244:	d8800015 	stw	r2,0(sp)
   10248:	d8c00217 	ldw	r3,8(sp)
   1024c:	d8c00115 	stw	r3,4(sp)
   10250:	b009883a 	mov	r4,r22
   10254:	b80b883a 	mov	r5,r23
   10258:	800d883a 	mov	r6,r16
   1025c:	900f883a 	mov	r7,r18
   10260:	00100640 	call	10064 <helper_plot_pixel>
			error = error + deltay;
   10264:	8d23883a 	add	r17,r17,r20
			if (error > 0) {
   10268:	0440020e 	bge	zero,r17,10274 <alt_up_pixel_buffer_dma_draw_line+0x1b4>
				y = y + ystep;
   1026c:	9725883a 	add	r18,r18,fp
				error = error - deltax;
   10270:	8d63c83a 	sub	r17,r17,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
   10274:	84000044 	addi	r16,r16,1
   10278:	9c3ff10e 	bge	r19,r16,10240 <alt_up_pixel_buffer_dma_draw_line+0x180>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
   1027c:	dfc00c17 	ldw	ra,48(sp)
   10280:	df000b17 	ldw	fp,44(sp)
   10284:	ddc00a17 	ldw	r23,40(sp)
   10288:	dd800917 	ldw	r22,36(sp)
   1028c:	dd400817 	ldw	r21,32(sp)
   10290:	dd000717 	ldw	r20,28(sp)
   10294:	dcc00617 	ldw	r19,24(sp)
   10298:	dc800517 	ldw	r18,20(sp)
   1029c:	dc400417 	ldw	r17,16(sp)
   102a0:	dc000317 	ldw	r16,12(sp)
   102a4:	dec00d04 	addi	sp,sp,52
   102a8:	f800283a 	ret

000102ac <alt_up_pixel_buffer_dma_draw_vline>:
void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   102ac:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   102b0:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   102b4:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
   102b8:	3980022e 	bgeu	r7,r6,102c4 <alt_up_pixel_buffer_dma_draw_vline+0x18>
   102bc:	3011883a 	mov	r8,r6
   102c0:	380d883a 	mov	r6,r7
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
   102c4:	2a405d2e 	bgeu	r5,r9,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   102c8:	30805c2e 	bgeu	r6,r2,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   102cc:	40800136 	bltu	r8,r2,102d4 <alt_up_pixel_buffer_dma_draw_vline+0x28>
	{
		b_y = limit_y - 1;
   102d0:	123fffc4 	addi	r8,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   102d4:	d8c00117 	ldw	r3,4(sp)
   102d8:	00800044 	movi	r2,1
   102dc:	1880021e 	bne	r3,r2,102e8 <alt_up_pixel_buffer_dma_draw_vline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   102e0:	20c00c17 	ldw	r3,48(r4)
   102e4:	00000106 	br	102ec <alt_up_pixel_buffer_dma_draw_vline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   102e8:	20c00b17 	ldw	r3,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   102ec:	d9c00017 	ldw	r7,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   102f0:	20800d17 	ldw	r2,52(r4)
   102f4:	1000281e 	bne	r2,zero,10398 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   102f8:	22801317 	ldw	r10,76(r4)
   102fc:	3284983a 	sll	r2,r6,r10
   10300:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10304:	21000e17 	ldw	r4,56(r4)
   10308:	00800044 	movi	r2,1
   1030c:	2080091e 	bne	r4,r2,10334 <alt_up_pixel_buffer_dma_draw_vline+0x88>
			for (y = t_y; y <= b_y; y++)
   10310:	41804a36 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10314:	1013883a 	mov	r9,r2
   10318:	1288983a 	sll	r4,r2,r10
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   1031c:	1945883a 	add	r2,r3,r5
   10320:	11c00025 	stbio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10324:	1907883a 	add	r3,r3,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10328:	324d883a 	add	r6,r6,r9
   1032c:	41804336 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10330:	003ffa06 	br	1031c <alt_up_pixel_buffer_dma_draw_vline+0x70>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10334:	00800084 	movi	r2,2
   10338:	2080021e 	bne	r4,r2,10344 <alt_up_pixel_buffer_dma_draw_vline+0x98>
			for (y = t_y; y <= b_y; y++)
   1033c:	4180032e 	bgeu	r8,r6,1034c <alt_up_pixel_buffer_dma_draw_vline+0xa0>
   10340:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10344:	41800a2e 	bgeu	r8,r6,10370 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
   10348:	f800283a 	ret
   1034c:	294b883a 	add	r5,r5,r5
   10350:	02400044 	movi	r9,1
   10354:	4a88983a 	sll	r4,r9,r10
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   10358:	28c5883a 	add	r2,r5,r3
   1035c:	11c0002d 	sthio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10360:	1907883a 	add	r3,r3,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10364:	324d883a 	add	r6,r6,r9
   10368:	41803436 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   1036c:	003ffa06 	br	10358 <alt_up_pixel_buffer_dma_draw_vline+0xac>
   10370:	2945883a 	add	r2,r5,r5
   10374:	108b883a 	add	r5,r2,r2
   10378:	02400044 	movi	r9,1
   1037c:	4a88983a 	sll	r4,r9,r10
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10380:	28c5883a 	add	r2,r5,r3
   10384:	11c00035 	stwio	r7,0(r2)
				addr = addr + (1 << offset_y);
   10388:	1907883a 	add	r3,r3,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   1038c:	324d883a 	add	r6,r6,r9
   10390:	41802a36 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10394:	003ffa06 	br	10380 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10398:	21000e17 	ldw	r4,56(r4)
   1039c:	00800044 	movi	r2,1
   103a0:	20800b1e 	bne	r4,r2,103d0 <alt_up_pixel_buffer_dma_draw_vline+0x124>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   103a4:	41802536 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   103a8:	4809883a 	mov	r4,r9
   103ac:	3245383a 	mul	r2,r6,r9
   103b0:	1885883a 	add	r2,r3,r2
   103b4:	1145883a 	add	r2,r2,r5
   103b8:	00c00044 	movi	r3,1
			{
				IOWR_8DIRECT(addr, line_x, local_color);
   103bc:	11c00025 	stbio	r7,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   103c0:	30cd883a 	add	r6,r6,r3
   103c4:	1105883a 	add	r2,r2,r4
   103c8:	41801c36 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   103cc:	003ffb06 	br	103bc <alt_up_pixel_buffer_dma_draw_vline+0x110>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   103d0:	00800084 	movi	r2,2
   103d4:	20800c1e 	bne	r4,r2,10408 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   103d8:	41801836 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   103dc:	4a49883a 	add	r4,r9,r9
			addr = addr + t_y * limit_x;
   103e0:	3105383a 	mul	r2,r6,r4
   103e4:	1887883a 	add	r3,r3,r2
   103e8:	294b883a 	add	r5,r5,r5
   103ec:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
   103f0:	28c5883a 	add	r2,r5,r3
   103f4:	11c0002d 	sthio	r7,0(r2)
				addr = addr + limit_x;
   103f8:	1907883a 	add	r3,r3,r4
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   103fc:	324d883a 	add	r6,r6,r9
   10400:	41800e36 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
   10404:	003ffa06 	br	103f0 <alt_up_pixel_buffer_dma_draw_vline+0x144>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10408:	41800c36 	bltu	r8,r6,1043c <alt_up_pixel_buffer_dma_draw_vline+0x190>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   1040c:	4a45883a 	add	r2,r9,r9
   10410:	1089883a 	add	r4,r2,r2
			addr = addr + t_y * limit_x;
   10414:	3105383a 	mul	r2,r6,r4
   10418:	1887883a 	add	r3,r3,r2
   1041c:	2945883a 	add	r2,r5,r5
   10420:	108b883a 	add	r5,r2,r2
   10424:	02400044 	movi	r9,1
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
   10428:	28c5883a 	add	r2,r5,r3
   1042c:	11c00035 	stwio	r7,0(r2)
				addr = addr + limit_x;
   10430:	1907883a 	add	r3,r3,r4
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10434:	324d883a 	add	r6,r6,r9
   10438:	41bffb2e 	bgeu	r8,r6,10428 <alt_up_pixel_buffer_dma_draw_vline+0x17c>
   1043c:	f800283a 	ret

00010440 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10440:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10444:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   10448:	3013883a 	mov	r9,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   1044c:	3140022e 	bgeu	r6,r5,10458 <alt_up_pixel_buffer_dma_draw_hline+0x18>
   10450:	2813883a 	mov	r9,r5
   10454:	300b883a 	mov	r5,r6
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
   10458:	2a00552e 	bgeu	r5,r8,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   1045c:	3880542e 	bgeu	r7,r2,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   10460:	4a000136 	bltu	r9,r8,10468 <alt_up_pixel_buffer_dma_draw_hline+0x28>
	{
		r_x = limit_x - 1;
   10464:	427fffc4 	addi	r9,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   10468:	d8c00117 	ldw	r3,4(sp)
   1046c:	00800044 	movi	r2,1
   10470:	1880021e 	bne	r3,r2,1047c <alt_up_pixel_buffer_dma_draw_hline+0x3c>
		addr = pixel_buffer->back_buffer_start_address;
   10474:	21800c17 	ldw	r6,48(r4)
   10478:	00000106 	br	10480 <alt_up_pixel_buffer_dma_draw_hline+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
   1047c:	21800b17 	ldw	r6,44(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
   10480:	d8c00017 	ldw	r3,0(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10484:	20800d17 	ldw	r2,52(r4)
   10488:	1000231e 	bne	r2,zero,10518 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
   1048c:	20801317 	ldw	r2,76(r4)
   10490:	3884983a 	sll	r2,r7,r2
   10494:	308f883a 	add	r7,r6,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10498:	21000e17 	ldw	r4,56(r4)
   1049c:	00800044 	movi	r2,1
   104a0:	2080081e 	bne	r4,r2,104c4 <alt_up_pixel_buffer_dma_draw_hline+0x84>
			for (x = l_x; x <= r_x; x++)
   104a4:	49404236 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   104a8:	3945883a 	add	r2,r7,r5
   104ac:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   104b0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   104b4:	290b883a 	add	r5,r5,r4
   104b8:	1105883a 	add	r2,r2,r4
   104bc:	49403c36 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   104c0:	003ffb06 	br	104b0 <alt_up_pixel_buffer_dma_draw_hline+0x70>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   104c4:	00800084 	movi	r2,2
   104c8:	2080021e 	bne	r4,r2,104d4 <alt_up_pixel_buffer_dma_draw_hline+0x94>
			for (x = l_x; x <= r_x; x++)
   104cc:	4940032e 	bgeu	r9,r5,104dc <alt_up_pixel_buffer_dma_draw_hline+0x9c>
   104d0:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   104d4:	4940082e 	bgeu	r9,r5,104f8 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
   104d8:	f800283a 	ret
   104dc:	01000044 	movi	r4,1
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   104e0:	2945883a 	add	r2,r5,r5
   104e4:	11c5883a 	add	r2,r2,r7
   104e8:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
   104ec:	290b883a 	add	r5,r5,r4
   104f0:	49402f36 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   104f4:	003ffa06 	br	104e0 <alt_up_pixel_buffer_dma_draw_hline+0xa0>
   104f8:	01000044 	movi	r4,1
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   104fc:	2945883a 	add	r2,r5,r5
   10500:	1085883a 	add	r2,r2,r2
   10504:	11c5883a 	add	r2,r2,r7
   10508:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
   1050c:	290b883a 	add	r5,r5,r4
   10510:	49402736 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10514:	003ff906 	br	104fc <alt_up_pixel_buffer_dma_draw_hline+0xbc>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10518:	21000e17 	ldw	r4,56(r4)
   1051c:	00800044 	movi	r2,1
   10520:	20800a1e 	bne	r4,r2,1054c <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			addr = addr + line_y * limit_x;
   10524:	41c5383a 	mul	r2,r8,r7
   10528:	3085883a 	add	r2,r6,r2
			for (x = l_x; x <= r_x; x++)
   1052c:	49402036 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10530:	1145883a 	add	r2,r2,r5
   10534:	01000044 	movi	r4,1
			{
				IOWR_8DIRECT(addr, x, local_color);
   10538:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   1053c:	290b883a 	add	r5,r5,r4
   10540:	1105883a 	add	r2,r2,r4
   10544:	49401a36 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10548:	003ffb06 	br	10538 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   1054c:	00800084 	movi	r2,2
   10550:	20800b1e 	bne	r4,r2,10580 <alt_up_pixel_buffer_dma_draw_hline+0x140>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
   10554:	4205883a 	add	r2,r8,r8
   10558:	3885383a 	mul	r2,r7,r2
   1055c:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10560:	49401336 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10564:	01000044 	movi	r4,1
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
   10568:	2945883a 	add	r2,r5,r5
   1056c:	11c5883a 	add	r2,r2,r7
   10570:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   10574:	290b883a 	add	r5,r5,r4
   10578:	49400d36 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   1057c:	003ffa06 	br	10568 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
   10580:	4205883a 	add	r2,r8,r8
   10584:	1085883a 	add	r2,r2,r2
   10588:	3885383a 	mul	r2,r7,r2
   1058c:	308f883a 	add	r7,r6,r2
			for (x = l_x; x <= r_x; x++)
   10590:	49400736 	bltu	r9,r5,105b0 <alt_up_pixel_buffer_dma_draw_hline+0x170>
   10594:	01000044 	movi	r4,1
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
   10598:	2945883a 	add	r2,r5,r5
   1059c:	1085883a 	add	r2,r2,r2
   105a0:	11c5883a 	add	r2,r2,r7
   105a4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
   105a8:	290b883a 	add	r5,r5,r4
   105ac:	497ffa2e 	bgeu	r9,r5,10598 <alt_up_pixel_buffer_dma_draw_hline+0x158>
   105b0:	f800283a 	ret

000105b4 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
   105b4:	defff604 	addi	sp,sp,-40
   105b8:	dfc00915 	stw	ra,36(sp)
   105bc:	dd800815 	stw	r22,32(sp)
   105c0:	dd400715 	stw	r21,28(sp)
   105c4:	dd000615 	stw	r20,24(sp)
   105c8:	dcc00515 	stw	r19,20(sp)
   105cc:	dc800415 	stw	r18,16(sp)
   105d0:	dc400315 	stw	r17,12(sp)
   105d4:	dc000215 	stw	r16,8(sp)
   105d8:	2029883a 	mov	r20,r4
   105dc:	282d883a 	mov	r22,r5
   105e0:	302b883a 	mov	r21,r6
   105e4:	3825883a 	mov	r18,r7
   105e8:	dcc00a17 	ldw	r19,40(sp)
   105ec:	dc000b17 	ldw	r16,44(sp)
   105f0:	dc400c17 	ldw	r17,48(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
   105f4:	dc000015 	stw	r16,0(sp)
   105f8:	dc400115 	stw	r17,4(sp)
   105fc:	380d883a 	mov	r6,r7
   10600:	a80f883a 	mov	r7,r21
   10604:	00104400 	call	10440 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
   10608:	dc000015 	stw	r16,0(sp)
   1060c:	dc400115 	stw	r17,4(sp)
   10610:	a009883a 	mov	r4,r20
   10614:	b00b883a 	mov	r5,r22
   10618:	900d883a 	mov	r6,r18
   1061c:	980f883a 	mov	r7,r19
   10620:	00104400 	call	10440 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
   10624:	dc000015 	stw	r16,0(sp)
   10628:	dc400115 	stw	r17,4(sp)
   1062c:	a009883a 	mov	r4,r20
   10630:	b00b883a 	mov	r5,r22
   10634:	a80d883a 	mov	r6,r21
   10638:	980f883a 	mov	r7,r19
   1063c:	00102ac0 	call	102ac <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
   10640:	dc000015 	stw	r16,0(sp)
   10644:	dc400115 	stw	r17,4(sp)
   10648:	a009883a 	mov	r4,r20
   1064c:	900b883a 	mov	r5,r18
   10650:	a80d883a 	mov	r6,r21
   10654:	980f883a 	mov	r7,r19
   10658:	00102ac0 	call	102ac <alt_up_pixel_buffer_dma_draw_vline>
}
   1065c:	dfc00917 	ldw	ra,36(sp)
   10660:	dd800817 	ldw	r22,32(sp)
   10664:	dd400717 	ldw	r21,28(sp)
   10668:	dd000617 	ldw	r20,24(sp)
   1066c:	dcc00517 	ldw	r19,20(sp)
   10670:	dc800417 	ldw	r18,16(sp)
   10674:	dc400317 	ldw	r17,12(sp)
   10678:	dc000217 	ldw	r16,8(sp)
   1067c:	dec00a04 	addi	sp,sp,40
   10680:	f800283a 	ret

00010684 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
   10684:	22800f17 	ldw	r10,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
   10688:	20c01017 	ldw	r3,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
   1068c:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
   10690:	dac00017 	ldw	r11,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
   10694:	3940022e 	bgeu	r7,r5,106a0 <alt_up_pixel_buffer_dma_draw_box+0x1c>
   10698:	2811883a 	mov	r8,r5
   1069c:	380b883a 	mov	r5,r7
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
   106a0:	5980032e 	bgeu	r11,r6,106b0 <alt_up_pixel_buffer_dma_draw_box+0x2c>
   106a4:	5805883a 	mov	r2,r11
   106a8:	3017883a 	mov	r11,r6
   106ac:	100d883a 	mov	r6,r2
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
   106b0:	2a80842e 	bgeu	r5,r10,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   106b4:	30c0832e 	bgeu	r6,r3,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
   106b8:	42800136 	bltu	r8,r10,106c0 <alt_up_pixel_buffer_dma_draw_box+0x3c>
	{
		r_x = limit_x - 1;
   106bc:	523fffc4 	addi	r8,r10,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
   106c0:	58c00136 	bltu	r11,r3,106c8 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		b_y = limit_y - 1;
   106c4:	1affffc4 	addi	r11,r3,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   106c8:	d8c00217 	ldw	r3,8(sp)
   106cc:	00800044 	movi	r2,1
   106d0:	1880021e 	bne	r3,r2,106dc <alt_up_pixel_buffer_dma_draw_box+0x58>
		addr = pixel_buffer->back_buffer_start_address;
   106d4:	20c00c17 	ldw	r3,48(r4)
   106d8:	00000106 	br	106e0 <alt_up_pixel_buffer_dma_draw_box+0x5c>
	else
		addr = pixel_buffer->buffer_start_address;
   106dc:	20c00b17 	ldw	r3,44(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
   106e0:	da400117 	ldw	r9,4(sp)
		addr = pixel_buffer->back_buffer_start_address;
	else
		addr = pixel_buffer->buffer_start_address;

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   106e4:	20800d17 	ldw	r2,52(r4)
   106e8:	1000391e 	bne	r2,zero,107d0 <alt_up_pixel_buffer_dma_draw_box+0x14c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
   106ec:	22801317 	ldw	r10,76(r4)
   106f0:	3284983a 	sll	r2,r6,r10
   106f4:	188f883a 	add	r7,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   106f8:	21000e17 	ldw	r4,56(r4)
   106fc:	00800044 	movi	r2,1
   10700:	2080101e 	bne	r4,r2,10744 <alt_up_pixel_buffer_dma_draw_box+0xc0>
			for (y = t_y; y <= b_y; y++)
   10704:	59806f36 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10708:	00000a06 	br	10734 <alt_up_pixel_buffer_dma_draw_box+0xb0>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   1070c:	22400025 	stbio	r9,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10710:	00800044 	movi	r2,1
   10714:	1887883a 	add	r3,r3,r2
   10718:	2089883a 	add	r4,r4,r2
   1071c:	40fffb2e 	bgeu	r8,r3,1070c <alt_up_pixel_buffer_dma_draw_box+0x88>
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10720:	00800044 	movi	r2,1
   10724:	308d883a 	add	r6,r6,r2
   10728:	59806636 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
   1072c:	1284983a 	sll	r2,r2,r10
   10730:	388f883a 	add	r7,r7,r2
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10734:	417ffa36 	bltu	r8,r5,10720 <alt_up_pixel_buffer_dma_draw_box+0x9c>
   10738:	29c9883a 	add	r4,r5,r7
   1073c:	2807883a 	mov	r3,r5
   10740:	003ff206 	br	1070c <alt_up_pixel_buffer_dma_draw_box+0x88>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10744:	00800084 	movi	r2,2
   10748:	2080021e 	bne	r4,r2,10754 <alt_up_pixel_buffer_dma_draw_box+0xd0>
			for (y = t_y; y <= b_y; y++)
   1074c:	59805d36 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10750:	00000e06 	br	1078c <alt_up_pixel_buffer_dma_draw_box+0x108>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   10754:	59805b36 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   10758:	00001b06 	br	107c8 <alt_up_pixel_buffer_dma_draw_box+0x144>
   1075c:	2807883a 	mov	r3,r5
   10760:	01000044 	movi	r4,1
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   10764:	18c5883a 	add	r2,r3,r3
   10768:	11c5883a 	add	r2,r2,r7
   1076c:	1240002d 	sthio	r9,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10770:	1907883a 	add	r3,r3,r4
   10774:	40fffb2e 	bgeu	r8,r3,10764 <alt_up_pixel_buffer_dma_draw_box+0xe0>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
   10778:	00800044 	movi	r2,1
   1077c:	308d883a 	add	r6,r6,r2
   10780:	59805036 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
   10784:	1284983a 	sll	r2,r2,r10
   10788:	388f883a 	add	r7,r7,r2
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1078c:	417ff32e 	bgeu	r8,r5,1075c <alt_up_pixel_buffer_dma_draw_box+0xd8>
   10790:	003ff906 	br	10778 <alt_up_pixel_buffer_dma_draw_box+0xf4>
   10794:	2807883a 	mov	r3,r5
   10798:	01000044 	movi	r4,1
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   1079c:	18c5883a 	add	r2,r3,r3
   107a0:	1085883a 	add	r2,r2,r2
   107a4:	11c5883a 	add	r2,r2,r7
   107a8:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   107ac:	1907883a 	add	r3,r3,r4
   107b0:	40fffa2e 	bgeu	r8,r3,1079c <alt_up_pixel_buffer_dma_draw_box+0x118>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
   107b4:	00800044 	movi	r2,1
   107b8:	308d883a 	add	r6,r6,r2
   107bc:	59804136 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
   107c0:	1284983a 	sll	r2,r2,r10
   107c4:	388f883a 	add	r7,r7,r2
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   107c8:	417ff22e 	bgeu	r8,r5,10794 <alt_up_pixel_buffer_dma_draw_box+0x110>
   107cc:	003ff906 	br	107b4 <alt_up_pixel_buffer_dma_draw_box+0x130>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   107d0:	21000e17 	ldw	r4,56(r4)
   107d4:	00800044 	movi	r2,1
   107d8:	2080121e 	bne	r4,r2,10824 <alt_up_pixel_buffer_dma_draw_box+0x1a0>
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   107dc:	59803936 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
   107e0:	5019883a 	mov	r12,r10
   107e4:	3285383a 	mul	r2,r6,r10
   107e8:	1885883a 	add	r2,r3,r2
   107ec:	114f883a 	add	r7,r2,r5
   107f0:	00000806 	br	10814 <alt_up_pixel_buffer_dma_draw_box+0x190>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
   107f4:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   107f8:	00800044 	movi	r2,1
   107fc:	1887883a 	add	r3,r3,r2
   10800:	2089883a 	add	r4,r4,r2
   10804:	40fffb2e 	bgeu	r8,r3,107f4 <alt_up_pixel_buffer_dma_draw_box+0x170>
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10808:	31800044 	addi	r6,r6,1
   1080c:	3b0f883a 	add	r7,r7,r12
   10810:	59802c36 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
   10814:	417ffc36 	bltu	r8,r5,10808 <alt_up_pixel_buffer_dma_draw_box+0x184>
   10818:	3809883a 	mov	r4,r7
   1081c:	2807883a 	mov	r3,r5
   10820:	003ff406 	br	107f4 <alt_up_pixel_buffer_dma_draw_box+0x170>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10824:	00800084 	movi	r2,2
   10828:	2080121e 	bne	r4,r2,10874 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   1082c:	59802536 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
   10830:	5295883a 	add	r10,r10,r10
			addr = addr + t_y * limit_x;
   10834:	3285383a 	mul	r2,r6,r10
   10838:	1889883a 	add	r4,r3,r2
   1083c:	03000044 	movi	r12,1
   10840:	00000a06 	br	1086c <alt_up_pixel_buffer_dma_draw_box+0x1e8>
   10844:	2807883a 	mov	r3,r5
   10848:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
   1084c:	18c5883a 	add	r2,r3,r3
   10850:	1105883a 	add	r2,r2,r4
   10854:	1240002d 	sthio	r9,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   10858:	19c7883a 	add	r3,r3,r7
   1085c:	40fffb2e 	bgeu	r8,r3,1084c <alt_up_pixel_buffer_dma_draw_box+0x1c8>
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10860:	330d883a 	add	r6,r6,r12
   10864:	59801736 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
   10868:	2289883a 	add	r4,r4,r10
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   1086c:	417ff52e 	bgeu	r8,r5,10844 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
   10870:	003ffb06 	br	10860 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   10874:	59801336 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
   10878:	5285883a 	add	r2,r10,r10
   1087c:	1095883a 	add	r10,r2,r2
			addr = addr + t_y * limit_x;
   10880:	3285383a 	mul	r2,r6,r10
   10884:	1889883a 	add	r4,r3,r2
   10888:	03000044 	movi	r12,1
   1088c:	00000b06 	br	108bc <alt_up_pixel_buffer_dma_draw_box+0x238>
   10890:	2807883a 	mov	r3,r5
   10894:	01c00044 	movi	r7,1
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
   10898:	18c5883a 	add	r2,r3,r3
   1089c:	1085883a 	add	r2,r2,r2
   108a0:	1105883a 	add	r2,r2,r4
   108a4:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   108a8:	19c7883a 	add	r3,r3,r7
   108ac:	40fffa2e 	bgeu	r8,r3,10898 <alt_up_pixel_buffer_dma_draw_box+0x214>
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
   108b0:	330d883a 	add	r6,r6,r12
   108b4:	59800336 	bltu	r11,r6,108c4 <alt_up_pixel_buffer_dma_draw_box+0x240>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
   108b8:	2289883a 	add	r4,r4,r10
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
   108bc:	417ff42e 	bgeu	r8,r5,10890 <alt_up_pixel_buffer_dma_draw_box+0x20c>
   108c0:	003ffb06 	br	108b0 <alt_up_pixel_buffer_dma_draw_box+0x22c>
   108c4:	f800283a 	ret

000108c8 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
   108c8:	00800044 	movi	r2,1
   108cc:	2880021e 	bne	r5,r2,108d8 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
   108d0:	21c00c17 	ldw	r7,48(r4)
   108d4:	00000106 	br	108dc <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
   108d8:	21c00b17 	ldw	r7,44(r4)
	limit_x = pixel_buffer->x_resolution;
   108dc:	21400f17 	ldw	r5,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   108e0:	20c00e17 	ldw	r3,56(r4)
   108e4:	00800084 	movi	r2,2
   108e8:	1880021e 	bne	r3,r2,108f4 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
   108ec:	294d883a 	add	r6,r5,r5
   108f0:	00000206 	br	108fc <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
   108f4:	2945883a 	add	r2,r5,r5
   108f8:	108d883a 	add	r6,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;
   108fc:	22401017 	ldw	r9,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   10900:	20800d17 	ldw	r2,52(r4)
   10904:	1000121e 	bne	r2,zero,10950 <alt_up_pixel_buffer_dma_clear_screen+0x88>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
   10908:	21001317 	ldw	r4,76(r4)

		for (y = 0; y < limit_y; y++)
   1090c:	48001a26 	beq	r9,zero,10978 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   10910:	0011883a 	mov	r8,zero
   10914:	3014c03a 	cmpne	r10,r6,zero
   10918:	00000b06 	br	10948 <alt_up_pixel_buffer_dma_clear_screen+0x80>
   1091c:	0007883a 	mov	r3,zero
   10920:	01400104 	movi	r5,4
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
   10924:	19c5883a 	add	r2,r3,r7
   10928:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   1092c:	1947883a 	add	r3,r3,r5
   10930:	19bffc36 	bltu	r3,r6,10924 <alt_up_pixel_buffer_dma_clear_screen+0x5c>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
   10934:	00800044 	movi	r2,1
   10938:	4091883a 	add	r8,r8,r2
   1093c:	4a000e26 	beq	r9,r8,10978 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
   10940:	1104983a 	sll	r2,r2,r4
   10944:	388f883a 	add	r7,r7,r2
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
   10948:	503ff41e 	bne	r10,zero,1091c <alt_up_pixel_buffer_dma_clear_screen+0x54>
   1094c:	003ff906 	br	10934 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
   10950:	3249383a 	mul	r4,r6,r9

		for (x = 0; x < limit_y; x = x + 4)
   10954:	20000826 	beq	r4,zero,10978 <alt_up_pixel_buffer_dma_clear_screen+0xb0>
   10958:	0007883a 	mov	r3,zero
   1095c:	0005883a 	mov	r2,zero
   10960:	01400104 	movi	r5,4
		{
			IOWR_32DIRECT(addr, x, 0);
   10964:	3885883a 	add	r2,r7,r2
   10968:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
   1096c:	1945883a 	add	r2,r3,r5
   10970:	1007883a 	mov	r3,r2
   10974:	113ffb36 	bltu	r2,r4,10964 <alt_up_pixel_buffer_dma_clear_screen+0x9c>
   10978:	f800283a 	ret

0001097c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
   1097c:	21400c17 	ldw	r5,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
   10980:	20c00a17 	ldw	r3,40(r4)
   10984:	00800044 	movi	r2,1
   10988:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
   1098c:	20800b17 	ldw	r2,44(r4)
   10990:	20800c15 	stw	r2,48(r4)
	pixel_buffer->buffer_start_address = temp;
   10994:	21400b15 	stw	r5,44(r4)
	return 0;
}
   10998:	0005883a 	mov	r2,zero
   1099c:	f800283a 	ret

000109a0 <alt_up_pixel_buffer_dma_draw>:
}

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
   109a0:	2011883a 	mov	r8,r4
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
   109a4:	22400f17 	ldw	r9,60(r4)
   109a8:	32402a2e 	bgeu	r6,r9,10a54 <alt_up_pixel_buffer_dma_draw+0xb4>
   109ac:	20801017 	ldw	r2,64(r4)
   109b0:	3880282e 	bgeu	r7,r2,10a54 <alt_up_pixel_buffer_dma_draw+0xb4>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
   109b4:	20800d17 	ldw	r2,52(r4)
   109b8:	10000a1e 	bne	r2,zero,109e4 <alt_up_pixel_buffer_dma_draw+0x44>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
   109bc:	21001217 	ldw	r4,72(r4)
   109c0:	3108703a 	and	r4,r6,r4
   109c4:	40801117 	ldw	r2,68(r8)
   109c8:	2088983a 	sll	r4,r4,r2
   109cc:	40801417 	ldw	r2,80(r8)
   109d0:	3884703a 	and	r2,r7,r2
   109d4:	40c01317 	ldw	r3,76(r8)
   109d8:	10c4983a 	sll	r2,r2,r3
   109dc:	2086b03a 	or	r3,r4,r2
   109e0:	00000806 	br	10a04 <alt_up_pixel_buffer_dma_draw+0x64>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
   109e4:	21001117 	ldw	r4,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
   109e8:	40c01217 	ldw	r3,72(r8)
   109ec:	30c6703a 	and	r3,r6,r3
   109f0:	40801417 	ldw	r2,80(r8)
   109f4:	3884703a 	and	r2,r7,r2
   109f8:	4885383a 	mul	r2,r9,r2
   109fc:	10c5883a 	add	r2,r2,r3
   10a00:	1106983a 	sll	r3,r2,r4
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
   10a04:	42400e17 	ldw	r9,56(r8)
   10a08:	00800044 	movi	r2,1
   10a0c:	4880051e 	bne	r9,r2,10a24 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10a10:	40800c17 	ldw	r2,48(r8)
   10a14:	1885883a 	add	r2,r3,r2
   10a18:	11400025 	stbio	r5,0(r2)
   10a1c:	0005883a 	mov	r2,zero
   10a20:	f800283a 	ret
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
   10a24:	00800084 	movi	r2,2
   10a28:	4880051e 	bne	r9,r2,10a40 <alt_up_pixel_buffer_dma_draw+0xa0>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10a2c:	40800c17 	ldw	r2,48(r8)
   10a30:	1885883a 	add	r2,r3,r2
   10a34:	1140002d 	sthio	r5,0(r2)
   10a38:	0005883a 	mov	r2,zero
   10a3c:	f800283a 	ret
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
   10a40:	40800c17 	ldw	r2,48(r8)
   10a44:	1885883a 	add	r2,r3,r2
   10a48:	11400035 	stwio	r5,0(r2)
   10a4c:	0005883a 	mov	r2,zero
   10a50:	f800283a 	ret
   10a54:	00bfffc4 	movi	r2,-1
	}

	return 0;
}
   10a58:	f800283a 	ret

00010a5c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
   10a5c:	20800a17 	ldw	r2,40(r4)
   10a60:	10800337 	ldwio	r2,12(r2)
}
   10a64:	1080004c 	andi	r2,r2,1
   10a68:	f800283a 	ret

00010a6c <alt_up_pixel_buffer_dma_change_back_buffer_address>:
}

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
   10a6c:	00c00104 	movi	r3,4
   10a70:	20800a17 	ldw	r2,40(r4)
   10a74:	10c5883a 	add	r2,r2,r3
   10a78:	11400035 	stwio	r5,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
   10a7c:	20800a17 	ldw	r2,40(r4)
   10a80:	10c5883a 	add	r2,r2,r3
   10a84:	10800037 	ldwio	r2,0(r2)
   10a88:	20800c15 	stw	r2,48(r4)
	return 0;
}
   10a8c:	0005883a 	mov	r2,zero
   10a90:	f800283a 	ret

00010a94 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
   10a94:	deffff04 	addi	sp,sp,-4
   10a98:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
   10a9c:	01400074 	movhi	r5,1
   10aa0:	294e8704 	addi	r5,r5,14876
   10aa4:	0010bbc0 	call	10bbc <alt_find_dev>

  return dev;
}
   10aa8:	dfc00017 	ldw	ra,0(sp)
   10aac:	dec00104 	addi	sp,sp,4
   10ab0:	f800283a 	ret

00010ab4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   10ab4:	00800074 	movhi	r2,1
   10ab8:	10956f04 	addi	r2,r2,21948
   10abc:	10800017 	ldw	r2,0(r2)
   10ac0:	1000021e 	bne	r2,zero,10acc <alt_alarm_start+0x18>
   10ac4:	00bfde84 	movi	r2,-134
   10ac8:	f800283a 	ret
  {
    if (alarm)
   10acc:	2000021e 	bne	r4,zero,10ad8 <alt_alarm_start+0x24>
   10ad0:	00bffa84 	movi	r2,-22
   10ad4:	f800283a 	ret
    {
      alarm->callback = callback;
   10ad8:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   10adc:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ae0:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ae4:	00bfff84 	movi	r2,-2
   10ae8:	3884703a 	and	r2,r7,r2
   10aec:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10af0:	00800074 	movhi	r2,1
   10af4:	10957004 	addi	r2,r2,21952
   10af8:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   10afc:	01800044 	movi	r6,1
   10b00:	1985883a 	add	r2,r3,r6
   10b04:	2885883a 	add	r2,r5,r2
   10b08:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10b0c:	10c0022e 	bgeu	r2,r3,10b18 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
   10b10:	21800405 	stb	r6,16(r4)
   10b14:	00000106 	br	10b1c <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
   10b18:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b1c:	00800074 	movhi	r2,1
   10b20:	108e8d04 	addi	r2,r2,14900
   10b24:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   10b28:	10c00017 	ldw	r3,0(r2)
   10b2c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   10b30:	10c00017 	ldw	r3,0(r2)
   10b34:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   10b38:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b3c:	3801703a 	wrctl	status,r7
   10b40:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   10b44:	f800283a 	ret

00010b48 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10b48:	f800283a 	ret

00010b4c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10b4c:	deffff04 	addi	sp,sp,-4
   10b50:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10b54:	20000226 	beq	r4,zero,10b60 <alt_dev_llist_insert+0x14>
   10b58:	20800217 	ldw	r2,8(r4)
   10b5c:	10000d1e 	bne	r2,zero,10b94 <alt_dev_llist_insert+0x48>
   10b60:	00800074 	movhi	r2,1
   10b64:	108e8a04 	addi	r2,r2,14888
   10b68:	10800017 	ldw	r2,0(r2)
   10b6c:	1000031e 	bne	r2,zero,10b7c <alt_dev_llist_insert+0x30>
   10b70:	00c00074 	movhi	r3,1
   10b74:	18d56a04 	addi	r3,r3,21928
   10b78:	00000206 	br	10b84 <alt_dev_llist_insert+0x38>
   10b7c:	103ee83a 	callr	r2
   10b80:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   10b84:	00800584 	movi	r2,22
   10b88:	18800015 	stw	r2,0(r3)
   10b8c:	00bffa84 	movi	r2,-22
   10b90:	00000706 	br	10bb0 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b94:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10b98:	28800017 	ldw	r2,0(r5)
   10b9c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10ba0:	28800017 	ldw	r2,0(r5)
   10ba4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10ba8:	29000015 	stw	r4,0(r5)
   10bac:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10bb0:	dfc00017 	ldw	ra,0(sp)
   10bb4:	dec00104 	addi	sp,sp,4
   10bb8:	f800283a 	ret

00010bbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10bbc:	defffb04 	addi	sp,sp,-20
   10bc0:	dfc00415 	stw	ra,16(sp)
   10bc4:	dcc00315 	stw	r19,12(sp)
   10bc8:	dc800215 	stw	r18,8(sp)
   10bcc:	dc400115 	stw	r17,4(sp)
   10bd0:	dc000015 	stw	r16,0(sp)
   10bd4:	2027883a 	mov	r19,r4
   10bd8:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
   10bdc:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   10be0:	00091240 	call	9124 <strlen>
   10be4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10be8:	8c000726 	beq	r17,r16,10c08 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10bec:	89000217 	ldw	r4,8(r17)
   10bf0:	980b883a 	mov	r5,r19
   10bf4:	900d883a 	mov	r6,r18
   10bf8:	00112680 	call	11268 <memcmp>
   10bfc:	10000326 	beq	r2,zero,10c0c <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   10c00:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10c04:	847ff91e 	bne	r16,r17,10bec <alt_find_dev+0x30>
   10c08:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
   10c0c:	8805883a 	mov	r2,r17
   10c10:	dfc00417 	ldw	ra,16(sp)
   10c14:	dcc00317 	ldw	r19,12(sp)
   10c18:	dc800217 	ldw	r18,8(sp)
   10c1c:	dc400117 	ldw	r17,4(sp)
   10c20:	dc000017 	ldw	r16,0(sp)
   10c24:	dec00504 	addi	sp,sp,20
   10c28:	f800283a 	ret

00010c2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10c2c:	deffff04 	addi	sp,sp,-4
   10c30:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10c34:	0009883a 	mov	r4,zero
   10c38:	01440004 	movi	r5,4096
   10c3c:	00111f40 	call	111f4 <alt_icache_flush>
#endif
}
   10c40:	dfc00017 	ldw	ra,0(sp)
   10c44:	dec00104 	addi	sp,sp,4
   10c48:	f800283a 	ret

00010c4c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10c4c:	000530fa 	rdctl	r2,ienable
   10c50:	00c00044 	movi	r3,1
   10c54:	1946983a 	sll	r3,r3,r5
   10c58:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
   10c5c:	1004c03a 	cmpne	r2,r2,zero
   10c60:	f800283a 	ret

00010c64 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c64:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c68:	00bfff84 	movi	r2,-2
   10c6c:	3084703a 	and	r2,r6,r2
   10c70:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10c74:	00c00074 	movhi	r3,1
   10c78:	18d56e04 	addi	r3,r3,21944
   10c7c:	19000017 	ldw	r4,0(r3)
   10c80:	00800044 	movi	r2,1
   10c84:	1144983a 	sll	r2,r2,r5
   10c88:	1104b03a 	or	r2,r2,r4
   10c8c:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10c90:	18800017 	ldw	r2,0(r3)
   10c94:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c98:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   10c9c:	0005883a 	mov	r2,zero
   10ca0:	f800283a 	ret

00010ca4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ca4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ca8:	00bfff84 	movi	r2,-2
   10cac:	3084703a 	and	r2,r6,r2
   10cb0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10cb4:	00c00074 	movhi	r3,1
   10cb8:	18d56e04 	addi	r3,r3,21944
   10cbc:	19000017 	ldw	r4,0(r3)
   10cc0:	00bfff84 	movi	r2,-2
   10cc4:	1144183a 	rol	r2,r2,r5
   10cc8:	1104703a 	and	r2,r2,r4
   10ccc:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10cd0:	18800017 	ldw	r2,0(r3)
   10cd4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cd8:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   10cdc:	0005883a 	mov	r2,zero
   10ce0:	f800283a 	ret

00010ce4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10ce4:	defffe04 	addi	sp,sp,-8
   10ce8:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10cec:	d8800217 	ldw	r2,8(sp)
   10cf0:	d8800015 	stw	r2,0(sp)
   10cf4:	0010d040 	call	10d04 <alt_iic_isr_register>
}  
   10cf8:	dfc00117 	ldw	ra,4(sp)
   10cfc:	dec00204 	addi	sp,sp,8
   10d00:	f800283a 	ret

00010d04 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10d04:	defffe04 	addi	sp,sp,-8
   10d08:	dfc00115 	stw	ra,4(sp)
   10d0c:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10d10:	008007c4 	movi	r2,31
   10d14:	1140020e 	bge	r2,r5,10d20 <alt_iic_isr_register+0x1c>
   10d18:	00bffa84 	movi	r2,-22
   10d1c:	00000f06 	br	10d5c <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d20:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d24:	00bfff84 	movi	r2,-2
   10d28:	8084703a 	and	r2,r16,r2
   10d2c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10d30:	280490fa 	slli	r2,r5,3
   10d34:	00c00074 	movhi	r3,1
   10d38:	18d5bb04 	addi	r3,r3,22252
   10d3c:	10c5883a 	add	r2,r2,r3
   10d40:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   10d44:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10d48:	30000226 	beq	r6,zero,10d54 <alt_iic_isr_register+0x50>
   10d4c:	0010c640 	call	10c64 <alt_ic_irq_enable>
   10d50:	00000106 	br	10d58 <alt_iic_isr_register+0x54>
   10d54:	0010ca40 	call	10ca4 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d58:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   10d5c:	dfc00117 	ldw	ra,4(sp)
   10d60:	dc000017 	ldw	r16,0(sp)
   10d64:	dec00204 	addi	sp,sp,8
   10d68:	f800283a 	ret

00010d6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10d6c:	defffe04 	addi	sp,sp,-8
   10d70:	dfc00115 	stw	ra,4(sp)
   10d74:	dc000015 	stw	r16,0(sp)
   10d78:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
   10d7c:	2809883a 	mov	r4,r5
   10d80:	300b883a 	mov	r5,r6
   10d84:	380d883a 	mov	r6,r7
   10d88:	0010e680 	call	10e68 <open>
   10d8c:	1009883a 	mov	r4,r2

  if (old >= 0)
   10d90:	10000b16 	blt	r2,zero,10dc0 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
   10d94:	10c00324 	muli	r3,r2,12
   10d98:	00800074 	movhi	r2,1
   10d9c:	1089d304 	addi	r2,r2,10060
   10da0:	1887883a 	add	r3,r3,r2
   10da4:	18800017 	ldw	r2,0(r3)
   10da8:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   10dac:	18800117 	ldw	r2,4(r3)
   10db0:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10db4:	18800217 	ldw	r2,8(r3)
   10db8:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
   10dbc:	000f57c0 	call	f57c <alt_release_fd>
  }
} 
   10dc0:	dfc00117 	ldw	ra,4(sp)
   10dc4:	dc000017 	ldw	r16,0(sp)
   10dc8:	dec00204 	addi	sp,sp,8
   10dcc:	f800283a 	ret

00010dd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10dd0:	defffa04 	addi	sp,sp,-24
   10dd4:	dfc00515 	stw	ra,20(sp)
   10dd8:	dd000415 	stw	r20,16(sp)
   10ddc:	dcc00315 	stw	r19,12(sp)
   10de0:	dc800215 	stw	r18,8(sp)
   10de4:	dc400115 	stw	r17,4(sp)
   10de8:	dc000015 	stw	r16,0(sp)
   10dec:	2005883a 	mov	r2,r4
   10df0:	2827883a 	mov	r19,r5
   10df4:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10df8:	04000074 	movhi	r16,1
   10dfc:	8409d604 	addi	r16,r16,10072
   10e00:	04800044 	movi	r18,1
   10e04:	04407fc4 	movi	r17,511
   10e08:	8009883a 	mov	r4,r16
   10e0c:	100b883a 	mov	r5,r2
   10e10:	900d883a 	mov	r6,r18
   10e14:	880f883a 	mov	r7,r17
   10e18:	0010d6c0 	call	10d6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10e1c:	843ffd04 	addi	r16,r16,-12
   10e20:	8009883a 	mov	r4,r16
   10e24:	980b883a 	mov	r5,r19
   10e28:	000d883a 	mov	r6,zero
   10e2c:	880f883a 	mov	r7,r17
   10e30:	0010d6c0 	call	10d6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10e34:	81000604 	addi	r4,r16,24
   10e38:	a00b883a 	mov	r5,r20
   10e3c:	900d883a 	mov	r6,r18
   10e40:	880f883a 	mov	r7,r17
   10e44:	0010d6c0 	call	10d6c <alt_open_fd>
}  
   10e48:	dfc00517 	ldw	ra,20(sp)
   10e4c:	dd000417 	ldw	r20,16(sp)
   10e50:	dcc00317 	ldw	r19,12(sp)
   10e54:	dc800217 	ldw	r18,8(sp)
   10e58:	dc400117 	ldw	r17,4(sp)
   10e5c:	dc000017 	ldw	r16,0(sp)
   10e60:	dec00604 	addi	sp,sp,24
   10e64:	f800283a 	ret

00010e68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10e68:	defff904 	addi	sp,sp,-28
   10e6c:	dfc00615 	stw	ra,24(sp)
   10e70:	dd400515 	stw	r21,20(sp)
   10e74:	dd000415 	stw	r20,16(sp)
   10e78:	dcc00315 	stw	r19,12(sp)
   10e7c:	dc800215 	stw	r18,8(sp)
   10e80:	dc400115 	stw	r17,4(sp)
   10e84:	dc000015 	stw	r16,0(sp)
   10e88:	2029883a 	mov	r20,r4
   10e8c:	2827883a 	mov	r19,r5
   10e90:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10e94:	01400074 	movhi	r5,1
   10e98:	294e8704 	addi	r5,r5,14876
   10e9c:	0010bbc0 	call	10bbc <alt_find_dev>
   10ea0:	1021883a 	mov	r16,r2
   10ea4:	10000226 	beq	r2,zero,10eb0 <open+0x48>
   10ea8:	0025883a 	mov	r18,zero
   10eac:	00000a06 	br	10ed8 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10eb0:	a009883a 	mov	r4,r20
   10eb4:	00110cc0 	call	110cc <alt_find_file>
   10eb8:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10ebc:	1000051e 	bne	r2,zero,10ed4 <open+0x6c>
   10ec0:	047fffc4 	movi	r17,-1
   10ec4:	043ffb44 	movi	r16,-19
   10ec8:	00002b06 	br	10f78 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10ecc:	043ffcc4 	movi	r16,-13
   10ed0:	00002906 	br	10f78 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10ed4:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
   10ed8:	8009883a 	mov	r4,r16
   10edc:	00111880 	call	11188 <alt_get_fd>
   10ee0:	1023883a 	mov	r17,r2
   10ee4:	10003316 	blt	r2,zero,10fb4 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   10ee8:	10800324 	muli	r2,r2,12
   10eec:	02000074 	movhi	r8,1
   10ef0:	4209d304 	addi	r8,r8,10060
   10ef4:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10ef8:	00900034 	movhi	r2,16384
   10efc:	10bfffc4 	addi	r2,r2,-1
   10f00:	9886703a 	and	r3,r19,r2
   10f04:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10f08:	9004c03a 	cmpne	r2,r18,zero
   10f0c:	1000121e 	bne	r2,zero,10f58 <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10f10:	18900034 	orhi	r2,r3,16384
   10f14:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10f18:	00800074 	movhi	r2,1
   10f1c:	108e8904 	addi	r2,r2,14884
   10f20:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10f24:	21800017 	ldw	r6,0(r4)
   10f28:	000b883a 	mov	r5,zero
   10f2c:	4007883a 	mov	r3,r8
   10f30:	02400044 	movi	r9,1
   10f34:	02000304 	movi	r8,12
   10f38:	18800017 	ldw	r2,0(r3)
   10f3c:	1180031e 	bne	r2,r6,10f4c <open+0xe4>
   10f40:	18800217 	ldw	r2,8(r3)
   10f44:	1000010e 	bge	r2,zero,10f4c <open+0xe4>
   10f48:	193fe01e 	bne	r3,r4,10ecc <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10f4c:	2a4b883a 	add	r5,r5,r9
   10f50:	1a07883a 	add	r3,r3,r8
   10f54:	397ff82e 	bgeu	r7,r5,10f38 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10f58:	80800317 	ldw	r2,12(r16)
   10f5c:	10001726 	beq	r2,zero,10fbc <open+0x154>
   10f60:	a00b883a 	mov	r5,r20
   10f64:	980d883a 	mov	r6,r19
   10f68:	a80f883a 	mov	r7,r21
   10f6c:	103ee83a 	callr	r2
   10f70:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10f74:	1000110e 	bge	r2,zero,10fbc <open+0x154>
  {
    alt_release_fd (index);  
   10f78:	8809883a 	mov	r4,r17
   10f7c:	000f57c0 	call	f57c <alt_release_fd>
   10f80:	00800074 	movhi	r2,1
   10f84:	108e8a04 	addi	r2,r2,14888
   10f88:	10800017 	ldw	r2,0(r2)
   10f8c:	1000031e 	bne	r2,zero,10f9c <open+0x134>
   10f90:	00c00074 	movhi	r3,1
   10f94:	18d56a04 	addi	r3,r3,21928
   10f98:	00000206 	br	10fa4 <open+0x13c>
   10f9c:	103ee83a 	callr	r2
   10fa0:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
   10fa4:	0405c83a 	sub	r2,zero,r16
   10fa8:	18800015 	stw	r2,0(r3)
   10fac:	047fffc4 	movi	r17,-1
   10fb0:	00000206 	br	10fbc <open+0x154>
   10fb4:	1021883a 	mov	r16,r2
   10fb8:	003fef06 	br	10f78 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
   10fbc:	8805883a 	mov	r2,r17
   10fc0:	dfc00617 	ldw	ra,24(sp)
   10fc4:	dd400517 	ldw	r21,20(sp)
   10fc8:	dd000417 	ldw	r20,16(sp)
   10fcc:	dcc00317 	ldw	r19,12(sp)
   10fd0:	dc800217 	ldw	r18,8(sp)
   10fd4:	dc400117 	ldw	r17,4(sp)
   10fd8:	dc000017 	ldw	r16,0(sp)
   10fdc:	dec00704 	addi	sp,sp,28
   10fe0:	f800283a 	ret

00010fe4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fe4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fe8:	00bfff84 	movi	r2,-2
   10fec:	2884703a 	and	r2,r5,r2
   10ff0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10ff4:	20c00017 	ldw	r3,0(r4)
   10ff8:	20800117 	ldw	r2,4(r4)
   10ffc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   11000:	20800117 	ldw	r2,4(r4)
   11004:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11008:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   1100c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11010:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   11014:	f800283a 	ret

00011018 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11018:	defffd04 	addi	sp,sp,-12
   1101c:	dfc00215 	stw	ra,8(sp)
   11020:	dc400115 	stw	r17,4(sp)
   11024:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11028:	d4200f17 	ldw	r16,-32708(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1102c:	d0a6f217 	ldw	r2,-25656(gp)
   11030:	10800044 	addi	r2,r2,1
   11034:	d0a6f215 	stw	r2,-25656(gp)
   11038:	00001b06 	br	110a8 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   1103c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11040:	80800403 	ldbu	r2,16(r16)
   11044:	10000326 	beq	r2,zero,11054 <alt_tick+0x3c>
   11048:	d0a6f217 	ldw	r2,-25656(gp)
   1104c:	1000011e 	bne	r2,zero,11054 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   11050:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11054:	d0e6f217 	ldw	r3,-25656(gp)
   11058:	80800217 	ldw	r2,8(r16)
   1105c:	18801136 	bltu	r3,r2,110a4 <alt_tick+0x8c>
   11060:	80800403 	ldbu	r2,16(r16)
   11064:	10000f1e 	bne	r2,zero,110a4 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   11068:	80800317 	ldw	r2,12(r16)
   1106c:	81000517 	ldw	r4,20(r16)
   11070:	103ee83a 	callr	r2
   11074:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11078:	1000031e 	bne	r2,zero,11088 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   1107c:	8009883a 	mov	r4,r16
   11080:	0010fe40 	call	10fe4 <alt_alarm_stop>
   11084:	00000706 	br	110a4 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   11088:	80800217 	ldw	r2,8(r16)
   1108c:	1885883a 	add	r2,r3,r2
   11090:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11094:	d0e6f217 	ldw	r3,-25656(gp)
   11098:	10c0022e 	bgeu	r2,r3,110a4 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   1109c:	00800044 	movi	r2,1
   110a0:	80800405 	stb	r2,16(r16)
   110a4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   110a8:	d0a00f04 	addi	r2,gp,-32708
   110ac:	80bfe31e 	bne	r16,r2,1103c <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   110b0:	dfc00217 	ldw	ra,8(sp)
   110b4:	dc400117 	ldw	r17,4(sp)
   110b8:	dc000017 	ldw	r16,0(sp)
   110bc:	dec00304 	addi	sp,sp,12
   110c0:	f800283a 	ret

000110c4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   110c4:	000170fa 	wrctl	ienable,zero
}
   110c8:	f800283a 	ret

000110cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   110cc:	defff904 	addi	sp,sp,-28
   110d0:	dfc00615 	stw	ra,24(sp)
   110d4:	dd400515 	stw	r21,20(sp)
   110d8:	dd000415 	stw	r20,16(sp)
   110dc:	dcc00315 	stw	r19,12(sp)
   110e0:	dc800215 	stw	r18,8(sp)
   110e4:	dc400115 	stw	r17,4(sp)
   110e8:	dc000015 	stw	r16,0(sp)
   110ec:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   110f0:	00800074 	movhi	r2,1
   110f4:	108e8504 	addi	r2,r2,14868
   110f8:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   110fc:	102b883a 	mov	r21,r2
   11100:	88801626 	beq	r17,r2,1115c <alt_find_file+0x90>
   11104:	053fffc4 	movi	r20,-1
   11108:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
   1110c:	8c000217 	ldw	r16,8(r17)
   11110:	8009883a 	mov	r4,r16
   11114:	00091240 	call	9124 <strlen>
   11118:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   1111c:	8085883a 	add	r2,r16,r2
   11120:	1505883a 	add	r2,r2,r20
   11124:	10800007 	ldb	r2,0(r2)
   11128:	14c0011e 	bne	r2,r19,11130 <alt_find_file+0x64>
    {
      len -= 1;
   1112c:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11130:	1c85883a 	add	r2,r3,r18
   11134:	10800007 	ldb	r2,0(r2)
   11138:	14c00126 	beq	r2,r19,11140 <alt_find_file+0x74>
   1113c:	1000051e 	bne	r2,zero,11154 <alt_find_file+0x88>
   11140:	8009883a 	mov	r4,r16
   11144:	900b883a 	mov	r5,r18
   11148:	180d883a 	mov	r6,r3
   1114c:	00112680 	call	11268 <memcmp>
   11150:	10000326 	beq	r2,zero,11160 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11154:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11158:	8d7fec1e 	bne	r17,r21,1110c <alt_find_file+0x40>
   1115c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
   11160:	8805883a 	mov	r2,r17
   11164:	dfc00617 	ldw	ra,24(sp)
   11168:	dd400517 	ldw	r21,20(sp)
   1116c:	dd000417 	ldw	r20,16(sp)
   11170:	dcc00317 	ldw	r19,12(sp)
   11174:	dc800217 	ldw	r18,8(sp)
   11178:	dc400117 	ldw	r17,4(sp)
   1117c:	dc000017 	ldw	r16,0(sp)
   11180:	dec00704 	addi	sp,sp,28
   11184:	f800283a 	ret

00011188 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11188:	000b883a 	mov	r5,zero
   1118c:	00c00074 	movhi	r3,1
   11190:	18c9d304 	addi	r3,r3,10060
   11194:	02000304 	movi	r8,12
   11198:	02400074 	movhi	r9,1
   1119c:	4a4e8904 	addi	r9,r9,14884
   111a0:	01c00044 	movi	r7,1
   111a4:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   111a8:	18800017 	ldw	r2,0(r3)
   111ac:	10000c1e 	bne	r2,zero,111e0 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
   111b0:	2a05383a 	mul	r2,r5,r8
   111b4:	00c00074 	movhi	r3,1
   111b8:	18c9d304 	addi	r3,r3,10060
   111bc:	10c5883a 	add	r2,r2,r3
   111c0:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
   111c4:	48800017 	ldw	r2,0(r9)
   111c8:	11400216 	blt	r2,r5,111d4 <alt_get_fd+0x4c>
   111cc:	2805883a 	mov	r2,r5
   111d0:	f800283a 	ret
      {
        alt_max_fd = i;
   111d4:	49400015 	stw	r5,0(r9)
   111d8:	2805883a 	mov	r2,r5
   111dc:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   111e0:	29cb883a 	add	r5,r5,r7
   111e4:	1a07883a 	add	r3,r3,r8
   111e8:	29bfef1e 	bne	r5,r6,111a8 <alt_get_fd+0x20>
   111ec:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   111f0:	f800283a 	ret

000111f4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   111f4:	2007883a 	mov	r3,r4
   111f8:	00840004 	movi	r2,4096
   111fc:	1140012e 	bgeu	r2,r5,11204 <alt_icache_flush+0x10>
   11200:	100b883a 	mov	r5,r2
   11204:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11208:	1940042e 	bgeu	r3,r5,1121c <alt_icache_flush+0x28>
   1120c:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11210:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11214:	1887883a 	add	r3,r3,r2
   11218:	197ffd36 	bltu	r3,r5,11210 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1121c:	208007cc 	andi	r2,r4,31
   11220:	10000126 	beq	r2,zero,11228 <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11224:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11228:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1122c:	f800283a 	ret

00011230 <exit>:
   11230:	defffe04 	addi	sp,sp,-8
   11234:	000b883a 	mov	r5,zero
   11238:	dc000015 	stw	r16,0(sp)
   1123c:	dfc00115 	stw	ra,4(sp)
   11240:	2021883a 	mov	r16,r4
   11244:	00116180 	call	11618 <__call_exitprocs>
   11248:	00800074 	movhi	r2,1
   1124c:	108e8004 	addi	r2,r2,14848
   11250:	11000017 	ldw	r4,0(r2)
   11254:	20800f17 	ldw	r2,60(r4)
   11258:	10000126 	beq	r2,zero,11260 <exit+0x30>
   1125c:	103ee83a 	callr	r2
   11260:	8009883a 	mov	r4,r16
   11264:	00117c80 	call	117c8 <_exit>

00011268 <memcmp>:
   11268:	00c000c4 	movi	r3,3
   1126c:	1980032e 	bgeu	r3,r6,1127c <memcmp+0x14>
   11270:	2144b03a 	or	r2,r4,r5
   11274:	10c4703a 	and	r2,r2,r3
   11278:	10000f26 	beq	r2,zero,112b8 <memcmp+0x50>
   1127c:	31ffffc4 	addi	r7,r6,-1
   11280:	3000061e 	bne	r6,zero,1129c <memcmp+0x34>
   11284:	00000a06 	br	112b0 <memcmp+0x48>
   11288:	39ffffc4 	addi	r7,r7,-1
   1128c:	00bfffc4 	movi	r2,-1
   11290:	21000044 	addi	r4,r4,1
   11294:	29400044 	addi	r5,r5,1
   11298:	38800526 	beq	r7,r2,112b0 <memcmp+0x48>
   1129c:	20c00003 	ldbu	r3,0(r4)
   112a0:	28800003 	ldbu	r2,0(r5)
   112a4:	18bff826 	beq	r3,r2,11288 <memcmp+0x20>
   112a8:	1885c83a 	sub	r2,r3,r2
   112ac:	f800283a 	ret
   112b0:	0005883a 	mov	r2,zero
   112b4:	f800283a 	ret
   112b8:	180f883a 	mov	r7,r3
   112bc:	20c00017 	ldw	r3,0(r4)
   112c0:	28800017 	ldw	r2,0(r5)
   112c4:	18bfed1e 	bne	r3,r2,1127c <memcmp+0x14>
   112c8:	31bfff04 	addi	r6,r6,-4
   112cc:	21000104 	addi	r4,r4,4
   112d0:	29400104 	addi	r5,r5,4
   112d4:	39bff936 	bltu	r7,r6,112bc <memcmp+0x54>
   112d8:	003fe806 	br	1127c <memcmp+0x14>

000112dc <putc>:
   112dc:	defffc04 	addi	sp,sp,-16
   112e0:	dc800215 	stw	r18,8(sp)
   112e4:	04800074 	movhi	r18,1
   112e8:	948e7f04 	addi	r18,r18,14844
   112ec:	90c00017 	ldw	r3,0(r18)
   112f0:	dc400115 	stw	r17,4(sp)
   112f4:	dc000015 	stw	r16,0(sp)
   112f8:	dfc00315 	stw	ra,12(sp)
   112fc:	2023883a 	mov	r17,r4
   11300:	2821883a 	mov	r16,r5
   11304:	18000226 	beq	r3,zero,11310 <putc+0x34>
   11308:	18800e17 	ldw	r2,56(r3)
   1130c:	10001126 	beq	r2,zero,11354 <putc+0x78>
   11310:	80800217 	ldw	r2,8(r16)
   11314:	10ffffc4 	addi	r3,r2,-1
   11318:	80c00215 	stw	r3,8(r16)
   1131c:	18001316 	blt	r3,zero,1136c <putc+0x90>
   11320:	80800017 	ldw	r2,0(r16)
   11324:	14400005 	stb	r17,0(r2)
   11328:	80c00017 	ldw	r3,0(r16)
   1132c:	18800044 	addi	r2,r3,1
   11330:	18c00003 	ldbu	r3,0(r3)
   11334:	80800015 	stw	r2,0(r16)
   11338:	1805883a 	mov	r2,r3
   1133c:	dfc00317 	ldw	ra,12(sp)
   11340:	dc800217 	ldw	r18,8(sp)
   11344:	dc400117 	ldw	r17,4(sp)
   11348:	dc000017 	ldw	r16,0(sp)
   1134c:	dec00404 	addi	sp,sp,16
   11350:	f800283a 	ret
   11354:	1809883a 	mov	r4,r3
   11358:	00058280 	call	5828 <__sinit>
   1135c:	80800217 	ldw	r2,8(r16)
   11360:	10ffffc4 	addi	r3,r2,-1
   11364:	80c00215 	stw	r3,8(r16)
   11368:	183fed0e 	bge	r3,zero,11320 <putc+0x44>
   1136c:	80800617 	ldw	r2,24(r16)
   11370:	18800f16 	blt	r3,r2,113b0 <putc+0xd4>
   11374:	80800017 	ldw	r2,0(r16)
   11378:	14400005 	stb	r17,0(r2)
   1137c:	81000017 	ldw	r4,0(r16)
   11380:	00800284 	movi	r2,10
   11384:	20c00003 	ldbu	r3,0(r4)
   11388:	18801226 	beq	r3,r2,113d4 <putc+0xf8>
   1138c:	20800044 	addi	r2,r4,1
   11390:	80800015 	stw	r2,0(r16)
   11394:	1805883a 	mov	r2,r3
   11398:	dfc00317 	ldw	ra,12(sp)
   1139c:	dc800217 	ldw	r18,8(sp)
   113a0:	dc400117 	ldw	r17,4(sp)
   113a4:	dc000017 	ldw	r16,0(sp)
   113a8:	dec00404 	addi	sp,sp,16
   113ac:	f800283a 	ret
   113b0:	91000017 	ldw	r4,0(r18)
   113b4:	880b883a 	mov	r5,r17
   113b8:	800d883a 	mov	r6,r16
   113bc:	dfc00317 	ldw	ra,12(sp)
   113c0:	dc800217 	ldw	r18,8(sp)
   113c4:	dc400117 	ldw	r17,4(sp)
   113c8:	dc000017 	ldw	r16,0(sp)
   113cc:	dec00404 	addi	sp,sp,16
   113d0:	00114c81 	jmpi	114c8 <__swbuf_r>
   113d4:	91000017 	ldw	r4,0(r18)
   113d8:	180b883a 	mov	r5,r3
   113dc:	003ff606 	br	113b8 <putc+0xdc>

000113e0 <_putc_r>:
   113e0:	defffc04 	addi	sp,sp,-16
   113e4:	dc400215 	stw	r17,8(sp)
   113e8:	dc000115 	stw	r16,4(sp)
   113ec:	dfc00315 	stw	ra,12(sp)
   113f0:	2021883a 	mov	r16,r4
   113f4:	2823883a 	mov	r17,r5
   113f8:	20000226 	beq	r4,zero,11404 <_putc_r+0x24>
   113fc:	20800e17 	ldw	r2,56(r4)
   11400:	10001026 	beq	r2,zero,11444 <_putc_r+0x64>
   11404:	30800217 	ldw	r2,8(r6)
   11408:	10ffffc4 	addi	r3,r2,-1
   1140c:	30c00215 	stw	r3,8(r6)
   11410:	18001316 	blt	r3,zero,11460 <_putc_r+0x80>
   11414:	30800017 	ldw	r2,0(r6)
   11418:	14400005 	stb	r17,0(r2)
   1141c:	30c00017 	ldw	r3,0(r6)
   11420:	18800044 	addi	r2,r3,1
   11424:	18c00003 	ldbu	r3,0(r3)
   11428:	30800015 	stw	r2,0(r6)
   1142c:	1805883a 	mov	r2,r3
   11430:	dfc00317 	ldw	ra,12(sp)
   11434:	dc400217 	ldw	r17,8(sp)
   11438:	dc000117 	ldw	r16,4(sp)
   1143c:	dec00404 	addi	sp,sp,16
   11440:	f800283a 	ret
   11444:	d9800015 	stw	r6,0(sp)
   11448:	00058280 	call	5828 <__sinit>
   1144c:	d9800017 	ldw	r6,0(sp)
   11450:	30800217 	ldw	r2,8(r6)
   11454:	10ffffc4 	addi	r3,r2,-1
   11458:	30c00215 	stw	r3,8(r6)
   1145c:	183fed0e 	bge	r3,zero,11414 <_putc_r+0x34>
   11460:	30800617 	ldw	r2,24(r6)
   11464:	18800e16 	blt	r3,r2,114a0 <_putc_r+0xc0>
   11468:	30800017 	ldw	r2,0(r6)
   1146c:	14400005 	stb	r17,0(r2)
   11470:	31000017 	ldw	r4,0(r6)
   11474:	00800284 	movi	r2,10
   11478:	20c00003 	ldbu	r3,0(r4)
   1147c:	18800f26 	beq	r3,r2,114bc <_putc_r+0xdc>
   11480:	20800044 	addi	r2,r4,1
   11484:	30800015 	stw	r2,0(r6)
   11488:	1805883a 	mov	r2,r3
   1148c:	dfc00317 	ldw	ra,12(sp)
   11490:	dc400217 	ldw	r17,8(sp)
   11494:	dc000117 	ldw	r16,4(sp)
   11498:	dec00404 	addi	sp,sp,16
   1149c:	f800283a 	ret
   114a0:	8009883a 	mov	r4,r16
   114a4:	880b883a 	mov	r5,r17
   114a8:	dfc00317 	ldw	ra,12(sp)
   114ac:	dc400217 	ldw	r17,8(sp)
   114b0:	dc000117 	ldw	r16,4(sp)
   114b4:	dec00404 	addi	sp,sp,16
   114b8:	00114c81 	jmpi	114c8 <__swbuf_r>
   114bc:	8009883a 	mov	r4,r16
   114c0:	180b883a 	mov	r5,r3
   114c4:	003ff806 	br	114a8 <_putc_r+0xc8>

000114c8 <__swbuf_r>:
   114c8:	defffc04 	addi	sp,sp,-16
   114cc:	dc400215 	stw	r17,8(sp)
   114d0:	dc000115 	stw	r16,4(sp)
   114d4:	dfc00315 	stw	ra,12(sp)
   114d8:	2023883a 	mov	r17,r4
   114dc:	2821883a 	mov	r16,r5
   114e0:	20000226 	beq	r4,zero,114ec <__swbuf_r+0x24>
   114e4:	20800e17 	ldw	r2,56(r4)
   114e8:	10002f26 	beq	r2,zero,115a8 <__swbuf_r+0xe0>
   114ec:	3080030b 	ldhu	r2,12(r6)
   114f0:	30c00617 	ldw	r3,24(r6)
   114f4:	1080020c 	andi	r2,r2,8
   114f8:	30c00215 	stw	r3,8(r6)
   114fc:	10002226 	beq	r2,zero,11588 <__swbuf_r+0xc0>
   11500:	30c00417 	ldw	r3,16(r6)
   11504:	18002026 	beq	r3,zero,11588 <__swbuf_r+0xc0>
   11508:	31000017 	ldw	r4,0(r6)
   1150c:	30800517 	ldw	r2,20(r6)
   11510:	20c7c83a 	sub	r3,r4,r3
   11514:	18802f0e 	bge	r3,r2,115d4 <__swbuf_r+0x10c>
   11518:	19400044 	addi	r5,r3,1
   1151c:	30800217 	ldw	r2,8(r6)
   11520:	84003fcc 	andi	r16,r16,255
   11524:	20c00044 	addi	r3,r4,1
   11528:	10bfffc4 	addi	r2,r2,-1
   1152c:	30800215 	stw	r2,8(r6)
   11530:	24000005 	stb	r16,0(r4)
   11534:	30800517 	ldw	r2,20(r6)
   11538:	30c00015 	stw	r3,0(r6)
   1153c:	11400c26 	beq	r2,r5,11570 <__swbuf_r+0xa8>
   11540:	3080030b 	ldhu	r2,12(r6)
   11544:	1080004c 	andi	r2,r2,1
   11548:	1005003a 	cmpeq	r2,r2,zero
   1154c:	10000626 	beq	r2,zero,11568 <__swbuf_r+0xa0>
   11550:	8005883a 	mov	r2,r16
   11554:	dfc00317 	ldw	ra,12(sp)
   11558:	dc400217 	ldw	r17,8(sp)
   1155c:	dc000117 	ldw	r16,4(sp)
   11560:	dec00404 	addi	sp,sp,16
   11564:	f800283a 	ret
   11568:	00800284 	movi	r2,10
   1156c:	80bff81e 	bne	r16,r2,11550 <__swbuf_r+0x88>
   11570:	8809883a 	mov	r4,r17
   11574:	300b883a 	mov	r5,r6
   11578:	00055900 	call	5590 <_fflush_r>
   1157c:	103ff426 	beq	r2,zero,11550 <__swbuf_r+0x88>
   11580:	043fffc4 	movi	r16,-1
   11584:	003ff206 	br	11550 <__swbuf_r+0x88>
   11588:	300b883a 	mov	r5,r6
   1158c:	8809883a 	mov	r4,r17
   11590:	d9800015 	stw	r6,0(sp)
   11594:	0003c880 	call	3c88 <__swsetup_r>
   11598:	d9800017 	ldw	r6,0(sp)
   1159c:	1000061e 	bne	r2,zero,115b8 <__swbuf_r+0xf0>
   115a0:	30c00417 	ldw	r3,16(r6)
   115a4:	003fd806 	br	11508 <__swbuf_r+0x40>
   115a8:	d9800015 	stw	r6,0(sp)
   115ac:	00058280 	call	5828 <__sinit>
   115b0:	d9800017 	ldw	r6,0(sp)
   115b4:	003fcd06 	br	114ec <__swbuf_r+0x24>
   115b8:	3080030b 	ldhu	r2,12(r6)
   115bc:	00c00244 	movi	r3,9
   115c0:	043fffc4 	movi	r16,-1
   115c4:	10801014 	ori	r2,r2,64
   115c8:	3080030d 	sth	r2,12(r6)
   115cc:	88c00015 	stw	r3,0(r17)
   115d0:	003fdf06 	br	11550 <__swbuf_r+0x88>
   115d4:	300b883a 	mov	r5,r6
   115d8:	8809883a 	mov	r4,r17
   115dc:	d9800015 	stw	r6,0(sp)
   115e0:	00055900 	call	5590 <_fflush_r>
   115e4:	d9800017 	ldw	r6,0(sp)
   115e8:	103fe51e 	bne	r2,zero,11580 <__swbuf_r+0xb8>
   115ec:	31000017 	ldw	r4,0(r6)
   115f0:	01400044 	movi	r5,1
   115f4:	003fc906 	br	1151c <__swbuf_r+0x54>

000115f8 <__swbuf>:
   115f8:	01800074 	movhi	r6,1
   115fc:	318e7f04 	addi	r6,r6,14844
   11600:	2007883a 	mov	r3,r4
   11604:	31000017 	ldw	r4,0(r6)
   11608:	280d883a 	mov	r6,r5
   1160c:	180b883a 	mov	r5,r3
   11610:	00114c81 	jmpi	114c8 <__swbuf_r>

00011614 <register_fini>:
   11614:	f800283a 	ret

00011618 <__call_exitprocs>:
   11618:	00800074 	movhi	r2,1
   1161c:	108e8004 	addi	r2,r2,14848
   11620:	10800017 	ldw	r2,0(r2)
   11624:	defff304 	addi	sp,sp,-52
   11628:	df000b15 	stw	fp,44(sp)
   1162c:	d8800115 	stw	r2,4(sp)
   11630:	00800034 	movhi	r2,0
   11634:	10800004 	addi	r2,r2,0
   11638:	1005003a 	cmpeq	r2,r2,zero
   1163c:	d8800215 	stw	r2,8(sp)
   11640:	d8800117 	ldw	r2,4(sp)
   11644:	dd400815 	stw	r21,32(sp)
   11648:	dd000715 	stw	r20,28(sp)
   1164c:	10805204 	addi	r2,r2,328
   11650:	dfc00c15 	stw	ra,48(sp)
   11654:	ddc00a15 	stw	r23,40(sp)
   11658:	dd800915 	stw	r22,36(sp)
   1165c:	dcc00615 	stw	r19,24(sp)
   11660:	dc800515 	stw	r18,20(sp)
   11664:	dc400415 	stw	r17,16(sp)
   11668:	dc000315 	stw	r16,12(sp)
   1166c:	282b883a 	mov	r21,r5
   11670:	2039883a 	mov	fp,r4
   11674:	d8800015 	stw	r2,0(sp)
   11678:	2829003a 	cmpeq	r20,r5,zero
   1167c:	d8800117 	ldw	r2,4(sp)
   11680:	14405217 	ldw	r17,328(r2)
   11684:	88001026 	beq	r17,zero,116c8 <__call_exitprocs+0xb0>
   11688:	ddc00017 	ldw	r23,0(sp)
   1168c:	88800117 	ldw	r2,4(r17)
   11690:	8c802204 	addi	r18,r17,136
   11694:	143fffc4 	addi	r16,r2,-1
   11698:	80000916 	blt	r16,zero,116c0 <__call_exitprocs+0xa8>
   1169c:	05bfffc4 	movi	r22,-1
   116a0:	a000151e 	bne	r20,zero,116f8 <__call_exitprocs+0xe0>
   116a4:	8409883a 	add	r4,r16,r16
   116a8:	2105883a 	add	r2,r4,r4
   116ac:	1485883a 	add	r2,r2,r18
   116b0:	10c02017 	ldw	r3,128(r2)
   116b4:	a8c01126 	beq	r21,r3,116fc <__call_exitprocs+0xe4>
   116b8:	843fffc4 	addi	r16,r16,-1
   116bc:	85bff81e 	bne	r16,r22,116a0 <__call_exitprocs+0x88>
   116c0:	d8800217 	ldw	r2,8(sp)
   116c4:	10003126 	beq	r2,zero,1178c <__call_exitprocs+0x174>
   116c8:	dfc00c17 	ldw	ra,48(sp)
   116cc:	df000b17 	ldw	fp,44(sp)
   116d0:	ddc00a17 	ldw	r23,40(sp)
   116d4:	dd800917 	ldw	r22,36(sp)
   116d8:	dd400817 	ldw	r21,32(sp)
   116dc:	dd000717 	ldw	r20,28(sp)
   116e0:	dcc00617 	ldw	r19,24(sp)
   116e4:	dc800517 	ldw	r18,20(sp)
   116e8:	dc400417 	ldw	r17,16(sp)
   116ec:	dc000317 	ldw	r16,12(sp)
   116f0:	dec00d04 	addi	sp,sp,52
   116f4:	f800283a 	ret
   116f8:	8409883a 	add	r4,r16,r16
   116fc:	88c00117 	ldw	r3,4(r17)
   11700:	2105883a 	add	r2,r4,r4
   11704:	1445883a 	add	r2,r2,r17
   11708:	18ffffc4 	addi	r3,r3,-1
   1170c:	11800217 	ldw	r6,8(r2)
   11710:	1c001526 	beq	r3,r16,11768 <__call_exitprocs+0x150>
   11714:	10000215 	stw	zero,8(r2)
   11718:	303fe726 	beq	r6,zero,116b8 <__call_exitprocs+0xa0>
   1171c:	00c00044 	movi	r3,1
   11720:	1c06983a 	sll	r3,r3,r16
   11724:	90804017 	ldw	r2,256(r18)
   11728:	8cc00117 	ldw	r19,4(r17)
   1172c:	1884703a 	and	r2,r3,r2
   11730:	10001426 	beq	r2,zero,11784 <__call_exitprocs+0x16c>
   11734:	90804117 	ldw	r2,260(r18)
   11738:	1884703a 	and	r2,r3,r2
   1173c:	10000c1e 	bne	r2,zero,11770 <__call_exitprocs+0x158>
   11740:	2105883a 	add	r2,r4,r4
   11744:	1485883a 	add	r2,r2,r18
   11748:	11400017 	ldw	r5,0(r2)
   1174c:	e009883a 	mov	r4,fp
   11750:	303ee83a 	callr	r6
   11754:	88800117 	ldw	r2,4(r17)
   11758:	98bfc81e 	bne	r19,r2,1167c <__call_exitprocs+0x64>
   1175c:	b8800017 	ldw	r2,0(r23)
   11760:	147fd526 	beq	r2,r17,116b8 <__call_exitprocs+0xa0>
   11764:	003fc506 	br	1167c <__call_exitprocs+0x64>
   11768:	8c000115 	stw	r16,4(r17)
   1176c:	003fea06 	br	11718 <__call_exitprocs+0x100>
   11770:	2105883a 	add	r2,r4,r4
   11774:	1485883a 	add	r2,r2,r18
   11778:	11000017 	ldw	r4,0(r2)
   1177c:	303ee83a 	callr	r6
   11780:	003ff406 	br	11754 <__call_exitprocs+0x13c>
   11784:	303ee83a 	callr	r6
   11788:	003ff206 	br	11754 <__call_exitprocs+0x13c>
   1178c:	88800117 	ldw	r2,4(r17)
   11790:	1000081e 	bne	r2,zero,117b4 <__call_exitprocs+0x19c>
   11794:	89000017 	ldw	r4,0(r17)
   11798:	20000726 	beq	r4,zero,117b8 <__call_exitprocs+0x1a0>
   1179c:	b9000015 	stw	r4,0(r23)
   117a0:	8809883a 	mov	r4,r17
   117a4:	00000000 	call	0 <__alt_mem_SDRAM>
   117a8:	bc400017 	ldw	r17,0(r23)
   117ac:	883fb71e 	bne	r17,zero,1168c <__call_exitprocs+0x74>
   117b0:	003fc506 	br	116c8 <__call_exitprocs+0xb0>
   117b4:	89000017 	ldw	r4,0(r17)
   117b8:	882f883a 	mov	r23,r17
   117bc:	2023883a 	mov	r17,r4
   117c0:	883fb21e 	bne	r17,zero,1168c <__call_exitprocs+0x74>
   117c4:	003fc006 	br	116c8 <__call_exitprocs+0xb0>

000117c8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   117c8:	20000226 	beq	r4,zero,117d4 <_exit+0xc>
    ALT_SIM_FAIL();
   117cc:	002af070 	cmpltui	zero,zero,43969
   117d0:	00000106 	br	117d8 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   117d4:	002af0b0 	cmpltui	zero,zero,43970
   117d8:	003fff06 	br	117d8 <_exit+0x10>
   117dc:	00011614 	movui	zero,1112
